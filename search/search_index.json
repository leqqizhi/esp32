{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ESP32\u5355\u7247\u673a\u6559\u7a0b \u5fd7\u8fdc\u73a9\u5177\u5e97\uff1ahttps://shop143975681.taobao.com/ mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. \u5165\u95e8\u5411\u5bfc mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. site_author: \u4e50\u542f\u667a\u73a9\u5177\u6709\u9650\u516c\u53f8","title":"Home"},{"location":"#esp32","text":"\u5fd7\u8fdc\u73a9\u5177\u5e97\uff1ahttps://shop143975681.taobao.com/ mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"ESP32\u5355\u7247\u673a\u6559\u7a0b"},{"location":"#_1","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. site_author: \u4e50\u542f\u667a\u73a9\u5177\u6709\u9650\u516c\u53f8","title":"\u5165\u95e8\u5411\u5bfc"},{"location":"%E7%82%B9%E4%BA%AELED%E7%81%AF/","text":"\u8001\u6b3e","title":"\u8001\u6b3e"},{"location":"%E7%82%B9%E4%BA%AELED%E7%81%AF/#_1","text":"","title":"\u8001\u6b3e"},{"location":"MicroPython/8%C3%978%E7%82%B9%E9%98%B5%E5%B1%8F/","text":"8\u00d78\u70b9\u9635\u5c4f \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 8\u00d78\u70b9\u9635\u5c4f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 8\u00d78\u70b9\u9635\u5c4f-GND P5 2 8\u00d78\u70b9\u9635\u5c4f-VCC P5 3 8\u00d78\u70b9\u9635\u5c4f-DIN 23 4 8\u00d78\u70b9\u9635\u5c4f-CS 5 5 8\u00d78\u70b9\u9635\u5c4f-CLK 18 OLED\u663e\u793a\u5c4f\u4ecb\u7ecd 8\u00d78 \u70b9\u9635\u6a21\u5757\u7531 MAX7219 \u9a71\u52a8\uff0cMAX7219 \u662f\u4e00\u79cd\u96c6\u6210\u5316\u7684\u4e32\u884c\u8f93\u5165/\u8f93\u51fa\u663e\u793a\u9a71\u52a8\u5668, \u53ea\u9700\u8981 3\u4e2a IO \u53e3\u5373\u53ef\u9a71\u52a8 1 \u4e2a\u70b9\u9635\uff0c\u70b9\u9635\u663e\u793a\u65f6\u65e0\u95ea\u70c1\u4e14\u652f\u6301\u7ea7\u8054\uff0c8\u00d78 \u70b9\u9635\u6a21\u5757\u901a\u8fc7 Max7219 \u9a71\u52a8\uff0cMax7219 \u91c7\u7528\u7684\u662f\u4e09\u7ebf\u4e32\u884c\u901a\u4fe1\uff0c\u5f53\u63a5\u6536 Arduino \u6570\u636e\u65f6\u901a\u8fc7\u82af\u7247\u5185\u90e8 8\u00d78 \u4f4d\u9759\u6001 RAM \u50a8\u5b58\u6570\u636e\uff0c\u5728\u901a\u8fc7 Max7219 \u6765\u63a7\u5236 8\u00d78 \u70b9\u9635\u6a21\u5757\u7684\u6bcf\u4e2a\u5f15\u811a\u7684\u9ad8\u4f4e\u7535\u5e73\uff0c\u4ece\u800c\u8fbe\u5230\u663e\u793a\u76ee\u7684\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aMAX7219.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import Pin, SPI,Timer import time from common.font import FONT # matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) class MAX7219: \"\"\" MAX7219\u9a71\u52a8\u7c7b\uff08\u9002\u7528\u4e8eESP32\uff0c\u652f\u6301\u7ea7\u8054\uff09 \u529f\u80fd\uff1a\u63a7\u52368x8 LED\u70b9\u9635\u6216\u6570\u7801\u7ba1\uff0c\u652f\u6301\u4eae\u5ea6\u8c03\u8282\u3001\u50cf\u7d20\u64cd\u4f5c\u3001\u6e05\u5c4f\u7b49 \u53c2\u6570\u8bf4\u660e\uff1a - spi_bus: SPI\u603b\u7ebf\u7f16\u53f7\uff08ESP32\u7684HSPI=1, VSPI=2\uff0c\u9ed8\u8ba4VSPI=2\uff09 - cs_pin: \u7247\u9009\u5f15\u811a\uff08\u9ed8\u8ba4GPIO5\uff09 - num_devices: \u7ea7\u8054\u7684MAX7219\u6570\u91cf\uff08\u9ed8\u8ba41\u4e2a\uff09 \"\"\" # MAX7219\u5bc4\u5b58\u5668\u5730\u5740\u5e38\u91cf _REG_NOOP = 0x00 _REG_DIGIT0 = 0x01 # \u7b2c1\u884c\u6570\u636e\uff08\u6570\u7801\u7ba1\u5219\u4e3a\u7b2c1\u4f4d\uff09 _REG_DECODE = 0x09 # \u89e3\u7801\u6a21\u5f0f _REG_INTENSITY = 0x0A # \u4eae\u5ea6 _REG_SCAN_LIMIT = 0x0B # \u626b\u63cf\u884c\u6570 _REG_SHUTDOWN = 0x0C # \u5173\u673a\u6a21\u5f0f _REG_DISPLAY_TEST = 0x0F # \u6d4b\u8bd5\u6a21\u5f0f def __init__(self, spi_bus=2, cs_pin=5, num_devices=1): \"\"\" \u521d\u59cb\u5316SPI\u5e76\u914d\u7f6eMAX7219 \"\"\" # \u521d\u59cb\u5316SPI\uff08ESP32\u7684VSPI\u9ed8\u8ba4\u5f15\u811a\uff1asck=18, mosi=23\uff09 self.spi = SPI( spi_bus, baudrate=10_000_000, # MAX7219\u652f\u6301\u6700\u9ad810MHz\u65f6\u949f sck=Pin(18), mosi=Pin(23), polarity=0, # SPI\u6a21\u5f0f0\uff08CPOL=0, CPHA=0\uff09 phase=0 ) # \u521d\u59cb\u5316\u7247\u9009\u5f15\u811a self.cs = Pin(cs_pin, Pin.OUT) self.cs.value(1) # \u9ed8\u8ba4\u62c9\u9ad8\uff08\u4e0d\u9009\u4e2d\uff09 self.num_devices = num_devices # \u7ea7\u8054\u8bbe\u5907\u6570\u91cf # \u521d\u59cb\u5316MAX7219\u5bc4\u5b58\u5668 self._write_all(self._REG_SHUTDOWN, 0x01) # \u9000\u51fa\u5173\u673a\u6a21\u5f0f\uff080x01=\u6b63\u5e38\uff09 self._write_all(self._REG_DECODE, 0x00) # \u7981\u7528BCD\u89e3\u7801 self._write_all(self._REG_SCAN_LIMIT, 0x07) # \u626b\u63cf\u6240\u67098\u884c self._write_all(self._REG_INTENSITY, 0x07) # \u9ed8\u8ba4\u4eae\u5ea6\uff080x00~0x0F\uff09 self._write_all(self._REG_DISPLAY_TEST, 0x00) # \u5173\u95ed\u6d4b\u8bd5\u6a21\u5f0f self.clear() # \u6e05\u7a7a\u663e\u793a def _write(self, reg, data, device=0): \"\"\" \u5411\u6307\u5b9a\u8bbe\u5907\u5199\u5165\u6570\u636e\uff08\u9002\u7528\u4e8e\u7ea7\u8054\u573a\u666f\uff09 \u53c2\u6570\uff1a - reg: \u5bc4\u5b58\u5668\u5730\u5740 - data: \u6570\u636e\u5b57\u8282 - device: \u8bbe\u5907\u7d22\u5f15\uff08\u4ece0\u5f00\u59cb\uff0c0=\u7b2c\u4e00\u4e2a\u6a21\u5757\uff09 \"\"\" if device >= self.num_devices: return # \u7ea7\u8054\u65f6\uff0c\u6570\u636e\u6309\u4ece\u540e\u5f80\u524d\u7684\u987a\u5e8f\u53d1\u9001 self.cs.value(0) for dev in reversed(range(self.num_devices)): if dev == device: self.spi.write(bytearray([reg, data])) else: self.spi.write(bytearray([self._REG_NOOP, 0x00])) self.cs.value(1) def _write_all(self, reg, data): \"\"\" \u5411\u6240\u6709\u7ea7\u8054\u8bbe\u5907\u5199\u5165\u76f8\u540c\u6570\u636e\uff08\u7528\u4e8e\u5168\u5c40\u914d\u7f6e\uff09 \"\"\" self.cs.value(0) for _ in range(self.num_devices): self.spi.write(bytearray([reg, data])) self.cs.value(1) def clear(self, device=None): \"\"\" \u6e05\u7a7a\u663e\u793a\uff08\u53ef\u6307\u5b9a\u5355\u4e2a\u8bbe\u5907\u6216\u5168\u90e8\uff09 \"\"\" if device is None: # \u6e05\u7a7a\u6240\u6709\u8bbe\u5907 for row in range(8): self._write_all(self._REG_DIGIT0 + row, 0x00) else: # \u6e05\u7a7a\u6307\u5b9a\u8bbe\u5907 for row in range(8): self._write(self._REG_DIGIT0 + row, 0x00, device) def set_pixel(self, x, y, state=1, device=0): \"\"\" \u8bbe\u7f6e\u5355\u4e2a\u50cf\u7d20\u70b9\u72b6\u6001\uff08\u9002\u7528\u4e8e\u70b9\u9635\uff09 \u53c2\u6570\uff1a - x: \u5217\u5750\u6807\uff080~7\uff09 - y: \u884c\u5750\u6807\uff080~7\uff09 - state: \u72b6\u6001\uff081=\u4eae\uff0c0=\u706d\uff09 - device: \u8bbe\u5907\u7d22\u5f15 \"\"\" if not (0 <= x < 8 and 0 <= y < 8): return # \u83b7\u53d6\u5f53\u524d\u884c\u6570\u636e current = self._get_row(y, device) # \u4fee\u6539\u5bf9\u5e94\u4f4d if state: new_data = current | (0x80 >> x) # \u9ad8\u4f4d\u5bf9\u5e94\u5de6\u4fa7LED else: new_data = current & ~(0x80 >> x) self._write(self._REG_DIGIT0 + y, new_data, device) def _get_row(self, row, device): \"\"\" \u8bfb\u53d6\u6307\u5b9a\u884c\u7684\u5f53\u524d\u6570\u636e\uff08\u865a\u62df\u5b9e\u73b0\uff0c\u5b9e\u9645\u9700\u901a\u8fc7SPI\u8bfb\u53d6\uff09 \u6ce8\u610f\uff1aMAX7219\u4e0d\u652f\u6301\u76f4\u63a5\u8bfb\u53d6\u663e\u793a\u6570\u636e\uff0c\u6b64\u5904\u4ec5\u4e3a\u6f14\u793a\u903b\u8f91 \"\"\" return 0x00 # \u5b9e\u9645\u5e94\u7528\u9700\u7ef4\u62a4\u4e00\u4e2a\u663e\u793a\u7f13\u51b2\u533a def set_brightness(self, brightness, device=None): \"\"\" \u8bbe\u7f6e\u4eae\u5ea6\uff080-15\uff09 \u53c2\u6570\uff1a - brightness: \u4eae\u5ea6\u503c - device: \u6307\u5b9a\u8bbe\u5907\uff08None=\u6240\u6709\u8bbe\u5907\uff09 \"\"\" val = min(15, max(0, brightness)) if device is None: self._write_all(self._REG_INTENSITY, val) else: self._write(self._REG_INTENSITY, val, device) def show_char(self, char_data, device=0): \"\"\" \u663e\u793a8x8\u5b57\u7b26\uff08\u9700\u4f20\u51658\u5b57\u8282\u7684\u5217\u8868\u6216\u5b57\u8282\u5e8f\u5217\uff09 \u793a\u4f8b\uff1aCHAR_A = [0x3C, 0x7E, 0xC3, 0xC3, 0xFF, 0xC3, 0xC3, 0x00] \"\"\" for row in range(8): self._write(self._REG_DIGIT0 + row, char_data[row], device) def show_str(self,text): ''' \u663e\u793a\u5b57\u7b26\u4e32\uff08\u9700\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u6ce8\u610f\u957f\u5ea6\u4e0d\u8981\u8d85\u8fc7\u70b9\u9635\u5c4f\u5e55\u6570\uff09 ''' i = 0 for char in text: self.show_char(FONT[char],device=(i)) i += 1 \u5b9e\u9a8c\u4e00\uff1a8\u00d78\u70b9\u9635\u5c4f\u7684\u663e\u793a \u4ee3\u7801\u5982\u4e0b\uff1a from machine import Pin, SPI from libs.MAX7219 import MAX7219 import time from common.font import FONT # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67092\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) ''' 1\u3001 \u6e05\u5c4f\u65b9\u6cd5 clear(device=None) device (int/None): \u6307\u5b9a\u6e05\u7a7a\u7684\u8bbe\u5907\u7d22\u5f15\uff08None\u8868\u793a\u6e05\u7a7a\u6240\u6709\u8bbe\u5907\uff09 \u4f8b\u5982:\u6e05\u5c4f\u7b2c\u4e8c\u4e2a\u5c4f\u5e55\uff1aclear(1) ''' matrix.clear() # \u6e05\u5c4f\uff08\u6240\u6709\uff09 ''' 2\u3001 \u8bbe\u7f6e\u50cf\u7d20\u70b9\u65b9\u6cd5 set_pixel(x, y, state=1, device=0) x (int): \u5217\u5750\u6807\uff080~7\uff0c0=\u6700\u5de6\u4fa7\uff09\u3002 y (int): \u884c\u5750\u6807\uff080~7\uff0c0=\u6700\u4e0a\u65b9\uff09\u3002 state (int): \u72b6\u6001\uff081=\u4eae\uff0c0=\u706d\uff09\u3002 device (int): \u76ee\u6807\u8bbe\u5907\u7d22\u5f15\u3002(device\u662f\u5c4f\u6570\u7684\u7d22\u5f15\u503c\uff0c\u4ece0\u5f00\u59cb\u7b97\u7b2c\u4e00\u4e2a) \u793a\u4f8b\uff1a \u70b9\u4eae\u7b2c\u4e00\u4e2a\u5c4f\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c2\u79d2\u540e\u70b9\u4eae\u7b2c\u4e8c\u4e2a\u5c4f\u5e55\u4e0a\u7684\u70b9\uff0c 2\u79d2\u540e\u7184\u706d\u7b2c\u4e00\u4e2a\u70b9\uff0c\u518d2\u79d2\u7184\u706d\u7b2c\u4e8c\u4e2a\u70b9 ''' matrix.set_pixel(3, 2, state=1, device=0) time.sleep(2) matrix.set_pixel(3, 2, state=1, device=1) time.sleep(2) matrix.clear(0) time.sleep(2) matrix.clear(device=1) time.sleep(2) ''' 3\u3001 \u8bbe\u7f6e\u4eae\u5ea6\u65b9\u6cd5 set_brightness(brightness, device=None) brightness (int): \u4eae\u5ea6\u503c\uff080~15\uff0c0=\u6700\u6697\uff0c15=\u6700\u4eae\uff09\u3002 device (int/None): \u6307\u5b9a\u8bbe\u5907\u7d22\u5f15\uff08None=\u6240\u6709\u8bbe\u5907\uff09 \u793a\u4f8b\uff1a\u8ba9\u4e00\u4e2a\u70b9\u6709\u6697\u5230\u4eae ''' matrix.clear() # \u6e05\u5c4f matrix.set_pixel(3, 2, state=1) # \u70b9\u4eae\u4e00\u4e2a\u70b9 for i in range(16): matrix.set_brightness(i) # \u4eae\u5ea6\u9010\u6e10\u589e\u52a0 time.sleep(1) matrix.clear() \u5b9e\u9a8c\u4e8c\uff1a8\u00d78\u70b9\u9635\u5c4f\u7684\u663e\u793a\u5355\u4e2a\u5b57\u7b26 \u4f7f\u7528\u5728\u7ebf\u751f\u6210\u5b57\u7b26\u7684\u70b9\u9635\u6570\u636e\uff0c \u70b9\u51fb\u6253\u5f00 \u4f7f\u7528\u65b9\u6cd5 \u4ece\u5de6\u4fa7\u9009\u62e9\u56fe\u5f62\u6837\u5f0f \u590d\u5236\u53f3\u4fa7\u7684\u70b9\u9635\u6570\u636e \u6574\u7406\u6210python\u6587\u4ef6\u7684\u5217\u8868\u683c\u5f0f \u5982\u4e0b\uff1a python CHAR_A = [ 0b00111100, # \u884c0 0b01111110, # \u884c1 0b11100111, # \u884c2 0b11000011, # \u884c3 0b11000011, # \u884c4 0b11000011, # \u884c5 0b11000011, # \u884c6 0b00000000 # \u884c7 ] \u81ea\u5b9a\u4e49\u56fe\u6848\u65b9\u6cd5\uff1a \u6309\u7167\u5982\u4e0a\u65b9\u6cd5\u6574\u7406\u6210\u5217\u8868\u6587\u4ef6 - \u663e\u793a\u56fe\u6848 \u7a0b\u5e8f\u5982\u4e0b ```python from machine import Pin, SPI from libs.MAX7219 import MAX7219 import time from common.font import FONT # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67092\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) ''' 1\u3001 \u663e\u793a\u5b57\u7b26\u65b9\u6cd5 show_char(char_data, device=0) char_data (list/bytes): \u5b57\u7b26\u76848\u5b57\u8282\u6570\u636e\uff08\u6bcf\u5b57\u8282\u5bf9\u5e94\u4e00\u884c\uff0c\u9ad8\u4f4d\u5728\u5de6\uff09\u3002 device (int): \u76ee\u6807\u8bbe\u5907\u7d22\u5f15\u3002 ''' \u5b9a\u4e49\u5b57\u7b26'A'\u7684\u70b9\u9635\u6570\u636e\uff088\u5b57\u8282\uff09 CHAR_A = [ 0b00111100, # \u884c0 0b01111110, # \u884c1 0b11100111, # \u884c2 0b11000011, # \u884c3 0b11000011, # \u884c4 0b11000011, # \u884c5 0b11000011, # \u884c6 0b00000000 # \u884c7 ] matrix.show_char(CHAR_A, device=1) # \u5728\u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793a\u5b57\u7b26'A' time.sleep(2) ``` \u5efa\u7acb\u5b57\u4f53\u5e93\u6587\u4ef6 \u518dcommon\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a font.py \u6587\u4ef6\uff0c\u7528\u6765\u5b58\u653e\u5b57\u4f53\u5e93\u6587\u4ef6\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u81ea\u5df1\u9700\u8981\u7684\u7b26\u53f7\u6216\u8005\u56fe\u5f62\uff0c\u6309\u7167\u524d\u9762\u8bf4\u7684\u53d6\u6a21\u65b9\u5f0f\u83b7\u53d6\u4e8c\u8fdb\u5236\u6570\u7ec4\uff0c\u518d\u628a\u6570\u7ec4\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u3002\uff08\u5c0f\u6280\u5de7\uff1a\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6\u590d\u5236\u5230DeepSeek\u4e2d\uff0c\u8bf7\u6c42\u628a\u4e8c\u8fdb\u5236\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\uff0c\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e86\uff09 \u7ed3\u679c\u5982\u4e0b\uff1a \u628a\u5f97\u5230\u7684\u5341\u516d\u8fdb\u5236\u6587\u4ef6\u6574\u7406\u5230\u4e0b\u9762\u7684\u6587\u4ef6\u4e2d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 python FONT = { \"A\": [0x00, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66], \"B\": [0x00, 0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C], \"C\": [0x00, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C], \"D\": [0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C], \"E\": [0x00, 0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E], \"F\": [0x00, 0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60], \"G\": [0x00, 0x3C, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x3C], \"H\": [0x00, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66], \"I\": [0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C], \"J\": [0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x6C, 0x6C, 0x38], \"K\": [0x00, 0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66], \"L\": [0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E], \"M\": [0x00, 0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63], \"N\": [0x00, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63], \"O\": [0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C], \"P\": [0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60], \"Q\": [0x00, 0x3C, 0x66, 0x66, 0x66, 0x6E, 0x3C, 0x06], \"R\": [0x00, 0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66], \"S\": [0x00, 0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C], \"T\": [0x00, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18], \"U\": [0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E], \"V\": [0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18], \"W\": [0x00, 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63], \"X\": [0x00, 0x63, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x63], \"Y\": [0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18], \"Z\": [0x00, 0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E], \" \": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], \"a\": [0x00, 0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E], \"b\": [0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C], \"c\": [0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C], \"d\": [0x00, 0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3E], \"e\": [0x00, 0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C], \"f\": [0x00, 0x1C, 0x36, 0x30, 0x30, 0x7C, 0x30, 0x30], \"g\": [0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C], \"h\": [0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66], \"i\": [0x00, 0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C], \"j\": [0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x6C, 0x6C, 0x38], \"k\": [0x00, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66], \"l\": [0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], \"m\": [0x00, 0x00, 0x00, 0x63, 0x77, 0x7F, 0x6B, 0x6B], \"n\": [0x00, 0x00, 0x00, 0x7C, 0x7E, 0x66, 0x66, 0x66], \"o\": [0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C], \"p\": [0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60], \"q\": [0x00, 0x00, 0x3C, 0x6C, 0x6C, 0x3C, 0x0D, 0x0F], \"r\": [0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x60, 0x60], \"s\": [0x00, 0x00, 0x00, 0x3E, 0x40, 0x3C, 0x02, 0x7C], \"t\": [0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18], \"u\": [0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E], \"v\": [0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3C, 0x18], \"w\": [0x00, 0x00, 0x00, 0x63, 0x6B, 0x6B, 0x6B, 0x3E], \"x\": [0x00, 0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66], \"y\": [0x00, 0x00, 0x00, 0x66, 0x66, 0x3E, 0x06, 0x3C], \"z\": [0x00, 0x00, 0x00, 0x3C, 0x0C, 0x18, 0x30, 0x3C], \"1\": [0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00], \"2\": [0x78, 0xC6, 0x06, 0x1C, 0x30, 0xC6, 0xFC, 0x00], \"3\": [0x78, 0xC6, 0x06, 0x1C, 0x06, 0xC6, 0x78, 0x00], \"4\": [0x0E, 0x1E, 0x36, 0x66, 0xFE, 0x06, 0x1E, 0x00], \"5\": [0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xC6, 0x78, 0x00], \"6\": [0x1C, 0x30, 0x60, 0xF8, 0xC6, 0xC6, 0x78, 0x00], \"7\": [0xFC, 0xC6, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x00], \"8\": [0x78, 0xC6, 0xC6, 0x78, 0xC6, 0xC6, 0x78, 0x00], \"9\": [0x78, 0xC6, 0xC6, 0x7C, 0x06, 0x0C, 0x70, 0x00], \"0\": [0x7E, 0xC3, 0xC7, 0xCF, 0xF9, 0xF3, 0x7E, 0x00], \"+\": [0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00], \"-\": [0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00], \"*\": [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00], \"/\": [0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00], \"%\": [0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00], \"=\": [0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00], \"~\": [0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], \"^\": [0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00], \"<\": [0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00], \">\": [0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00], \"(\": [0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00], \")\": [0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00], \"[\": [0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00], \"]\": [0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00], \"{\": [0x0E, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x0E, 0x00], \"}\": [0xE0, 0x30, 0x30, 0x0E, 0x30, 0x30, 0xE0, 0x00], \"\u3002\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00], \":\": [0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00], \";\": [0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60], \",\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60], \"!\": [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00], \"?\": [0x78, 0xCC, 0x18, 0x30, 0x60, 0x00, 0x60, 0x00], \"@\": [0x7E, 0xC3, 0xCF, 0xCF, 0xCF, 0xC0, 0x78, 0x00], \"&\": [0x1C, 0x36, 0x1C, 0x3E, 0x6C, 0x66, 0x3E, 0x00], \"$\": [0x30, 0x7E, 0xC0, 0x78, 0x0C, 0x7E, 0x30, 0x00], \"#\": [0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00], \"\\\\\": [0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00], \"\u2018\": [0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00], \"\u2019\": [0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00] } \u5b9e\u9a8c\u4e09\uff1a\u70b9\u9635\u5c4f\u663e\u793a\u591a\u4e2a\u5b57\u7b26 \u793a\u4f8b\uff1a ```python from machine import Pin, SPI from libs.MAX7219 import MAX7219 import time # \u5bfc\u5165\u521a\u624d\u5efa\u7acb\u7684\u5b57\u4f53\u5e93 from common.font import FONT # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67093\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) ''' 1\u3001 \u7ea7\u8054\u663e\u793a\u591a\u4e2a\u5b57\u7b26 \u7b2c\u4e00\u4e2a\u5c4f\u663e\u793a\u201cA\u201d \u7b2c\u4e8c\u4e2a\u5c4f\u663e\u793a\u2018B\u2019 ''' matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) matrix.show_char(FONT['A'], device=0) # \u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793aA matrix.show_char(FONT['B'], device=1) # \u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793aB matrix.show_char(FONT['C'], device=2) # \u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793aC time.sleep(2) matrix.clear() ``` ''' 2\u3001 show_str(text) text\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u5f97\u8d85\u8fc7\u70b9\u9635\u5c4f\u6570\uff0c\u8d85\u51fa\u90e8\u5206\u4e0d\u663e\u793a \u7ea7\u8054\u663e\u793a\u5b57\u7b26\u4e32 \u7b2c\u4e00\u4e2a\u5c4f\u663e\u793a\u201cA\u201d \u7b2c\u4e8c\u4e2a\u5c4f\u663e\u793a\u2018C\u2019 \u7b2c\u4e8c\u4e2a\u5c4f\u663e\u793a\u2018d\u2019 ''' matrix.show_str('ACd') time.sleep(2) matrix.clear() ```","title":"18.8\u00d78\u70b9\u9635\u5c4f"},{"location":"MicroPython/8%C3%978%E7%82%B9%E9%98%B5%E5%B1%8F/#88","text":"","title":"8\u00d78\u70b9\u9635\u5c4f"},{"location":"MicroPython/8%C3%978%E7%82%B9%E9%98%B5%E5%B1%8F/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 8\u00d78\u70b9\u9635\u5c4f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 8\u00d78\u70b9\u9635\u5c4f-GND P5 2 8\u00d78\u70b9\u9635\u5c4f-VCC P5 3 8\u00d78\u70b9\u9635\u5c4f-DIN 23 4 8\u00d78\u70b9\u9635\u5c4f-CS 5 5 8\u00d78\u70b9\u9635\u5c4f-CLK 18 OLED\u663e\u793a\u5c4f\u4ecb\u7ecd 8\u00d78 \u70b9\u9635\u6a21\u5757\u7531 MAX7219 \u9a71\u52a8\uff0cMAX7219 \u662f\u4e00\u79cd\u96c6\u6210\u5316\u7684\u4e32\u884c\u8f93\u5165/\u8f93\u51fa\u663e\u793a\u9a71\u52a8\u5668, \u53ea\u9700\u8981 3\u4e2a IO \u53e3\u5373\u53ef\u9a71\u52a8 1 \u4e2a\u70b9\u9635\uff0c\u70b9\u9635\u663e\u793a\u65f6\u65e0\u95ea\u70c1\u4e14\u652f\u6301\u7ea7\u8054\uff0c8\u00d78 \u70b9\u9635\u6a21\u5757\u901a\u8fc7 Max7219 \u9a71\u52a8\uff0cMax7219 \u91c7\u7528\u7684\u662f\u4e09\u7ebf\u4e32\u884c\u901a\u4fe1\uff0c\u5f53\u63a5\u6536 Arduino \u6570\u636e\u65f6\u901a\u8fc7\u82af\u7247\u5185\u90e8 8\u00d78 \u4f4d\u9759\u6001 RAM \u50a8\u5b58\u6570\u636e\uff0c\u5728\u901a\u8fc7 Max7219 \u6765\u63a7\u5236 8\u00d78 \u70b9\u9635\u6a21\u5757\u7684\u6bcf\u4e2a\u5f15\u811a\u7684\u9ad8\u4f4e\u7535\u5e73\uff0c\u4ece\u800c\u8fbe\u5230\u663e\u793a\u76ee\u7684\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aMAX7219.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import Pin, SPI,Timer import time from common.font import FONT # matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) class MAX7219: \"\"\" MAX7219\u9a71\u52a8\u7c7b\uff08\u9002\u7528\u4e8eESP32\uff0c\u652f\u6301\u7ea7\u8054\uff09 \u529f\u80fd\uff1a\u63a7\u52368x8 LED\u70b9\u9635\u6216\u6570\u7801\u7ba1\uff0c\u652f\u6301\u4eae\u5ea6\u8c03\u8282\u3001\u50cf\u7d20\u64cd\u4f5c\u3001\u6e05\u5c4f\u7b49 \u53c2\u6570\u8bf4\u660e\uff1a - spi_bus: SPI\u603b\u7ebf\u7f16\u53f7\uff08ESP32\u7684HSPI=1, VSPI=2\uff0c\u9ed8\u8ba4VSPI=2\uff09 - cs_pin: \u7247\u9009\u5f15\u811a\uff08\u9ed8\u8ba4GPIO5\uff09 - num_devices: \u7ea7\u8054\u7684MAX7219\u6570\u91cf\uff08\u9ed8\u8ba41\u4e2a\uff09 \"\"\" # MAX7219\u5bc4\u5b58\u5668\u5730\u5740\u5e38\u91cf _REG_NOOP = 0x00 _REG_DIGIT0 = 0x01 # \u7b2c1\u884c\u6570\u636e\uff08\u6570\u7801\u7ba1\u5219\u4e3a\u7b2c1\u4f4d\uff09 _REG_DECODE = 0x09 # \u89e3\u7801\u6a21\u5f0f _REG_INTENSITY = 0x0A # \u4eae\u5ea6 _REG_SCAN_LIMIT = 0x0B # \u626b\u63cf\u884c\u6570 _REG_SHUTDOWN = 0x0C # \u5173\u673a\u6a21\u5f0f _REG_DISPLAY_TEST = 0x0F # \u6d4b\u8bd5\u6a21\u5f0f def __init__(self, spi_bus=2, cs_pin=5, num_devices=1): \"\"\" \u521d\u59cb\u5316SPI\u5e76\u914d\u7f6eMAX7219 \"\"\" # \u521d\u59cb\u5316SPI\uff08ESP32\u7684VSPI\u9ed8\u8ba4\u5f15\u811a\uff1asck=18, mosi=23\uff09 self.spi = SPI( spi_bus, baudrate=10_000_000, # MAX7219\u652f\u6301\u6700\u9ad810MHz\u65f6\u949f sck=Pin(18), mosi=Pin(23), polarity=0, # SPI\u6a21\u5f0f0\uff08CPOL=0, CPHA=0\uff09 phase=0 ) # \u521d\u59cb\u5316\u7247\u9009\u5f15\u811a self.cs = Pin(cs_pin, Pin.OUT) self.cs.value(1) # \u9ed8\u8ba4\u62c9\u9ad8\uff08\u4e0d\u9009\u4e2d\uff09 self.num_devices = num_devices # \u7ea7\u8054\u8bbe\u5907\u6570\u91cf # \u521d\u59cb\u5316MAX7219\u5bc4\u5b58\u5668 self._write_all(self._REG_SHUTDOWN, 0x01) # \u9000\u51fa\u5173\u673a\u6a21\u5f0f\uff080x01=\u6b63\u5e38\uff09 self._write_all(self._REG_DECODE, 0x00) # \u7981\u7528BCD\u89e3\u7801 self._write_all(self._REG_SCAN_LIMIT, 0x07) # \u626b\u63cf\u6240\u67098\u884c self._write_all(self._REG_INTENSITY, 0x07) # \u9ed8\u8ba4\u4eae\u5ea6\uff080x00~0x0F\uff09 self._write_all(self._REG_DISPLAY_TEST, 0x00) # \u5173\u95ed\u6d4b\u8bd5\u6a21\u5f0f self.clear() # \u6e05\u7a7a\u663e\u793a def _write(self, reg, data, device=0): \"\"\" \u5411\u6307\u5b9a\u8bbe\u5907\u5199\u5165\u6570\u636e\uff08\u9002\u7528\u4e8e\u7ea7\u8054\u573a\u666f\uff09 \u53c2\u6570\uff1a - reg: \u5bc4\u5b58\u5668\u5730\u5740 - data: \u6570\u636e\u5b57\u8282 - device: \u8bbe\u5907\u7d22\u5f15\uff08\u4ece0\u5f00\u59cb\uff0c0=\u7b2c\u4e00\u4e2a\u6a21\u5757\uff09 \"\"\" if device >= self.num_devices: return # \u7ea7\u8054\u65f6\uff0c\u6570\u636e\u6309\u4ece\u540e\u5f80\u524d\u7684\u987a\u5e8f\u53d1\u9001 self.cs.value(0) for dev in reversed(range(self.num_devices)): if dev == device: self.spi.write(bytearray([reg, data])) else: self.spi.write(bytearray([self._REG_NOOP, 0x00])) self.cs.value(1) def _write_all(self, reg, data): \"\"\" \u5411\u6240\u6709\u7ea7\u8054\u8bbe\u5907\u5199\u5165\u76f8\u540c\u6570\u636e\uff08\u7528\u4e8e\u5168\u5c40\u914d\u7f6e\uff09 \"\"\" self.cs.value(0) for _ in range(self.num_devices): self.spi.write(bytearray([reg, data])) self.cs.value(1) def clear(self, device=None): \"\"\" \u6e05\u7a7a\u663e\u793a\uff08\u53ef\u6307\u5b9a\u5355\u4e2a\u8bbe\u5907\u6216\u5168\u90e8\uff09 \"\"\" if device is None: # \u6e05\u7a7a\u6240\u6709\u8bbe\u5907 for row in range(8): self._write_all(self._REG_DIGIT0 + row, 0x00) else: # \u6e05\u7a7a\u6307\u5b9a\u8bbe\u5907 for row in range(8): self._write(self._REG_DIGIT0 + row, 0x00, device) def set_pixel(self, x, y, state=1, device=0): \"\"\" \u8bbe\u7f6e\u5355\u4e2a\u50cf\u7d20\u70b9\u72b6\u6001\uff08\u9002\u7528\u4e8e\u70b9\u9635\uff09 \u53c2\u6570\uff1a - x: \u5217\u5750\u6807\uff080~7\uff09 - y: \u884c\u5750\u6807\uff080~7\uff09 - state: \u72b6\u6001\uff081=\u4eae\uff0c0=\u706d\uff09 - device: \u8bbe\u5907\u7d22\u5f15 \"\"\" if not (0 <= x < 8 and 0 <= y < 8): return # \u83b7\u53d6\u5f53\u524d\u884c\u6570\u636e current = self._get_row(y, device) # \u4fee\u6539\u5bf9\u5e94\u4f4d if state: new_data = current | (0x80 >> x) # \u9ad8\u4f4d\u5bf9\u5e94\u5de6\u4fa7LED else: new_data = current & ~(0x80 >> x) self._write(self._REG_DIGIT0 + y, new_data, device) def _get_row(self, row, device): \"\"\" \u8bfb\u53d6\u6307\u5b9a\u884c\u7684\u5f53\u524d\u6570\u636e\uff08\u865a\u62df\u5b9e\u73b0\uff0c\u5b9e\u9645\u9700\u901a\u8fc7SPI\u8bfb\u53d6\uff09 \u6ce8\u610f\uff1aMAX7219\u4e0d\u652f\u6301\u76f4\u63a5\u8bfb\u53d6\u663e\u793a\u6570\u636e\uff0c\u6b64\u5904\u4ec5\u4e3a\u6f14\u793a\u903b\u8f91 \"\"\" return 0x00 # \u5b9e\u9645\u5e94\u7528\u9700\u7ef4\u62a4\u4e00\u4e2a\u663e\u793a\u7f13\u51b2\u533a def set_brightness(self, brightness, device=None): \"\"\" \u8bbe\u7f6e\u4eae\u5ea6\uff080-15\uff09 \u53c2\u6570\uff1a - brightness: \u4eae\u5ea6\u503c - device: \u6307\u5b9a\u8bbe\u5907\uff08None=\u6240\u6709\u8bbe\u5907\uff09 \"\"\" val = min(15, max(0, brightness)) if device is None: self._write_all(self._REG_INTENSITY, val) else: self._write(self._REG_INTENSITY, val, device) def show_char(self, char_data, device=0): \"\"\" \u663e\u793a8x8\u5b57\u7b26\uff08\u9700\u4f20\u51658\u5b57\u8282\u7684\u5217\u8868\u6216\u5b57\u8282\u5e8f\u5217\uff09 \u793a\u4f8b\uff1aCHAR_A = [0x3C, 0x7E, 0xC3, 0xC3, 0xFF, 0xC3, 0xC3, 0x00] \"\"\" for row in range(8): self._write(self._REG_DIGIT0 + row, char_data[row], device) def show_str(self,text): ''' \u663e\u793a\u5b57\u7b26\u4e32\uff08\u9700\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u6ce8\u610f\u957f\u5ea6\u4e0d\u8981\u8d85\u8fc7\u70b9\u9635\u5c4f\u5e55\u6570\uff09 ''' i = 0 for char in text: self.show_char(FONT[char],device=(i)) i += 1","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/8%C3%978%E7%82%B9%E9%98%B5%E5%B1%8F/#88_1","text":"\u4ee3\u7801\u5982\u4e0b\uff1a from machine import Pin, SPI from libs.MAX7219 import MAX7219 import time from common.font import FONT # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67092\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) ''' 1\u3001 \u6e05\u5c4f\u65b9\u6cd5 clear(device=None) device (int/None): \u6307\u5b9a\u6e05\u7a7a\u7684\u8bbe\u5907\u7d22\u5f15\uff08None\u8868\u793a\u6e05\u7a7a\u6240\u6709\u8bbe\u5907\uff09 \u4f8b\u5982:\u6e05\u5c4f\u7b2c\u4e8c\u4e2a\u5c4f\u5e55\uff1aclear(1) ''' matrix.clear() # \u6e05\u5c4f\uff08\u6240\u6709\uff09 ''' 2\u3001 \u8bbe\u7f6e\u50cf\u7d20\u70b9\u65b9\u6cd5 set_pixel(x, y, state=1, device=0) x (int): \u5217\u5750\u6807\uff080~7\uff0c0=\u6700\u5de6\u4fa7\uff09\u3002 y (int): \u884c\u5750\u6807\uff080~7\uff0c0=\u6700\u4e0a\u65b9\uff09\u3002 state (int): \u72b6\u6001\uff081=\u4eae\uff0c0=\u706d\uff09\u3002 device (int): \u76ee\u6807\u8bbe\u5907\u7d22\u5f15\u3002(device\u662f\u5c4f\u6570\u7684\u7d22\u5f15\u503c\uff0c\u4ece0\u5f00\u59cb\u7b97\u7b2c\u4e00\u4e2a) \u793a\u4f8b\uff1a \u70b9\u4eae\u7b2c\u4e00\u4e2a\u5c4f\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c2\u79d2\u540e\u70b9\u4eae\u7b2c\u4e8c\u4e2a\u5c4f\u5e55\u4e0a\u7684\u70b9\uff0c 2\u79d2\u540e\u7184\u706d\u7b2c\u4e00\u4e2a\u70b9\uff0c\u518d2\u79d2\u7184\u706d\u7b2c\u4e8c\u4e2a\u70b9 ''' matrix.set_pixel(3, 2, state=1, device=0) time.sleep(2) matrix.set_pixel(3, 2, state=1, device=1) time.sleep(2) matrix.clear(0) time.sleep(2) matrix.clear(device=1) time.sleep(2) ''' 3\u3001 \u8bbe\u7f6e\u4eae\u5ea6\u65b9\u6cd5 set_brightness(brightness, device=None) brightness (int): \u4eae\u5ea6\u503c\uff080~15\uff0c0=\u6700\u6697\uff0c15=\u6700\u4eae\uff09\u3002 device (int/None): \u6307\u5b9a\u8bbe\u5907\u7d22\u5f15\uff08None=\u6240\u6709\u8bbe\u5907\uff09 \u793a\u4f8b\uff1a\u8ba9\u4e00\u4e2a\u70b9\u6709\u6697\u5230\u4eae ''' matrix.clear() # \u6e05\u5c4f matrix.set_pixel(3, 2, state=1) # \u70b9\u4eae\u4e00\u4e2a\u70b9 for i in range(16): matrix.set_brightness(i) # \u4eae\u5ea6\u9010\u6e10\u589e\u52a0 time.sleep(1) matrix.clear()","title":"\u5b9e\u9a8c\u4e00\uff1a8\u00d78\u70b9\u9635\u5c4f\u7684\u663e\u793a"},{"location":"MicroPython/8%C3%978%E7%82%B9%E9%98%B5%E5%B1%8F/#88_2","text":"\u4f7f\u7528\u5728\u7ebf\u751f\u6210\u5b57\u7b26\u7684\u70b9\u9635\u6570\u636e\uff0c \u70b9\u51fb\u6253\u5f00 \u4f7f\u7528\u65b9\u6cd5 \u4ece\u5de6\u4fa7\u9009\u62e9\u56fe\u5f62\u6837\u5f0f \u590d\u5236\u53f3\u4fa7\u7684\u70b9\u9635\u6570\u636e \u6574\u7406\u6210python\u6587\u4ef6\u7684\u5217\u8868\u683c\u5f0f \u5982\u4e0b\uff1a python CHAR_A = [ 0b00111100, # \u884c0 0b01111110, # \u884c1 0b11100111, # \u884c2 0b11000011, # \u884c3 0b11000011, # \u884c4 0b11000011, # \u884c5 0b11000011, # \u884c6 0b00000000 # \u884c7 ] \u81ea\u5b9a\u4e49\u56fe\u6848\u65b9\u6cd5\uff1a \u6309\u7167\u5982\u4e0a\u65b9\u6cd5\u6574\u7406\u6210\u5217\u8868\u6587\u4ef6 - \u663e\u793a\u56fe\u6848 \u7a0b\u5e8f\u5982\u4e0b ```python from machine import Pin, SPI from libs.MAX7219 import MAX7219 import time from common.font import FONT # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67092\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) ''' 1\u3001 \u663e\u793a\u5b57\u7b26\u65b9\u6cd5 show_char(char_data, device=0) char_data (list/bytes): \u5b57\u7b26\u76848\u5b57\u8282\u6570\u636e\uff08\u6bcf\u5b57\u8282\u5bf9\u5e94\u4e00\u884c\uff0c\u9ad8\u4f4d\u5728\u5de6\uff09\u3002 device (int): \u76ee\u6807\u8bbe\u5907\u7d22\u5f15\u3002 ''' \u5b9a\u4e49\u5b57\u7b26'A'\u7684\u70b9\u9635\u6570\u636e\uff088\u5b57\u8282\uff09 CHAR_A = [ 0b00111100, # \u884c0 0b01111110, # \u884c1 0b11100111, # \u884c2 0b11000011, # \u884c3 0b11000011, # \u884c4 0b11000011, # \u884c5 0b11000011, # \u884c6 0b00000000 # \u884c7 ] matrix.show_char(CHAR_A, device=1) # \u5728\u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793a\u5b57\u7b26'A' time.sleep(2) ``` \u5efa\u7acb\u5b57\u4f53\u5e93\u6587\u4ef6 \u518dcommon\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a font.py \u6587\u4ef6\uff0c\u7528\u6765\u5b58\u653e\u5b57\u4f53\u5e93\u6587\u4ef6\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u81ea\u5df1\u9700\u8981\u7684\u7b26\u53f7\u6216\u8005\u56fe\u5f62\uff0c\u6309\u7167\u524d\u9762\u8bf4\u7684\u53d6\u6a21\u65b9\u5f0f\u83b7\u53d6\u4e8c\u8fdb\u5236\u6570\u7ec4\uff0c\u518d\u628a\u6570\u7ec4\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u3002\uff08\u5c0f\u6280\u5de7\uff1a\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6\u590d\u5236\u5230DeepSeek\u4e2d\uff0c\u8bf7\u6c42\u628a\u4e8c\u8fdb\u5236\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\uff0c\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e86\uff09 \u7ed3\u679c\u5982\u4e0b\uff1a \u628a\u5f97\u5230\u7684\u5341\u516d\u8fdb\u5236\u6587\u4ef6\u6574\u7406\u5230\u4e0b\u9762\u7684\u6587\u4ef6\u4e2d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 python FONT = { \"A\": [0x00, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66], \"B\": [0x00, 0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C], \"C\": [0x00, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C], \"D\": [0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C], \"E\": [0x00, 0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E], \"F\": [0x00, 0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60], \"G\": [0x00, 0x3C, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x3C], \"H\": [0x00, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66], \"I\": [0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C], \"J\": [0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x6C, 0x6C, 0x38], \"K\": [0x00, 0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66], \"L\": [0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E], \"M\": [0x00, 0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63], \"N\": [0x00, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63], \"O\": [0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C], \"P\": [0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60], \"Q\": [0x00, 0x3C, 0x66, 0x66, 0x66, 0x6E, 0x3C, 0x06], \"R\": [0x00, 0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66], \"S\": [0x00, 0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C], \"T\": [0x00, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18], \"U\": [0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E], \"V\": [0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18], \"W\": [0x00, 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63], \"X\": [0x00, 0x63, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x63], \"Y\": [0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18], \"Z\": [0x00, 0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E], \" \": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], \"a\": [0x00, 0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E], \"b\": [0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C], \"c\": [0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C], \"d\": [0x00, 0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3E], \"e\": [0x00, 0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C], \"f\": [0x00, 0x1C, 0x36, 0x30, 0x30, 0x7C, 0x30, 0x30], \"g\": [0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C], \"h\": [0x00, 0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66], \"i\": [0x00, 0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C], \"j\": [0x00, 0x0C, 0x00, 0x0C, 0x0C, 0x6C, 0x6C, 0x38], \"k\": [0x00, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66], \"l\": [0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], \"m\": [0x00, 0x00, 0x00, 0x63, 0x77, 0x7F, 0x6B, 0x6B], \"n\": [0x00, 0x00, 0x00, 0x7C, 0x7E, 0x66, 0x66, 0x66], \"o\": [0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C], \"p\": [0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60], \"q\": [0x00, 0x00, 0x3C, 0x6C, 0x6C, 0x3C, 0x0D, 0x0F], \"r\": [0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x60, 0x60], \"s\": [0x00, 0x00, 0x00, 0x3E, 0x40, 0x3C, 0x02, 0x7C], \"t\": [0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18], \"u\": [0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E], \"v\": [0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3C, 0x18], \"w\": [0x00, 0x00, 0x00, 0x63, 0x6B, 0x6B, 0x6B, 0x3E], \"x\": [0x00, 0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66], \"y\": [0x00, 0x00, 0x00, 0x66, 0x66, 0x3E, 0x06, 0x3C], \"z\": [0x00, 0x00, 0x00, 0x3C, 0x0C, 0x18, 0x30, 0x3C], \"1\": [0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00], \"2\": [0x78, 0xC6, 0x06, 0x1C, 0x30, 0xC6, 0xFC, 0x00], \"3\": [0x78, 0xC6, 0x06, 0x1C, 0x06, 0xC6, 0x78, 0x00], \"4\": [0x0E, 0x1E, 0x36, 0x66, 0xFE, 0x06, 0x1E, 0x00], \"5\": [0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xC6, 0x78, 0x00], \"6\": [0x1C, 0x30, 0x60, 0xF8, 0xC6, 0xC6, 0x78, 0x00], \"7\": [0xFC, 0xC6, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x00], \"8\": [0x78, 0xC6, 0xC6, 0x78, 0xC6, 0xC6, 0x78, 0x00], \"9\": [0x78, 0xC6, 0xC6, 0x7C, 0x06, 0x0C, 0x70, 0x00], \"0\": [0x7E, 0xC3, 0xC7, 0xCF, 0xF9, 0xF3, 0x7E, 0x00], \"+\": [0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00], \"-\": [0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00], \"*\": [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00], \"/\": [0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00], \"%\": [0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00], \"=\": [0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00], \"~\": [0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], \"^\": [0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00], \"<\": [0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00], \">\": [0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00], \"(\": [0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00], \")\": [0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00], \"[\": [0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00], \"]\": [0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00], \"{\": [0x0E, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x0E, 0x00], \"}\": [0xE0, 0x30, 0x30, 0x0E, 0x30, 0x30, 0xE0, 0x00], \"\u3002\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00], \":\": [0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00], \";\": [0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60], \",\": [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60], \"!\": [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00], \"?\": [0x78, 0xCC, 0x18, 0x30, 0x60, 0x00, 0x60, 0x00], \"@\": [0x7E, 0xC3, 0xCF, 0xCF, 0xCF, 0xC0, 0x78, 0x00], \"&\": [0x1C, 0x36, 0x1C, 0x3E, 0x6C, 0x66, 0x3E, 0x00], \"$\": [0x30, 0x7E, 0xC0, 0x78, 0x0C, 0x7E, 0x30, 0x00], \"#\": [0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00], \"\\\\\": [0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00], \"\u2018\": [0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00], \"\u2019\": [0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00] }","title":"\u5b9e\u9a8c\u4e8c\uff1a8\u00d78\u70b9\u9635\u5c4f\u7684\u663e\u793a\u5355\u4e2a\u5b57\u7b26"},{"location":"MicroPython/8%C3%978%E7%82%B9%E9%98%B5%E5%B1%8F/#_2","text":"\u793a\u4f8b\uff1a ```python from machine import Pin, SPI from libs.MAX7219 import MAX7219 import time # \u5bfc\u5165\u521a\u624d\u5efa\u7acb\u7684\u5b57\u4f53\u5e93 from common.font import FONT # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67093\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) ''' 1\u3001 \u7ea7\u8054\u663e\u793a\u591a\u4e2a\u5b57\u7b26 \u7b2c\u4e00\u4e2a\u5c4f\u663e\u793a\u201cA\u201d \u7b2c\u4e8c\u4e2a\u5c4f\u663e\u793a\u2018B\u2019 ''' matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=3) matrix.show_char(FONT['A'], device=0) # \u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793aA matrix.show_char(FONT['B'], device=1) # \u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793aB matrix.show_char(FONT['C'], device=2) # \u7b2c\u4e00\u4e2a\u6a21\u5757\u663e\u793aC time.sleep(2) matrix.clear() ``` ''' 2\u3001 show_str(text) text\u4f20\u5165\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u5f97\u8d85\u8fc7\u70b9\u9635\u5c4f\u6570\uff0c\u8d85\u51fa\u90e8\u5206\u4e0d\u663e\u793a \u7ea7\u8054\u663e\u793a\u5b57\u7b26\u4e32 \u7b2c\u4e00\u4e2a\u5c4f\u663e\u793a\u201cA\u201d \u7b2c\u4e8c\u4e2a\u5c4f\u663e\u793a\u2018C\u2019 \u7b2c\u4e8c\u4e2a\u5c4f\u663e\u793a\u2018d\u2019 ''' matrix.show_str('ACd') time.sleep(2) matrix.clear() ```","title":"\u5b9e\u9a8c\u4e09\uff1a\u70b9\u9635\u5c4f\u663e\u793a\u591a\u4e2a\u5b57\u7b26"},{"location":"MicroPython/ADC%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E5%99%A8/","text":"ADC\u6570\u6a21\u8f6c\u6362\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 1 4 \u65cb\u94ae\u7535\u4f4d\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u65cb\u94ae\u7535\u4f4d\u5668 32 ADC\u6570\u7801\u8f6c\u6362\u5668\u4ecb\u7ecd \u6a21\u62df\u4fe1\u53f7\uff08Analog Signal\uff09\uff1a\u6a21\u62df\u4fe1\u53f7\u662f\u8fde\u7eed\u53d8\u5316\u7684\u91cf\u6216\u8005\u4fe1\u53f7\uff0c\u751f\u6d3b\u4e2d\u63a5\u89e6\u5230\u7684\u4fe1\u53f7\u57fa\u672c\u90fd\u662f\u6a21\u62df\u4fe1\u53f7\uff0c\u6e29\u5ea6\u53d8\u5316\uff0c\u5929\u4f53\u8fd0\u52a8\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u8fde\u7eed\u7684\u4fe1\u606f\uff0c\u90fd\u662f\u6a21\u62df\u4fe1\u53f7\u3002\u6a21\u62df\u4fe1\u53f7\uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u7528\u7535\u4fe1\u53f7\u6a21\u62df\u51fa\u5176\u4ed6\u7684\u4fe1\u53f7\uff0c\u6bd4\u5982\u7528\u7535\u4fe1\u53f7\u6a21\u62df\u51fa\u56fe\u50cf\uff0c\u6a21\u62df\u51fa\u58f0\u97f3\u7684\u58f0\u6ce2\u3002 \u6570\u5b57\u4fe1\u53f7\uff08Digital Signal\uff09\uff1a\u6570\u5b57\u4fe1\u53f7\u662f\u65f6\u95f4\u79bb\u6563\u3001\u6570\u503c\u79bb\u6563\u7684\u4fe1\u53f7\uff0c\u6570\u5b57\u4fe1\u53f7\u5b58\u5728\u91c7\u6837\uff0c\u8fd8\u5b58\u5728\u91cf\u5316\uff0c\u53ea\u80fd\u53d6\u5230\u4e00\u4e9b\u4e0d\u8fde\u7eed\u7684\u56fa\u5b9a\u503c\uff0c\u8fd9\u4e5f\u662f\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u76f8\u4e92\u8f6c\u6362\u7684\u539f\u56e0\u3002 \u6240\u4ee5\uff0c\u603b\u7ed3\u5c31\u662f\u6a21\u62df\u4fe1\u53f7\u65f6\u95f4\u8fde\u7eed\uff0c\u5e45\u503c\u8fde\u7eed\uff0c\u6570\u5b57\u4fe1\u53f7\u65f6\u95f4\u79bb\u6563\uff0c\u5e45\u503c\u79bb\u6563\u3002\u6a21\u62df\u7535\u8def\u5c31\u662f\u4f7f\u7528\u3001\u5904\u7406\u6a21\u62df\u4fe1\u53f7\u7684\u7535\u8def\uff1b\u6570\u5b57\u7535\u8def\u5c31\u662f\u4f7f\u7528\u3001\u5904\u7406\u6570\u5b57\u4fe1\u53f7\u7684\u7535\u8def\u3002 ADC\uff08Analog to Digital Converter\uff09\u5373\u6a21\u6570\u8f6c\u6362\u5668\uff0c\u5b83\u53ef\u4ee5\u5c06\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\u3002\u7531\u4e8e\u5355\u7247\u673a\u53ea\u80fd\u8bc6\u522b\u4e8c\u8fdb\u5236\u6570\u5b57\uff0c\u6240\u4ee5\u5916\u754c\u6a21\u62df\u4fe1\u53f7\u5e38\u5e38\u4f1a\u901a\u8fc7 ADC \u8f6c\u6362\u6210\u5176\u53ef\u4ee5\u8bc6\u522b\u7684\u6570\u5b57\u4fe1\u53f7\u3002\u5e38\u89c1\u7684\u5e94\u7528\u5c31\u662f\u5c06\u53d8\u5316\u7684\u7535\u538b\u8f6c\u6210\u6570\u5b57\u4fe1\u53f7\u3002 ADC\u7684\u7c7b\u548c\u51fd\u6570 \u6784\u9020\u65b9\u6cd5 machine.ADC(pin, atten) \u53c2\u6570 pin \uff1aPin \u5bf9\u8c61\uff0c \u53c2\u6570 atten \uff1a\u914d\u7f6e\u8870\u51cf\u5668\u589e\u52a0\u7535\u538b\u6d4b\u91cf\u8303\u56f4\u3002 \u8bbe\u7f6e\u8870\u51cf\uff08 atten(atten) \uff09 ADC\u9ed8\u8ba4\u53ea\u80fd\u8f93\u51650~1v\u7684\u7535\u538b\uff0c\u8981\u6d4b\u91cf\u5176\u4ed6\u8303\u56f4\u7684\u7535\u538b\u53ef\u4ee5\u5bf9\u8f93\u5165\u7535\u538b\u8fdb\u884c\u8870\u51cf\uff0c \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e atten \u503c\u8fdb\u884c\u8870\u51cf\uff0c atten \u7684\u8870\u51cf\u503c\u6709; ATTN_0DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a 0-1.0V\uff08\u9ed8\u8ba4\u503c\uff09 ATTN_2_5DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a 0-1.34V` ATTN_6DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a0-2.0V` ATTN_11DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a0-3.3V \u8fd9\u662f\u6700\u5e38\u7528\u7684\u503c \u8bbe\u7f6e\u5206\u8fa8\u7387\uff08 width(bit) \uff09 ADC \u5206\u8fa8\u7387\u8d8a\u9ad8\uff0c\u53cd\u5e94\u7684\u6a21\u62df\u7535\u538b\u503c\u5c31\u8d8a\u7cbe\u786e\u3002 bit \u7684\u7cbe\u5ea6\u503c\u6709\uff1a ADC.WIDTH_9BIT - ADC\u503c\u8303\u56f40~511 ADC.WIDTH_10BIT - ADC\u503c\u8303\u56f40~1023 `ADC.WIDTH_11BIT`` - ADC\u503c\u8303\u56f40~2047 `ADC.WIDTH_12BIT`` - ADC\u503c\u8303\u56f40~4095\uff08\u9ed8\u8ba4\u4e3a12BIT\uff09 \u8bfb\u53d6ADC\u503c\uff08 read() \uff09 \u8fd4\u56de\u6307\u5b9a\u5206\u8fa8\u7387\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b\u8f6c\u6362\u6210\u7684ADC\u503c\uff0c\u9ed8\u8ba4\u5206\u8fa8\u7387\u4e3a12BIT\uff0c\u662f\u7684\u8303\u56f4\u5c31\u662f0~4095\u3002 read_uv() \u8fd4\u56de\u6beb\u4f0f\u5355\u4f4d\uff0c\u8303\u56f40~4095000\u6beb\u4f0f\u7684\u503c read_u16() \u8fd4\u56de0~65535\u7684\u503c \u5b9e\u9a8c\u4e00\uff1a \u8bfb\u53d6\u65cb\u94ae\u7f16\u7801\u5668\u7684\u503c \u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin, ADC # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(f'adc\u7684\u503c:{adc.read()}') time.sleep(1) # \u8f93\u51fa\u7ed3\u679c\uff1a\u8303\u56f4\uff080~4095\uff09 ''' adc\u7684\u503c:0 adc\u7684\u503c:526 adc\u7684\u503c:1543 adc\u7684\u503c:2479 adc\u7684\u503c:3684 adc\u7684\u503c:4095 '''#### \u5b9e\u9a8c\u4e00\uff1aLCD\u6db2\u6676\u5c4f\u7684\u663e\u793a \u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u65cb\u94ae\u7f16\u7801\u5668\u63a7\u5236LED\u706f\u7684\u4eae\u5ea6 \u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin, ADC,PWM # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) while True: ''' ADC\u7684\u8bfb\u53d6\u503c\u8303\u56f4\u662f0~4096\uff1b PWM\u7684\u5360\u7a7a\u6bd4duty\u5360\u7a7a\u6bd4\u8303\u56f4\u662f0~1023; PWM\u7684\u5360\u7a7a\u6bd4duty_u16\u5360\u7a7a\u6bd4\u8303\u56f4\u662f0~4096,\u6240\u4ee5u16\u7684\u5360\u7a7a\u6bd4\u989dADC\u7684\u503c\u5b8c\u7f8e\u6620\u5c04 ''' led.duty_u16(adc.read_u16()) time.sleep(0.1) \u5b9e\u9a8c\u4e09\uff1a\u4f7f\u7528\u65cb\u94ae\u7f16\u7801\u5668\u63a7\u5236LED\u706f\u7684\u4eae\u5ea6\uff08\u81ea\u5b9a\u4e49\u6620\u5c04\u7684\u65b9\u5f0f\uff09 \u5bf9\u5e94\u8fd9\u4e2a\u6848\u4f8b\u4e2dADC\u7684\u503c\u8303\u56f4\u548cPWM\u7684U16\u5360\u7a7a\u6bd4\u8303\u56f4\u521a\u597d\u90fd\u662f0~4096\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6bd4\u7387\u6620\u5c04\uff0c\u5982\u679c\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u8303\u56f4\u5462\u6bd4\u5982\u4f7f\u7528PWM\u7684duty\uff08\uff09\u4ed6\u7684\u8303\u56f4\u662f0~1023\uff0c\u90a3\u8be5\u5982\u4f55\u505a\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u8bbe\u8ba1\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u4e86\u3002 \u7a0b\u5e8f\u5982\u4e0b import time from machine import Pin, ADC,PWM # \u5b9a\u4e49ADC\u5bf9\u8c61\u548cPWM\u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) # \u81ea\u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" if in_min == in_max: return (out_min + out_max) / 2 # \u8fd4\u56de\u4e2d\u95f4\u503c(\u9632\u6b62\u5206\u6bcd\u51fa\u73b00\u7684\u9664\u96f6bug) else: mapped = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min return max(out_min, min(mapped, out_max)) # \u7ea6\u675f\u5728\u8f93\u51fa\u8303\u56f4\u5185 while True: value = adc.read() duty = int(math_map(value,0,4095,0,1023)) led.duty(duty) time.sleep(0.1) ```python ``` \u5b9e\u9a8c\u56db\uff1a\u4f7f\u7528\u65cb\u94ae\u7f16\u7801\u5668\u63a7\u5236LED\u706f\u7684\u4eae\u5ea6\uff08\u8c03\u7528\u81ea\u5efa\u51fd\u6570\uff09 \u6211\u4eec\u53ef\u4ee5\u628a\u524d\u9762\u6848\u4f8b\u4e2d\u7684\u6620\u5c04\u51fd\u6570\u4fdd\u5b58\u5230common\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u6587\u4ef6\u540d\u5c31\u662f math_map \uff0c\u4ee5\u540e\u7528\u5230\u7684\u65f6\u5019\u76f4\u63a5\u8c03\u7528\u3002 import time from machine import Pin, ADC,PWM from common.math_map import math_map # \u5bfc\u5165\u521a\u81ea\u5efa\u7684\u51fd\u6570 # \u5b9a\u4e49ADC\u5bf9\u8c61\u548cPWM\u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) while True: value = adc.read() duty = int(math_map(value,0,4095,0,1023)) led.duty(duty) time.sleep(0.1)","title":"19.ADC\u6570\u6a21\u8f6c\u6362\u5668"},{"location":"MicroPython/ADC%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E5%99%A8/#adc","text":"","title":"ADC\u6570\u6a21\u8f6c\u6362\u5668"},{"location":"MicroPython/ADC%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E5%99%A8/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 1 4 \u65cb\u94ae\u7535\u4f4d\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u65cb\u94ae\u7535\u4f4d\u5668 32 ADC\u6570\u7801\u8f6c\u6362\u5668\u4ecb\u7ecd \u6a21\u62df\u4fe1\u53f7\uff08Analog Signal\uff09\uff1a\u6a21\u62df\u4fe1\u53f7\u662f\u8fde\u7eed\u53d8\u5316\u7684\u91cf\u6216\u8005\u4fe1\u53f7\uff0c\u751f\u6d3b\u4e2d\u63a5\u89e6\u5230\u7684\u4fe1\u53f7\u57fa\u672c\u90fd\u662f\u6a21\u62df\u4fe1\u53f7\uff0c\u6e29\u5ea6\u53d8\u5316\uff0c\u5929\u4f53\u8fd0\u52a8\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u8fde\u7eed\u7684\u4fe1\u606f\uff0c\u90fd\u662f\u6a21\u62df\u4fe1\u53f7\u3002\u6a21\u62df\u4fe1\u53f7\uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u7528\u7535\u4fe1\u53f7\u6a21\u62df\u51fa\u5176\u4ed6\u7684\u4fe1\u53f7\uff0c\u6bd4\u5982\u7528\u7535\u4fe1\u53f7\u6a21\u62df\u51fa\u56fe\u50cf\uff0c\u6a21\u62df\u51fa\u58f0\u97f3\u7684\u58f0\u6ce2\u3002 \u6570\u5b57\u4fe1\u53f7\uff08Digital Signal\uff09\uff1a\u6570\u5b57\u4fe1\u53f7\u662f\u65f6\u95f4\u79bb\u6563\u3001\u6570\u503c\u79bb\u6563\u7684\u4fe1\u53f7\uff0c\u6570\u5b57\u4fe1\u53f7\u5b58\u5728\u91c7\u6837\uff0c\u8fd8\u5b58\u5728\u91cf\u5316\uff0c\u53ea\u80fd\u53d6\u5230\u4e00\u4e9b\u4e0d\u8fde\u7eed\u7684\u56fa\u5b9a\u503c\uff0c\u8fd9\u4e5f\u662f\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u76f8\u4e92\u8f6c\u6362\u7684\u539f\u56e0\u3002 \u6240\u4ee5\uff0c\u603b\u7ed3\u5c31\u662f\u6a21\u62df\u4fe1\u53f7\u65f6\u95f4\u8fde\u7eed\uff0c\u5e45\u503c\u8fde\u7eed\uff0c\u6570\u5b57\u4fe1\u53f7\u65f6\u95f4\u79bb\u6563\uff0c\u5e45\u503c\u79bb\u6563\u3002\u6a21\u62df\u7535\u8def\u5c31\u662f\u4f7f\u7528\u3001\u5904\u7406\u6a21\u62df\u4fe1\u53f7\u7684\u7535\u8def\uff1b\u6570\u5b57\u7535\u8def\u5c31\u662f\u4f7f\u7528\u3001\u5904\u7406\u6570\u5b57\u4fe1\u53f7\u7684\u7535\u8def\u3002 ADC\uff08Analog to Digital Converter\uff09\u5373\u6a21\u6570\u8f6c\u6362\u5668\uff0c\u5b83\u53ef\u4ee5\u5c06\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\u3002\u7531\u4e8e\u5355\u7247\u673a\u53ea\u80fd\u8bc6\u522b\u4e8c\u8fdb\u5236\u6570\u5b57\uff0c\u6240\u4ee5\u5916\u754c\u6a21\u62df\u4fe1\u53f7\u5e38\u5e38\u4f1a\u901a\u8fc7 ADC \u8f6c\u6362\u6210\u5176\u53ef\u4ee5\u8bc6\u522b\u7684\u6570\u5b57\u4fe1\u53f7\u3002\u5e38\u89c1\u7684\u5e94\u7528\u5c31\u662f\u5c06\u53d8\u5316\u7684\u7535\u538b\u8f6c\u6210\u6570\u5b57\u4fe1\u53f7\u3002 ADC\u7684\u7c7b\u548c\u51fd\u6570 \u6784\u9020\u65b9\u6cd5 machine.ADC(pin, atten) \u53c2\u6570 pin \uff1aPin \u5bf9\u8c61\uff0c \u53c2\u6570 atten \uff1a\u914d\u7f6e\u8870\u51cf\u5668\u589e\u52a0\u7535\u538b\u6d4b\u91cf\u8303\u56f4\u3002 \u8bbe\u7f6e\u8870\u51cf\uff08 atten(atten) \uff09 ADC\u9ed8\u8ba4\u53ea\u80fd\u8f93\u51650~1v\u7684\u7535\u538b\uff0c\u8981\u6d4b\u91cf\u5176\u4ed6\u8303\u56f4\u7684\u7535\u538b\u53ef\u4ee5\u5bf9\u8f93\u5165\u7535\u538b\u8fdb\u884c\u8870\u51cf\uff0c \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e atten \u503c\u8fdb\u884c\u8870\u51cf\uff0c atten \u7684\u8870\u51cf\u503c\u6709; ATTN_0DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a 0-1.0V\uff08\u9ed8\u8ba4\u503c\uff09 ATTN_2_5DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a 0-1.34V` ATTN_6DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a0-2.0V` ATTN_11DB \uff1a\u6d4b\u91cf\u7535\u538b\u8303\u56f4\uff1a0-3.3V \u8fd9\u662f\u6700\u5e38\u7528\u7684\u503c \u8bbe\u7f6e\u5206\u8fa8\u7387\uff08 width(bit) \uff09 ADC \u5206\u8fa8\u7387\u8d8a\u9ad8\uff0c\u53cd\u5e94\u7684\u6a21\u62df\u7535\u538b\u503c\u5c31\u8d8a\u7cbe\u786e\u3002 bit \u7684\u7cbe\u5ea6\u503c\u6709\uff1a ADC.WIDTH_9BIT - ADC\u503c\u8303\u56f40~511 ADC.WIDTH_10BIT - ADC\u503c\u8303\u56f40~1023 `ADC.WIDTH_11BIT`` - ADC\u503c\u8303\u56f40~2047 `ADC.WIDTH_12BIT`` - ADC\u503c\u8303\u56f40~4095\uff08\u9ed8\u8ba4\u4e3a12BIT\uff09 \u8bfb\u53d6ADC\u503c\uff08 read() \uff09 \u8fd4\u56de\u6307\u5b9a\u5206\u8fa8\u7387\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b\u8f6c\u6362\u6210\u7684ADC\u503c\uff0c\u9ed8\u8ba4\u5206\u8fa8\u7387\u4e3a12BIT\uff0c\u662f\u7684\u8303\u56f4\u5c31\u662f0~4095\u3002 read_uv() \u8fd4\u56de\u6beb\u4f0f\u5355\u4f4d\uff0c\u8303\u56f40~4095000\u6beb\u4f0f\u7684\u503c read_u16() \u8fd4\u56de0~65535\u7684\u503c","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/ADC%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E5%99%A8/#_2","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin, ADC # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(f'adc\u7684\u503c:{adc.read()}') time.sleep(1) # \u8f93\u51fa\u7ed3\u679c\uff1a\u8303\u56f4\uff080~4095\uff09 ''' adc\u7684\u503c:0 adc\u7684\u503c:526 adc\u7684\u503c:1543 adc\u7684\u503c:2479 adc\u7684\u503c:3684 adc\u7684\u503c:4095 '''#### \u5b9e\u9a8c\u4e00\uff1aLCD\u6db2\u6676\u5c4f\u7684\u663e\u793a","title":"\u5b9e\u9a8c\u4e00\uff1a \u8bfb\u53d6\u65cb\u94ae\u7f16\u7801\u5668\u7684\u503c"},{"location":"MicroPython/ADC%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E5%99%A8/#led","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin, ADC,PWM # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) while True: ''' ADC\u7684\u8bfb\u53d6\u503c\u8303\u56f4\u662f0~4096\uff1b PWM\u7684\u5360\u7a7a\u6bd4duty\u5360\u7a7a\u6bd4\u8303\u56f4\u662f0~1023; PWM\u7684\u5360\u7a7a\u6bd4duty_u16\u5360\u7a7a\u6bd4\u8303\u56f4\u662f0~4096,\u6240\u4ee5u16\u7684\u5360\u7a7a\u6bd4\u989dADC\u7684\u503c\u5b8c\u7f8e\u6620\u5c04 ''' led.duty_u16(adc.read_u16()) time.sleep(0.1)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u65cb\u94ae\u7f16\u7801\u5668\u63a7\u5236LED\u706f\u7684\u4eae\u5ea6"},{"location":"MicroPython/ADC%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E5%99%A8/#led_1","text":"\u5bf9\u5e94\u8fd9\u4e2a\u6848\u4f8b\u4e2dADC\u7684\u503c\u8303\u56f4\u548cPWM\u7684U16\u5360\u7a7a\u6bd4\u8303\u56f4\u521a\u597d\u90fd\u662f0~4096\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6bd4\u7387\u6620\u5c04\uff0c\u5982\u679c\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u8303\u56f4\u5462\u6bd4\u5982\u4f7f\u7528PWM\u7684duty\uff08\uff09\u4ed6\u7684\u8303\u56f4\u662f0~1023\uff0c\u90a3\u8be5\u5982\u4f55\u505a\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u8bbe\u8ba1\u4e00\u4e2a\u6620\u5c04\u51fd\u6570\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u4e86\u3002 \u7a0b\u5e8f\u5982\u4e0b import time from machine import Pin, ADC,PWM # \u5b9a\u4e49ADC\u5bf9\u8c61\u548cPWM\u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) # \u81ea\u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" if in_min == in_max: return (out_min + out_max) / 2 # \u8fd4\u56de\u4e2d\u95f4\u503c(\u9632\u6b62\u5206\u6bcd\u51fa\u73b00\u7684\u9664\u96f6bug) else: mapped = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min return max(out_min, min(mapped, out_max)) # \u7ea6\u675f\u5728\u8f93\u51fa\u8303\u56f4\u5185 while True: value = adc.read() duty = int(math_map(value,0,4095,0,1023)) led.duty(duty) time.sleep(0.1) ```python ```","title":"\u5b9e\u9a8c\u4e09\uff1a\u4f7f\u7528\u65cb\u94ae\u7f16\u7801\u5668\u63a7\u5236LED\u706f\u7684\u4eae\u5ea6\uff08\u81ea\u5b9a\u4e49\u6620\u5c04\u7684\u65b9\u5f0f\uff09"},{"location":"MicroPython/ADC%E6%95%B0%E6%A8%A1%E8%BD%AC%E6%8D%A2%E5%99%A8/#led_2","text":"\u6211\u4eec\u53ef\u4ee5\u628a\u524d\u9762\u6848\u4f8b\u4e2d\u7684\u6620\u5c04\u51fd\u6570\u4fdd\u5b58\u5230common\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u6587\u4ef6\u540d\u5c31\u662f math_map \uff0c\u4ee5\u540e\u7528\u5230\u7684\u65f6\u5019\u76f4\u63a5\u8c03\u7528\u3002 import time from machine import Pin, ADC,PWM from common.math_map import math_map # \u5bfc\u5165\u521a\u81ea\u5efa\u7684\u51fd\u6570 # \u5b9a\u4e49ADC\u5bf9\u8c61\u548cPWM\u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) while True: value = adc.read() duty = int(math_map(value,0,4095,0,1023)) led.duty(duty) time.sleep(0.1)","title":"\u5b9e\u9a8c\u56db\uff1a\u4f7f\u7528\u65cb\u94ae\u7f16\u7801\u5668\u63a7\u5236LED\u706f\u7684\u4eae\u5ea6\uff08\u8c03\u7528\u81ea\u5efa\u51fd\u6570\uff09"},{"location":"MicroPython/LCD%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/","text":"LCD\u6db2\u6676\u663e\u793a\u5c4f \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LCD\u6db2\u6676\u663e\u793a\u5c4f 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-SCL 22 2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-SDA 21 3 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-VCC P2 4 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-GND P2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u4ecb\u7ecd LCD1602\u662f\u4e00\u79cd\u5e7f\u6cdb\u5e94\u7528\u7684\u5b57\u7b26\u578b\u6db2\u6676\u663e\u793a\u6a21\u5757\uff0c\u4e3b\u8981\u7528\u4e8e\u663e\u793a\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u7b26\u53f7\u7b49ASCII\u5b57\u7b26\u3002 \u8ba4\u8bc6 IIC\uff08I2C\uff09\u63a5\u53e3 \u7531\u4e8e 1602 \u7684\u7ba1\u811a\u6570\u8fc7\u591a\uff0c\u5982\u679c\u76f4\u63a5\u4e0e ESP32 \u5f00\u53d1\u677f\u8fde\u63a5\u9700\u8981\u5360\u7528\u5927\u91cf\u7684 GPIO \u7ba1\u811a\uff0c\u4e0d\u4f46\u5bb9\u6613\u9020\u6210\u8d44\u6e90\u6d6a\u8d39\uff0c\u8fde\u63a5\u4e5f\u975e\u5e38\u4e0d\u65b9\u4fbf\uff0c\u7f16\u7a0b\u7684\u96be\u5ea6\u4e5f\u4f1a\u6bd4\u8f83\u5927\u3002 \u56e0\u6b64\u5b9e\u9645\u4f7f\u7528\u65f6\u5f80\u5f80\u4f1a\u7ed9 1602 \u5c4f\u589e\u52a0\u4e00\u5757 IIC \u9a71\u52a8\u7248\uff0c\u5c06 1602 \u7684 16 \u4e2a\u7ba1\u811a\u8fde\u63a5\u5230\u7531 PCF8574T \u4f5c\u4e3a\u4e3b\u8981\u82af\u7247\u7684\u9a71\u52a8\u7248\u4e0a\uff0c\u5c06\u63a5\u53e3\u8f6c\u6362\u4e3a IIC \u518d\u8fde\u63a5\u5f00\u53d1\u677f\u3002 IIC \u662f\u4e00\u79cd\u786c\u4ef6\u8bbe\u5907\u95f4\u5e38\u7528\u7684\u63a5\u53e3\u901a\u8baf\u534f\u8bae\uff0c\u5168\u79f0\u662f Inter-Integrated Circuit\uff0c\u4e5f\u53ef\u4ee5\u5199\u4e3a I2C\u3002\u4ed6\u7684\u8bbe\u8ba1\u65f6\u7684\u7406\u5ff5\u662f\uff1a\u4fe1\u53f7\u7ebf\u5c3d\u91cf\u5c11\u5e76\u4e14\u901f\u7387\u8981\u5c3d\u91cf\u9ad8\u3002 IIC\u7684\u7c7b\u548c\u51fd\u6570 \u6211\u4eec\u5e38\u7528\u7684\u662f\u8f6f\u4ef6IIC\u603b\u7ebf\u65b9\u5f0f\u901a\u8baf\uff08\u901a\u8fc7\u7a0b\u5e8f\u6765\u6a21\u62dfIIC\u901a\u8baf\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u968f\u610f\u7684\u4f7f\u7528GPIO\u5f15\u811a\uff0c\u4f46\u662f\u6548\u7387\u6709\u6240\u4e0b\u964d\uff0c\u5728\u8fdb\u884cIIC\u7f16\u7a0b\u65f6\uff0c\u81ea\u5df1\u7f16\u5199\u7a0b\u5e8f\uff0c\u96be\u5ea6\u6bd4\u8f83\u5927\uff0c\u8fd8\u597d\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aTM1637.py\u6587\u4ef6\u7528\u6765\u63a7\u5236\u8f6f\u4ef6IIC\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2alcd_api.py\u6587\u4ef6\uff0c\u8fd9\u662f\u7528\u6765\u63a7\u5236\u786c\u4ef6IIC\uff0c\u56e0\u4e3a\u8f6f\u4ef6IIC\u662f\u5bf9\u786c\u4ef6IIC\u7684\u7ee7\u627f\uff0c\u6240\u4ee5\u4e24\u4e2a\u6587\u4ef6\u90fd\u8981\u4fdd\u5b58\u5728libs\u6587\u4ef6\u5939\u4e2d\u3002 ''' \u8f6f\u4ef6IIC\u5e93\uff08\u5bf9\u786c\u4ef6IIC\u7684\u7ee7\u627f\uff09 ''' import utime from libs.lcd_api import LcdApi from machine import I2C # PCF8574 pin definitions MASK_RS = 0x01 # P0 MASK_RW = 0x02 # P1 MASK_E = 0x04 # P2 SHIFT_BACKLIGHT = 3 # P3 SHIFT_DATA = 4 # P4-P7 class I2cLcd(LcdApi): # Implements a HD44780 character LCD connected via PCF8574 on I2C def __init__(self, i2c, i2c_addr, num_lines, num_columns): self.i2c = i2c self.i2c_addr = i2c_addr self.i2c.writeto(self.i2c_addr, bytes([0])) utime.sleep_ms(20) # Allow LCD time to powerup # Send reset 3 times self.hal_write_init_nibble(self.LCD_FUNCTION_RESET) utime.sleep_ms(5) # Need to delay at least 4.1 msec self.hal_write_init_nibble(self.LCD_FUNCTION_RESET) utime.sleep_ms(1) self.hal_write_init_nibble(self.LCD_FUNCTION_RESET) utime.sleep_ms(1) # Put LCD into 4-bit mode self.hal_write_init_nibble(self.LCD_FUNCTION) utime.sleep_ms(1) LcdApi.__init__(self, num_lines, num_columns) cmd = self.LCD_FUNCTION if num_lines > 1: cmd |= self.LCD_FUNCTION_2LINES self.hal_write_command(cmd) def hal_write_init_nibble(self, nibble): # Writes an initialization nibble to the LCD. # This particular function is only used during initialization. byte = ((nibble >> 4) & 0x0f) << SHIFT_DATA self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) def hal_backlight_on(self): # Allows the hal layer to turn the backlight on self.i2c.writeto(self.i2c_addr, bytes([1 << SHIFT_BACKLIGHT])) def hal_backlight_off(self): # Allows the hal layer to turn the backlight off self.i2c.writeto(self.i2c_addr, bytes([0])) def hal_write_command(self, cmd): # Write a command to the LCD. Data is latched on the falling edge of E. byte = ((self.backlight << SHIFT_BACKLIGHT) | (((cmd >> 4) & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) byte = ((self.backlight << SHIFT_BACKLIGHT) | ((cmd & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) if cmd <= 3: # The home and clear commands require a worst case delay of 4.1 msec utime.sleep_ms(5) def hal_write_data(self, data): # Write data to the LCD. Data is latched on the falling edge of E. byte = (MASK_RS | (self.backlight << SHIFT_BACKLIGHT) | (((data >> 4) & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) byte = (MASK_RS | (self.backlight << SHIFT_BACKLIGHT) | ((data & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) ''' \u786c\u4ef6IIC\u5e93 libs/lcd_api.py ''' import time class LcdApi: # Implements the API for talking with HD44780 compatible character LCDs. # This class only knows what commands to send to the LCD, and not how to get # them to the LCD. # # It is expected that a derived class will implement the hal_xxx functions. # # The following constant names were lifted from the avrlib lcd.h header file, # with bit numbers changed to bit masks. # HD44780 LCD controller command set LCD_CLR = 0x01 # DB0: clear display LCD_HOME = 0x02 # DB1: return to home position LCD_ENTRY_MODE = 0x04 # DB2: set entry mode LCD_ENTRY_INC = 0x02 # DB1: increment LCD_ENTRY_SHIFT = 0x01 # DB0: shift LCD_ON_CTRL = 0x08 # DB3: turn lcd/cursor on LCD_ON_DISPLAY = 0x04 # DB2: turn display on LCD_ON_CURSOR = 0x02 # DB1: turn cursor on LCD_ON_BLINK = 0x01 # DB0: blinking cursor LCD_MOVE = 0x10 # DB4: move cursor/display LCD_MOVE_DISP = 0x08 # DB3: move display (0-> move cursor) LCD_MOVE_RIGHT = 0x04 # DB2: move right (0-> left) LCD_FUNCTION = 0x20 # DB5: function set LCD_FUNCTION_8BIT = 0x10 # DB4: set 8BIT mode (0->4BIT mode) LCD_FUNCTION_2LINES = 0x08 # DB3: two lines (0->one line) LCD_FUNCTION_10DOTS = 0x04 # DB2: 5x10 font (0->5x7 font) LCD_FUNCTION_RESET = 0x30 # See \"Initializing by Instruction\" section LCD_CGRAM = 0x40 # DB6: set CG RAM address LCD_DDRAM = 0x80 # DB7: set DD RAM address LCD_RS_CMD = 0 LCD_RS_DATA = 1 LCD_RW_WRITE = 0 LCD_RW_READ = 1 def __init__(self, num_lines, num_columns): self.num_lines = num_lines if self.num_lines > 4: self.num_lines = 4 self.num_columns = num_columns if self.num_columns > 40: self.num_columns = 40 self.cursor_x = 0 self.cursor_y = 0 self.implied_newline = False self.backlight = True self.display_off() self.backlight_on() self.clear() self.hal_write_command(self.LCD_ENTRY_MODE | self.LCD_ENTRY_INC) self.hide_cursor() self.display_on() def clear(self): # Clears the LCD display and moves the cursor to the top left corner self.hal_write_command(self.LCD_CLR) self.hal_write_command(self.LCD_HOME) self.cursor_x = 0 self.cursor_y = 0 def show_cursor(self): # Causes the cursor to be made visible self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY | self.LCD_ON_CURSOR) def hide_cursor(self): # Causes the cursor to be hidden self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY) def blink_cursor_on(self): # Turns on the cursor, and makes it blink self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY | self.LCD_ON_CURSOR | self.LCD_ON_BLINK) def blink_cursor_off(self): # Turns on the cursor, and makes it no blink (i.e. be solid) self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY | self.LCD_ON_CURSOR) def display_on(self): # Turns on (i.e. unblanks) the LCD self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY) def display_off(self): # Turns off (i.e. blanks) the LCD self.hal_write_command(self.LCD_ON_CTRL) def backlight_on(self): # Turns the backlight on. # This isn't really an LCD command, but some modules have backlight # controls, so this allows the hal to pass through the command. self.backlight = True self.hal_backlight_on() def backlight_off(self): # Turns the backlight off. # This isn't really an LCD command, but some modules have backlight # controls, so this allows the hal to pass through the command. self.backlight = False self.hal_backlight_off() def move_to(self, cursor_x, cursor_y): # Moves the cursor position to the indicated position. The cursor # position is zero based (i.e. cursor_x == 0 indicates first column). self.cursor_x = cursor_x self.cursor_y = cursor_y addr = cursor_x & 0x3f if cursor_y & 1: addr += 0x40 # Lines 1 & 3 add 0x40 if cursor_y & 2: # Lines 2 & 3 add number of columns addr += self.num_columns self.hal_write_command(self.LCD_DDRAM | addr) def putchar(self, char): # Writes the indicated character to the LCD at the current cursor # position, and advances the cursor by one position. if char == '\\n': if self.implied_newline: # self.implied_newline means we advanced due to a wraparound, # so if we get a newline right after that we ignore it. pass else: self.cursor_x = self.num_columns else: self.hal_write_data(ord(char)) self.cursor_x += 1 if self.cursor_x >= self.num_columns: self.cursor_x = 0 self.cursor_y += 1 self.implied_newline = (char != '\\n') if self.cursor_y >= self.num_lines: self.cursor_y = 0 self.move_to(self.cursor_x, self.cursor_y) def putstr(self, string): # Write the indicated string to the LCD at the current cursor # position and advances the cursor position appropriately. for char in string: self.putchar(char) def custom_char(self, location, charmap): # Write a character to one of the 8 CGRAM locations, available # as chr(0) through chr(7). location &= 0x7 self.hal_write_command(self.LCD_CGRAM | (location << 3)) self.hal_sleep_us(40) for i in range(8): self.hal_write_data(charmap[i]) self.hal_sleep_us(40) self.move_to(self.cursor_x, self.cursor_y) def hal_backlight_on(self): # Allows the hal layer to turn the backlight on. # If desired, a derived HAL class will implement this function. pass def hal_backlight_off(self): # Allows the hal layer to turn the backlight off. # If desired, a derived HAL class will implement this function. pass def hal_write_command(self, cmd): # Write a command to the LCD. # It is expected that a derived HAL class will implement this function. raise NotImplementedError def hal_write_data(self, data): # Write data to the LCD. # It is expected that a derived HAL class will implement this function. raise NotImplementedError def hal_sleep_us(self, usecs): # Sleep for some time (given in microseconds) time.sleep_us(usecs) \u5b9e\u9a8c\u4e00\uff1aLCD\u6db2\u6676\u5c4f\u7684\u663e\u793a \u4ee3\u7801\u5982\u4e0b\uff1a # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, SoftI2C, I2C from libs.I2cLcd import I2cLcd import time # \u521d\u59cb\u5316\u64cd\u4f5c i2c = SoftI2C(sda=Pin(21), scl=Pin(22), freq=400000) # \u5b9a\u4e49 SoftI2C \u63a7\u5236\u5bf9\u8c61 address = i2c.scan()[0] # \u83b7\u53d6 I2C \u4ece\u673a\u5730\u5740 i2c_lcd = I2cLcd(i2c, address, 2, 16) # \u5b9a\u4e49 I2CLCD \u5bf9\u8c61 # \u6e05\u5c4f\u64cd\u4f5c\uff0c\u9632\u6b62\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u4ea7\u751f\u5f71\u54cd i2c_lcd.clear() # \u663e\u793a\u5149\u68072\u79d2\u540e\u5f71\u85cf\u5149\u68072\u79d2 i2c_lcd.show_cursor() # \u663e\u793a\u5149\u68072\u79d2 time.sleep(2) i2c_lcd.hide_cursor() # \u5f71\u85cf\u5149\u6807 time.sleep(2) # \u95ea\u70c1\u5149\u68072\u79d2\uff0cblink_cursor_off\u65b9\u6cd5\u4f5c\u7528\u5149\u6807\u4e0d\u95ea\u70c1 i2c_lcd.blink_cursor_on() time.sleep(2) # \u5173\u95ed\u80cc\u51492\u79d2\u540e\uff0c\u5f00\u542f\u80cc\u5149 i2c_lcd.backlight_off() # \u5173\u95ed\u80cc\u5149 time.sleep(2) i2c_lcd.backlight_on() # \u79fb\u52a8\u5149\u6807\u5230\u6307\u5b9a\u4f4d\u7f6e(\u5750\u6807\u4ece\u5de6\u4e0a\u89d2(0,0)\u5f00\u59cb\u3002\u6ce8\u610f\u4e0d\u8981\u8d8a\u754c) i2c_lcd.move_to(cursor_x=5,cursor_y=1) # \u5149\u6807\u5728\u7b2c6\u5217\u7684\u7b2c\u4e8c\u884c\u663e\u793a # \u5728\u5149\u6807\u4f4d\u7f6e\u5199\u5165\u5355\u4e2a\u5b57\u7b26\uff0c\u81ea\u52a8\u4e0b\u79fb\u5149\u6807 i2c_lcd.putchar('g') # \u53ea\u80fd\u662f\u5355\u4e2a\u5b57\u7b26\u54e6 time.sleep(2) # \u5728\u5149\u6807\u4f4d\u7f6e\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u81ea\u52a8\u5149\u6807\u4e0b\u79fb\u52a8 i2c_lcd.putstr(' hello') # \u7a7a\u683c\u5373\u8df3\u8fc7\u4e00\u4e2a\u7a7a\u683c time.sleep(2) \u5b9e\u9a8c\u4e8c\uff1aLCD\u6db2\u6676\u5c4f\u663e\u793a\u65e5\u671f\u65f6\u95f4 \u7a0b\u5e8f\u5982\u4e0b\uff1a # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, SoftI2C, I2C, RTC from libs.I2cLcd import I2cLcd import time # \u521d\u59cb\u5316\u64cd\u4f5c i2c = SoftI2C(sda=Pin(21), scl=Pin(22), freq=400000) # \u5b9a\u4e49 SoftI2C \u63a7\u5236\u5bf9\u8c61 address = i2c.scan()[0] # \u83b7\u53d6 I2C \u4ece\u673a\u5730\u5740 i2c_lcd = I2cLcd(i2c, address, 2, 16) # \u5b9a\u4e49 I2CLCD \u5bf9\u8c61 # \u6e05\u5c4f\u64cd\u4f5c\uff0c\u9632\u6b62\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u4ea7\u751f\u5f71\u54cd i2c_lcd.clear() # \u521b\u5efaRTC\u5bf9\u8c61 rtc =RTC() # \u521b\u5efa\u661f\u671f\u5217\u8868 week= ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'] while True: i2c_lcd.clear() # \u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4 datetime = rtc.datetime() # \u5199\u5165\u65f6\u95f4\u6570\u636e i2c_lcd.putstr('%d-%02d-%02d %s\\n' % (datetime[0],datetime[1],datetime[2],week[datetime[3]])) i2c_lcd.putstr('%02d:%02d:%02d' % (datetime[4],datetime[5],datetime[6])) # \u663e\u793a\u65f6\u95f41\u79d2\u540e\u5237\u65b0\u6570\u636e time.sleep(1) \u5b9e\u9a8c\u4e09\uff1aLCD\u6db2\u6676\u5c4f\u663e\u793a\u65e5\u671f\uff08\u4e2d\u65ad\u7684\u65b9\u5f0f\uff09 \u7a0b\u5e8f\u5982\u4e0b # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, SoftI2C, I2C, RTC, Timer from libs.I2cLcd import I2cLcd import time # \u521d\u59cb\u5316\u64cd\u4f5c i2c = SoftI2C(sda=Pin(21), scl=Pin(22), freq=400000) # \u5b9a\u4e49 SoftI2C \u63a7\u5236\u5bf9\u8c61 address = i2c.scan()[0] # \u83b7\u53d6 I2C \u4ece\u673a\u5730\u5740 i2c_lcd = I2cLcd(i2c, address, 2, 16) # \u5b9a\u4e49 I2CLCD \u5bf9\u8c61 # \u6e05\u5c4f\u64cd\u4f5c\uff0c\u9632\u6b62\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u4ea7\u751f\u5f71\u54cd i2c_lcd.clear() # \u521b\u5efaRTC\u5bf9\u8c61 rtc =RTC() # \u521b\u5efa\u661f\u671f\u5217\u8868 week= ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'] # \u5b9a\u4e49\u5b9a\u65f6\u5668\u4e2d\u65ad\u51fd\u6570 def timer_irq(timer_obj): i2c_lcd.clear() # \u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4 datetime = rtc.datetime() # \u5199\u5165\u65f6\u95f4\u6570\u636e i2c_lcd.putstr('%d-%02d-%02d %s\\n' % (datetime[0],datetime[1],datetime[2],week[datetime[3]])) i2c_lcd.putstr('%02d:%02d:%02d' % (datetime[4],datetime[5],datetime[6])) # \u521d\u59cb\u5316\u5b9a\u65f6\u5668\u5bf9\u8c61 timer = Timer(0) timer.init(period=1000, mode=Timer.PERIODIC, callback=timer_irq)","title":"16.LCD\u6db2\u6676\u663e\u793a\u5c4f"},{"location":"MicroPython/LCD%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/#lcd","text":"","title":"LCD\u6db2\u6676\u663e\u793a\u5c4f"},{"location":"MicroPython/LCD%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LCD\u6db2\u6676\u663e\u793a\u5c4f 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-SCL 22 2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-SDA 21 3 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-VCC P2 4 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-GND P2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u4ecb\u7ecd LCD1602\u662f\u4e00\u79cd\u5e7f\u6cdb\u5e94\u7528\u7684\u5b57\u7b26\u578b\u6db2\u6676\u663e\u793a\u6a21\u5757\uff0c\u4e3b\u8981\u7528\u4e8e\u663e\u793a\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u7b26\u53f7\u7b49ASCII\u5b57\u7b26\u3002 \u8ba4\u8bc6 IIC\uff08I2C\uff09\u63a5\u53e3 \u7531\u4e8e 1602 \u7684\u7ba1\u811a\u6570\u8fc7\u591a\uff0c\u5982\u679c\u76f4\u63a5\u4e0e ESP32 \u5f00\u53d1\u677f\u8fde\u63a5\u9700\u8981\u5360\u7528\u5927\u91cf\u7684 GPIO \u7ba1\u811a\uff0c\u4e0d\u4f46\u5bb9\u6613\u9020\u6210\u8d44\u6e90\u6d6a\u8d39\uff0c\u8fde\u63a5\u4e5f\u975e\u5e38\u4e0d\u65b9\u4fbf\uff0c\u7f16\u7a0b\u7684\u96be\u5ea6\u4e5f\u4f1a\u6bd4\u8f83\u5927\u3002 \u56e0\u6b64\u5b9e\u9645\u4f7f\u7528\u65f6\u5f80\u5f80\u4f1a\u7ed9 1602 \u5c4f\u589e\u52a0\u4e00\u5757 IIC \u9a71\u52a8\u7248\uff0c\u5c06 1602 \u7684 16 \u4e2a\u7ba1\u811a\u8fde\u63a5\u5230\u7531 PCF8574T \u4f5c\u4e3a\u4e3b\u8981\u82af\u7247\u7684\u9a71\u52a8\u7248\u4e0a\uff0c\u5c06\u63a5\u53e3\u8f6c\u6362\u4e3a IIC \u518d\u8fde\u63a5\u5f00\u53d1\u677f\u3002 IIC \u662f\u4e00\u79cd\u786c\u4ef6\u8bbe\u5907\u95f4\u5e38\u7528\u7684\u63a5\u53e3\u901a\u8baf\u534f\u8bae\uff0c\u5168\u79f0\u662f Inter-Integrated Circuit\uff0c\u4e5f\u53ef\u4ee5\u5199\u4e3a I2C\u3002\u4ed6\u7684\u8bbe\u8ba1\u65f6\u7684\u7406\u5ff5\u662f\uff1a\u4fe1\u53f7\u7ebf\u5c3d\u91cf\u5c11\u5e76\u4e14\u901f\u7387\u8981\u5c3d\u91cf\u9ad8\u3002 IIC\u7684\u7c7b\u548c\u51fd\u6570 \u6211\u4eec\u5e38\u7528\u7684\u662f\u8f6f\u4ef6IIC\u603b\u7ebf\u65b9\u5f0f\u901a\u8baf\uff08\u901a\u8fc7\u7a0b\u5e8f\u6765\u6a21\u62dfIIC\u901a\u8baf\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u968f\u610f\u7684\u4f7f\u7528GPIO\u5f15\u811a\uff0c\u4f46\u662f\u6548\u7387\u6709\u6240\u4e0b\u964d\uff0c\u5728\u8fdb\u884cIIC\u7f16\u7a0b\u65f6\uff0c\u81ea\u5df1\u7f16\u5199\u7a0b\u5e8f\uff0c\u96be\u5ea6\u6bd4\u8f83\u5927\uff0c\u8fd8\u597d\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aTM1637.py\u6587\u4ef6\u7528\u6765\u63a7\u5236\u8f6f\u4ef6IIC\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2alcd_api.py\u6587\u4ef6\uff0c\u8fd9\u662f\u7528\u6765\u63a7\u5236\u786c\u4ef6IIC\uff0c\u56e0\u4e3a\u8f6f\u4ef6IIC\u662f\u5bf9\u786c\u4ef6IIC\u7684\u7ee7\u627f\uff0c\u6240\u4ee5\u4e24\u4e2a\u6587\u4ef6\u90fd\u8981\u4fdd\u5b58\u5728libs\u6587\u4ef6\u5939\u4e2d\u3002 ''' \u8f6f\u4ef6IIC\u5e93\uff08\u5bf9\u786c\u4ef6IIC\u7684\u7ee7\u627f\uff09 ''' import utime from libs.lcd_api import LcdApi from machine import I2C # PCF8574 pin definitions MASK_RS = 0x01 # P0 MASK_RW = 0x02 # P1 MASK_E = 0x04 # P2 SHIFT_BACKLIGHT = 3 # P3 SHIFT_DATA = 4 # P4-P7 class I2cLcd(LcdApi): # Implements a HD44780 character LCD connected via PCF8574 on I2C def __init__(self, i2c, i2c_addr, num_lines, num_columns): self.i2c = i2c self.i2c_addr = i2c_addr self.i2c.writeto(self.i2c_addr, bytes([0])) utime.sleep_ms(20) # Allow LCD time to powerup # Send reset 3 times self.hal_write_init_nibble(self.LCD_FUNCTION_RESET) utime.sleep_ms(5) # Need to delay at least 4.1 msec self.hal_write_init_nibble(self.LCD_FUNCTION_RESET) utime.sleep_ms(1) self.hal_write_init_nibble(self.LCD_FUNCTION_RESET) utime.sleep_ms(1) # Put LCD into 4-bit mode self.hal_write_init_nibble(self.LCD_FUNCTION) utime.sleep_ms(1) LcdApi.__init__(self, num_lines, num_columns) cmd = self.LCD_FUNCTION if num_lines > 1: cmd |= self.LCD_FUNCTION_2LINES self.hal_write_command(cmd) def hal_write_init_nibble(self, nibble): # Writes an initialization nibble to the LCD. # This particular function is only used during initialization. byte = ((nibble >> 4) & 0x0f) << SHIFT_DATA self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) def hal_backlight_on(self): # Allows the hal layer to turn the backlight on self.i2c.writeto(self.i2c_addr, bytes([1 << SHIFT_BACKLIGHT])) def hal_backlight_off(self): # Allows the hal layer to turn the backlight off self.i2c.writeto(self.i2c_addr, bytes([0])) def hal_write_command(self, cmd): # Write a command to the LCD. Data is latched on the falling edge of E. byte = ((self.backlight << SHIFT_BACKLIGHT) | (((cmd >> 4) & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) byte = ((self.backlight << SHIFT_BACKLIGHT) | ((cmd & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) if cmd <= 3: # The home and clear commands require a worst case delay of 4.1 msec utime.sleep_ms(5) def hal_write_data(self, data): # Write data to the LCD. Data is latched on the falling edge of E. byte = (MASK_RS | (self.backlight << SHIFT_BACKLIGHT) | (((data >> 4) & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) byte = (MASK_RS | (self.backlight << SHIFT_BACKLIGHT) | ((data & 0x0f) << SHIFT_DATA)) self.i2c.writeto(self.i2c_addr, bytes([byte | MASK_E])) self.i2c.writeto(self.i2c_addr, bytes([byte])) ''' \u786c\u4ef6IIC\u5e93 libs/lcd_api.py ''' import time class LcdApi: # Implements the API for talking with HD44780 compatible character LCDs. # This class only knows what commands to send to the LCD, and not how to get # them to the LCD. # # It is expected that a derived class will implement the hal_xxx functions. # # The following constant names were lifted from the avrlib lcd.h header file, # with bit numbers changed to bit masks. # HD44780 LCD controller command set LCD_CLR = 0x01 # DB0: clear display LCD_HOME = 0x02 # DB1: return to home position LCD_ENTRY_MODE = 0x04 # DB2: set entry mode LCD_ENTRY_INC = 0x02 # DB1: increment LCD_ENTRY_SHIFT = 0x01 # DB0: shift LCD_ON_CTRL = 0x08 # DB3: turn lcd/cursor on LCD_ON_DISPLAY = 0x04 # DB2: turn display on LCD_ON_CURSOR = 0x02 # DB1: turn cursor on LCD_ON_BLINK = 0x01 # DB0: blinking cursor LCD_MOVE = 0x10 # DB4: move cursor/display LCD_MOVE_DISP = 0x08 # DB3: move display (0-> move cursor) LCD_MOVE_RIGHT = 0x04 # DB2: move right (0-> left) LCD_FUNCTION = 0x20 # DB5: function set LCD_FUNCTION_8BIT = 0x10 # DB4: set 8BIT mode (0->4BIT mode) LCD_FUNCTION_2LINES = 0x08 # DB3: two lines (0->one line) LCD_FUNCTION_10DOTS = 0x04 # DB2: 5x10 font (0->5x7 font) LCD_FUNCTION_RESET = 0x30 # See \"Initializing by Instruction\" section LCD_CGRAM = 0x40 # DB6: set CG RAM address LCD_DDRAM = 0x80 # DB7: set DD RAM address LCD_RS_CMD = 0 LCD_RS_DATA = 1 LCD_RW_WRITE = 0 LCD_RW_READ = 1 def __init__(self, num_lines, num_columns): self.num_lines = num_lines if self.num_lines > 4: self.num_lines = 4 self.num_columns = num_columns if self.num_columns > 40: self.num_columns = 40 self.cursor_x = 0 self.cursor_y = 0 self.implied_newline = False self.backlight = True self.display_off() self.backlight_on() self.clear() self.hal_write_command(self.LCD_ENTRY_MODE | self.LCD_ENTRY_INC) self.hide_cursor() self.display_on() def clear(self): # Clears the LCD display and moves the cursor to the top left corner self.hal_write_command(self.LCD_CLR) self.hal_write_command(self.LCD_HOME) self.cursor_x = 0 self.cursor_y = 0 def show_cursor(self): # Causes the cursor to be made visible self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY | self.LCD_ON_CURSOR) def hide_cursor(self): # Causes the cursor to be hidden self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY) def blink_cursor_on(self): # Turns on the cursor, and makes it blink self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY | self.LCD_ON_CURSOR | self.LCD_ON_BLINK) def blink_cursor_off(self): # Turns on the cursor, and makes it no blink (i.e. be solid) self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY | self.LCD_ON_CURSOR) def display_on(self): # Turns on (i.e. unblanks) the LCD self.hal_write_command(self.LCD_ON_CTRL | self.LCD_ON_DISPLAY) def display_off(self): # Turns off (i.e. blanks) the LCD self.hal_write_command(self.LCD_ON_CTRL) def backlight_on(self): # Turns the backlight on. # This isn't really an LCD command, but some modules have backlight # controls, so this allows the hal to pass through the command. self.backlight = True self.hal_backlight_on() def backlight_off(self): # Turns the backlight off. # This isn't really an LCD command, but some modules have backlight # controls, so this allows the hal to pass through the command. self.backlight = False self.hal_backlight_off() def move_to(self, cursor_x, cursor_y): # Moves the cursor position to the indicated position. The cursor # position is zero based (i.e. cursor_x == 0 indicates first column). self.cursor_x = cursor_x self.cursor_y = cursor_y addr = cursor_x & 0x3f if cursor_y & 1: addr += 0x40 # Lines 1 & 3 add 0x40 if cursor_y & 2: # Lines 2 & 3 add number of columns addr += self.num_columns self.hal_write_command(self.LCD_DDRAM | addr) def putchar(self, char): # Writes the indicated character to the LCD at the current cursor # position, and advances the cursor by one position. if char == '\\n': if self.implied_newline: # self.implied_newline means we advanced due to a wraparound, # so if we get a newline right after that we ignore it. pass else: self.cursor_x = self.num_columns else: self.hal_write_data(ord(char)) self.cursor_x += 1 if self.cursor_x >= self.num_columns: self.cursor_x = 0 self.cursor_y += 1 self.implied_newline = (char != '\\n') if self.cursor_y >= self.num_lines: self.cursor_y = 0 self.move_to(self.cursor_x, self.cursor_y) def putstr(self, string): # Write the indicated string to the LCD at the current cursor # position and advances the cursor position appropriately. for char in string: self.putchar(char) def custom_char(self, location, charmap): # Write a character to one of the 8 CGRAM locations, available # as chr(0) through chr(7). location &= 0x7 self.hal_write_command(self.LCD_CGRAM | (location << 3)) self.hal_sleep_us(40) for i in range(8): self.hal_write_data(charmap[i]) self.hal_sleep_us(40) self.move_to(self.cursor_x, self.cursor_y) def hal_backlight_on(self): # Allows the hal layer to turn the backlight on. # If desired, a derived HAL class will implement this function. pass def hal_backlight_off(self): # Allows the hal layer to turn the backlight off. # If desired, a derived HAL class will implement this function. pass def hal_write_command(self, cmd): # Write a command to the LCD. # It is expected that a derived HAL class will implement this function. raise NotImplementedError def hal_write_data(self, data): # Write data to the LCD. # It is expected that a derived HAL class will implement this function. raise NotImplementedError def hal_sleep_us(self, usecs): # Sleep for some time (given in microseconds) time.sleep_us(usecs)","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/LCD%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/#lcd_1","text":"\u4ee3\u7801\u5982\u4e0b\uff1a # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, SoftI2C, I2C from libs.I2cLcd import I2cLcd import time # \u521d\u59cb\u5316\u64cd\u4f5c i2c = SoftI2C(sda=Pin(21), scl=Pin(22), freq=400000) # \u5b9a\u4e49 SoftI2C \u63a7\u5236\u5bf9\u8c61 address = i2c.scan()[0] # \u83b7\u53d6 I2C \u4ece\u673a\u5730\u5740 i2c_lcd = I2cLcd(i2c, address, 2, 16) # \u5b9a\u4e49 I2CLCD \u5bf9\u8c61 # \u6e05\u5c4f\u64cd\u4f5c\uff0c\u9632\u6b62\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u4ea7\u751f\u5f71\u54cd i2c_lcd.clear() # \u663e\u793a\u5149\u68072\u79d2\u540e\u5f71\u85cf\u5149\u68072\u79d2 i2c_lcd.show_cursor() # \u663e\u793a\u5149\u68072\u79d2 time.sleep(2) i2c_lcd.hide_cursor() # \u5f71\u85cf\u5149\u6807 time.sleep(2) # \u95ea\u70c1\u5149\u68072\u79d2\uff0cblink_cursor_off\u65b9\u6cd5\u4f5c\u7528\u5149\u6807\u4e0d\u95ea\u70c1 i2c_lcd.blink_cursor_on() time.sleep(2) # \u5173\u95ed\u80cc\u51492\u79d2\u540e\uff0c\u5f00\u542f\u80cc\u5149 i2c_lcd.backlight_off() # \u5173\u95ed\u80cc\u5149 time.sleep(2) i2c_lcd.backlight_on() # \u79fb\u52a8\u5149\u6807\u5230\u6307\u5b9a\u4f4d\u7f6e(\u5750\u6807\u4ece\u5de6\u4e0a\u89d2(0,0)\u5f00\u59cb\u3002\u6ce8\u610f\u4e0d\u8981\u8d8a\u754c) i2c_lcd.move_to(cursor_x=5,cursor_y=1) # \u5149\u6807\u5728\u7b2c6\u5217\u7684\u7b2c\u4e8c\u884c\u663e\u793a # \u5728\u5149\u6807\u4f4d\u7f6e\u5199\u5165\u5355\u4e2a\u5b57\u7b26\uff0c\u81ea\u52a8\u4e0b\u79fb\u5149\u6807 i2c_lcd.putchar('g') # \u53ea\u80fd\u662f\u5355\u4e2a\u5b57\u7b26\u54e6 time.sleep(2) # \u5728\u5149\u6807\u4f4d\u7f6e\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u81ea\u52a8\u5149\u6807\u4e0b\u79fb\u52a8 i2c_lcd.putstr(' hello') # \u7a7a\u683c\u5373\u8df3\u8fc7\u4e00\u4e2a\u7a7a\u683c time.sleep(2)","title":"\u5b9e\u9a8c\u4e00\uff1aLCD\u6db2\u6676\u5c4f\u7684\u663e\u793a"},{"location":"MicroPython/LCD%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/#lcd_2","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, SoftI2C, I2C, RTC from libs.I2cLcd import I2cLcd import time # \u521d\u59cb\u5316\u64cd\u4f5c i2c = SoftI2C(sda=Pin(21), scl=Pin(22), freq=400000) # \u5b9a\u4e49 SoftI2C \u63a7\u5236\u5bf9\u8c61 address = i2c.scan()[0] # \u83b7\u53d6 I2C \u4ece\u673a\u5730\u5740 i2c_lcd = I2cLcd(i2c, address, 2, 16) # \u5b9a\u4e49 I2CLCD \u5bf9\u8c61 # \u6e05\u5c4f\u64cd\u4f5c\uff0c\u9632\u6b62\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u4ea7\u751f\u5f71\u54cd i2c_lcd.clear() # \u521b\u5efaRTC\u5bf9\u8c61 rtc =RTC() # \u521b\u5efa\u661f\u671f\u5217\u8868 week= ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'] while True: i2c_lcd.clear() # \u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4 datetime = rtc.datetime() # \u5199\u5165\u65f6\u95f4\u6570\u636e i2c_lcd.putstr('%d-%02d-%02d %s\\n' % (datetime[0],datetime[1],datetime[2],week[datetime[3]])) i2c_lcd.putstr('%02d:%02d:%02d' % (datetime[4],datetime[5],datetime[6])) # \u663e\u793a\u65f6\u95f41\u79d2\u540e\u5237\u65b0\u6570\u636e time.sleep(1)","title":"\u5b9e\u9a8c\u4e8c\uff1aLCD\u6db2\u6676\u5c4f\u663e\u793a\u65e5\u671f\u65f6\u95f4"},{"location":"MicroPython/LCD%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/#lcd_3","text":"\u7a0b\u5e8f\u5982\u4e0b # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, SoftI2C, I2C, RTC, Timer from libs.I2cLcd import I2cLcd import time # \u521d\u59cb\u5316\u64cd\u4f5c i2c = SoftI2C(sda=Pin(21), scl=Pin(22), freq=400000) # \u5b9a\u4e49 SoftI2C \u63a7\u5236\u5bf9\u8c61 address = i2c.scan()[0] # \u83b7\u53d6 I2C \u4ece\u673a\u5730\u5740 i2c_lcd = I2cLcd(i2c, address, 2, 16) # \u5b9a\u4e49 I2CLCD \u5bf9\u8c61 # \u6e05\u5c4f\u64cd\u4f5c\uff0c\u9632\u6b62\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u4ea7\u751f\u5f71\u54cd i2c_lcd.clear() # \u521b\u5efaRTC\u5bf9\u8c61 rtc =RTC() # \u521b\u5efa\u661f\u671f\u5217\u8868 week= ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'] # \u5b9a\u4e49\u5b9a\u65f6\u5668\u4e2d\u65ad\u51fd\u6570 def timer_irq(timer_obj): i2c_lcd.clear() # \u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4 datetime = rtc.datetime() # \u5199\u5165\u65f6\u95f4\u6570\u636e i2c_lcd.putstr('%d-%02d-%02d %s\\n' % (datetime[0],datetime[1],datetime[2],week[datetime[3]])) i2c_lcd.putstr('%02d:%02d:%02d' % (datetime[4],datetime[5],datetime[6])) # \u521d\u59cb\u5316\u5b9a\u65f6\u5668\u5bf9\u8c61 timer = Timer(0) timer.init(period=1000, mode=Timer.PERIODIC, callback=timer_irq)","title":"\u5b9e\u9a8c\u4e09\uff1aLCD\u6db2\u6676\u5c4f\u663e\u793a\u65e5\u671f\uff08\u4e2d\u65ad\u7684\u65b9\u5f0f\uff09"},{"location":"MicroPython/MPU6050%20%E9%99%80%E8%9E%BA%E4%BB%AA%E6%A8%A1%E5%9D%97/","text":"MPU6050 \u9640\u87ba\u4eea\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 MPU6050 \u9640\u87ba\u4eea\u6a21\u5757 1 5 PH2.0\u6570\u636e\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 MPU6050 \u9640\u87ba\u4eea\u6a21\u5757 - SCL 22 2 MPU6050 \u9640\u87ba\u4eea\u6a21\u5757 - SDA 21 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 MPU6050\u9640\u87ba\u4eea\u6a21\u5757\u662f\u4e00\u6b3e\u9ad8\u6027\u80fd\u4e09\u8f74\u52a0\u901f\u5ea6+\u4e09\u8f74\u9640\u87ba\u4eea\u7684\u516d\u8f74\u4f20\u611f\u5668\u6a21\u5757\uff0c\u91c7\u7528MPU6050\u82af\u7247\u4f5c\u4e3a\u6838\u5fc3\uff0cMPU-6050\u662f6\u8f74\u8fd0\u52a8\u5904\u7406\u4f20\u611f\u5668\u3002\u5b83\u96c6\u6210\u4e863\u8f74MEMS\u9640\u87ba\u4eea\uff0c3\u8f74MEMS\u52a0\u901f\u5ea6\u8ba1\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u6269\u5c55\u7684\u6570\u5b57\u8fd0\u52a8\u5904\u7406\u5668DMP\u3002\u4f7f\u7528\u5b83\u5c31\u662f\u4e3a\u4e86\u5f97\u5230\u5f85\u6d4b\u7269\u4f53\uff08\u5982\u56db\u8f74\u98de\u884c\u5668\u3001\u5e73\u8861\u5c0f\u8f66\uff09x\u3001y\u3001z\u8f74\u7684\u503e\u89d2\uff08\u4fef\u4ef0\u89d2Pitch\u3001\u7ffb\u6eda\u89d2Roll\u3001\u504f\u822a\u89d2Yaw\uff09\u3002\u6211\u4eec\u901a\u8fc7I2C\u8bfb\u53d6MPU6050\u7684\u516d\u4e2a\u6570\u636e\uff08\u4e09\u8f74\u52a0\u901f\u5ea6AD\u503c\u3001\u4e09\u8f74\u89d2\u901f\u5ea6AD\u503c\uff09\u7ecf\u8fc7\u59ff\u6001\u878d\u5408\u540e\u5c31\u53ef\u4ee5\u5f97\u5230Pitch\u3001Roll\u3001Yaw\u89d2\u3002\u5229\u7528\u81ea\u5e26\u7684\u6570\u5b57\u8fd0\u52a8\u5904\u7406\u5668DMP\uff0c\u901a\u8fc7IIC\u63a5\u53e3\uff0c\u8f93\u51fa\u59ff\u6001\u89e3\u7b97\u540e\u7684\u6570\u636e\u3002\u5177\u6709\u4f53\u79ef\u5c0f\uff0c\u4f7f\u7528\u65b9\u4fbf\u7b49\u7279\u70b9\u3002\u6a21\u5757\u81ea\u5e262\u4e2a\u5b9a\u4f4d\u5b54\uff0c\u65b9\u4fbf\u4f60\u5c06\u6a21\u5757\u56fa\u5b9a\u5728\u5176\u4ed6\u8bbe\u5907\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2ampu6050.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 import machine import time import math # \u5b9a\u4e49\u52a0\u901f\u5ea6\u8ba1/\u9640\u87ba\u4eea\u4f20\u611f\u5668\u64cd\u4f5c\u7c7b class accel(): def __init__(self, scl, sda ,addr=0x68): \"\"\" \u521d\u59cb\u5316\u4f20\u611f\u5668 :param i2c: \u5df2\u521d\u59cb\u5316\u7684I2C\u603b\u7ebf\u5bf9\u8c61 :param addr: \u4f20\u611f\u5668I2C\u5730\u5740\uff08MPU6050\u9ed8\u8ba4\u4e3a0x68\uff09 \"\"\" self.iic = machine.SoftI2C(scl = machine.Pin(scl), sda = machine.Pin(sda), freq = 100000) # \u5b58\u50a8I2C\u603b\u7ebf\u5bf9\u8c61 self.addr = addr # \u5b58\u50a8\u8bbe\u5907\u5730\u5740 # \u521d\u59cb\u5316\u4f20\u611f\u5668\uff08\u9000\u51fa\u7761\u7720\u6a21\u5f0f\uff09 self.iic.start() # \u542f\u52a8I2C\u901a\u4fe1 # \u5411\u7535\u6e90\u7ba1\u7406\u5bc4\u5b58\u5668\uff080x6B\uff09\u5199\u51650\u5524\u9192\u8bbe\u5907 # 107\u662f\u5bc4\u5b58\u5668\u5730\u5740\u7684\u5341\u8fdb\u5236\u8868\u793a\uff080x6B\u7684\u5341\u8fdb\u5236\u662f107\uff09 # bytearray([107, 0])\u8868\u793a\uff1a\u5411\u5bc4\u5b58\u56680x6B\u5199\u51650x00 self.iic.writeto(self.addr, bytearray([107, 0])) self.iic.stop() # \u7ed3\u675fI2C\u901a\u4fe1 def get_raw_values(self): \"\"\" \u83b7\u53d6\u539f\u59cb\u5b57\u8282\u6570\u636e\uff0814\u5b57\u8282\uff09 \"\"\" self.iic.start() # \u4ece\u5bc4\u5b58\u56680x3B\u5f00\u59cb\u8fde\u7eed\u8bfb\u53d614\u5b57\u8282\u6570\u636e\uff1a # \u52a0\u901f\u5ea6\u8ba1X/Y/Z\uff08\u54042\u5b57\u8282\uff09 + \u6e29\u5ea6\uff082\u5b57\u8282\uff09 + \u9640\u87ba\u4eeaX/Y/Z\uff08\u54042\u5b57\u8282\uff09 a = self.iic.readfrom_mem(self.addr, 0x3B, 14) self.iic.stop() return a # \u8fd4\u56de\u5b57\u8282\u6570\u7ec4\u683c\u5f0f\u7684\u539f\u59cb\u6570\u636e def get_ints(self): \"\"\" \u5c06\u539f\u59cb\u5b57\u8282\u8f6c\u6362\u4e3a\u6574\u6570\u5217\u8868\uff08\u8c03\u8bd5\u7528\uff09 \"\"\" b = self.get_raw_values() c = [] for i in b: c.append(i) # \u5c06\u5b57\u8282\u9010\u4e2a\u8f6c\u6362\u4e3a0-255\u7684\u6574\u6570 return c # \u793a\u4f8b\u8fd4\u56de\uff1a[255, 128, ...]\uff0814\u4e2a\u5143\u7d20\uff09 def bytes_toint(self, firstbyte, secondbyte): \"\"\" \u5c06\u4e24\u4e2a\u5b57\u8282\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570 \uff08\u5904\u7406\u4e8c\u8fdb\u5236\u8865\u7801\u683c\u5f0f\uff09 :param firstbyte: \u9ad8\u4f4d\u5b57\u8282 :param secondbyte: \u4f4e\u4f4d\u5b57\u8282 :return: \u6709\u7b26\u53f7\u6574\u6570\uff08\u8303\u56f4-32768~32767\uff09 \"\"\" # \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\uff08\u6700\u9ad8\u4f4d\u4e3a1\uff09 if not firstbyte & 0x80: # \u6b63\u6570\u76f4\u63a5\u62fc\u63a5 return (firstbyte << 8) | secondbyte else: # \u8d1f\u6570\u5904\u7406\uff08\u8865\u7801\u8f6c\u6362\uff09 # 1. \u6309\u4f4d\u53d6\u53cd\u9ad8\u4f4d\u5b57\u8282\uff08^255\u7b49\u4ef7\u4e8e~\u64cd\u4f5c\uff09 # 2. \u6309\u4f4d\u53d6\u53cd\u4f4e\u4f4d\u5b57\u8282\u5e76+1 # 3. \u7ec4\u5408\u7ed3\u679c\u540e\u53d6\u8d1f\u6570 return - (((firstbyte ^ 255) << 8) | (secondbyte ^ 255) + 1) def get_values(self): \"\"\" \u83b7\u53d6\u89e3\u6790\u540e\u7684\u4f20\u611f\u5668\u6570\u503c\u5b57\u5178 \"\"\" raw_ints = self.get_raw_values() # \u83b7\u53d6\u539f\u59cb\u5b57\u8282\u6570\u636e vals = {} # \u521b\u5efa\u5b58\u50a8\u89e3\u6790\u503c\u7684\u5b57\u5178 # \u89e3\u6790\u52a0\u901f\u5ea6\u8ba1\u6570\u636e\uff08X/Y/Z\u8f74\uff09 # \u6bcf\u4e2a\u8f74\u5360\u75282\u4e2a\u5b57\u8282\uff08\u9ad8\u4f4d\u5728\u524d\uff09 vals[\"AcX\"] = self.bytes_toint(raw_ints[0], raw_ints[1]) # \u52a0\u901f\u5ea6X\u8f74 vals[\"AcY\"] = self.bytes_toint(raw_ints[2], raw_ints[3]) # \u52a0\u901f\u5ea6Y\u8f74 vals[\"AcZ\"] = self.bytes_toint(raw_ints[4], raw_ints[5]) # \u52a0\u901f\u5ea6Z\u8f74 # \u89e3\u6790\u6e29\u5ea6\u6570\u636e\uff08\u516c\u5f0f\u6765\u81eaMPU6050\u624b\u518c\uff09 # \u539f\u59cb\u503c\u8303\u56f4\uff1a-40\u00b0C ~ +85\u00b0C vals[\"Tmp\"] = self.bytes_toint(raw_ints[6], raw_ints[7]) / 340.00 + 36.53 # \u89e3\u6790\u9640\u87ba\u4eea\u6570\u636e\uff08X/Y/Z\u8f74\uff09 vals[\"GyX\"] = self.bytes_toint(raw_ints[8], raw_ints[9]) # \u9640\u87ba\u4eeaX\u8f74 vals[\"GyY\"] = self.bytes_toint(raw_ints[10], raw_ints[11]) # \u9640\u87ba\u4eeaY\u8f74 vals[\"GyZ\"] = self.bytes_toint(raw_ints[12], raw_ints[13]) # \u9640\u87ba\u4eeaZ\u8f74 return vals # \u8fd4\u56de\u5b57\u5178\u683c\u5f0f\u7684\u539f\u59cb\u6574\u6570\u503c # \u6ce8\u610f\uff1a\u8fd4\u56de\u7684\u662f\u672a\u6821\u51c6\u7684\u539f\u59cb\u6570\u636e\uff01 # \u52a0\u901f\u5ea6\u8ba1\u5355\u4f4d\uff1aLSB\uff08\u9700\u8f6c\u6362\u4e3ag\uff0c\u9ed8\u8ba4\u00b12g\u91cf\u7a0b\u65f6 16384 LSB/g\uff09 # \u9640\u87ba\u4eea\u5355\u4f4d\uff1aLSB\uff08\u9700\u8f6c\u6362\u4e3a\u00b0/s\uff0c\u9ed8\u8ba4\u00b1250\u00b0/s\u91cf\u7a0b\u65f6 131 LSB/\u00b0/s\uff09 # \u6e29\u5ea6\u5355\u4f4d\uff1a\u6444\u6c0f\u5ea6 def val_test(self): \"\"\" \u6301\u7eed\u6d4b\u8bd5\u4f20\u611f\u5668\u6570\u636e\uff08\u4ec5\u7528\u4e8e\u6d4b\u8bd5\uff01\uff09 \u8b66\u544a\uff1a\u9ad8\u9891\u8bfb\u53d6\u53ef\u80fd\u5bfc\u81f4I2C\u603b\u7ebf\u5d29\u6e83 \"\"\" from time import sleep while True: print(self.get_values()) # \u6253\u5370\u5f53\u524d\u4f20\u611f\u5668\u503c sleep(0.05) # 50ms\u95f4\u9694\uff08\u7ea620Hz\u91c7\u6837\u7387\uff09 # \u52a0\u901f\u5ea6\u8ba1\u8ba1\u7b97\u89d2\u5ea6\uff08\u5feb\u901f\u54cd\u5e94\u4f46\u53d7\u8fd0\u52a8\u5f71\u54cd\uff09 pitch_acc = math.atan2(ay, math.sqrt(ax**2 + az**2)) * 180/math.pi roll_acc = math.atan2(-ax, math.sqrt(ay**2 + az**2)) * 180/math.pi # \u9640\u87ba\u4eea\u79ef\u5206\u89d2\u5ea6\uff08\u957f\u671f\u7a33\u5b9a\u4f46\u4f1a\u6f02\u79fb\uff09 pitch_gyro = self.pitch + gx * dt roll_gyro = self.roll + gy * dt # \u4e92\u8865\u6ee4\u6ce2\u878d\u5408\uff08\u6743\u91cd\u7cfb\u6570alpha\uff09 alpha = 0.02 # \u52a0\u901f\u5ea6\u8ba1\u6743\u91cd2% self.pitch = (1-alpha)*pitch_gyro + alpha*pitch_acc self.roll = (1-alpha)*roll_gyro + alpha*roll_acc # \u89d2\u5ea6\u5f52\u4e00\u5316 self.pitch = self._normalize_angle(self.pitch) self.roll = self._normalize_angle(self.roll) return (self.pitch, self.roll) def reset_angles(self): \"\"\" \u91cd\u7f6e\u59ff\u6001\u89d2\u5f52\u96f6\uff08\u7528\u4e8e\u91cd\u65b0\u5b9a\u4f4d\u57fa\u51c6\uff09 \"\"\" self.pitch = 0.0 self.roll = 0.0 \u5b9e\u9a8c\u4e00\uff1a\u8bfb\u53d6\u9640\u87ba\u4eea\u7684\u6570\u503c \u4ee3\u7801\u5982\u4e0b\uff1a import machine import time import math from libs.mpu6050 import accel # \u521d\u59cb\u5316\u5bf9\u8c61 accel = accel(scl=22,sda=21) while True: temperature = accel.get_values()['Tmp'] # \u83b7\u53d6\u6e29\u5ea6\u503c Acx = accel.get_values()['AcX'] # X\u8f74\u52a0\u901f\u5ea6 Acy = accel.get_values()['AcY'] # Y\u8f74\u52a0\u901f\u5ea6 Acz = accel.get_values()['AcZ'] # Y\u8f74\u52a0\u901f\u5ea6 gyx = accel.get_values()['GyX'] # X\u8f74\u89d2\u52a0\u901f\u5ea6 gyy = accel.get_values()['GyY'] # Y\u8f74\u89d2\u52a0\u901f\u5ea6 gyz = accel.get_values()['GyZ'] # Z\u8f74\u89d2\u52a0\u901f\u5ea6 # print(accel.get_values()) # \u539f\u59cb\u6570\u636e print(\"\u6e29\u5ea6: %.1f\u2103\" % temperature) print(f\"X\u8f74\u52a0\u901f\u5ea6\uff1a%d\\t\" % Acx, end='') print(f\"Y\u8f74\u52a0\u901f\u5ea6\uff1a%d\\t\" % Acy, end='') print(f\"Z\u8f74\u52a0\u901f\u5ea6\uff1a%d\" % Acz) print(f\"X\u8f74\u89d2\u52a0\u901f\u5ea6\uff1a%d\\t\" % gyx, end='') print(f\"Y\u8f74\u89d2\u52a0\u901f\u5ea6\uff1a%d\\t\" % gyy, end='') print(f\"Z\u8f74\u89d2\u52a0\u901f\u5ea6\uff1a%d\\t\" % gyz) print('-'*45) time.sleep_ms(300)","title":"49.MPU6050 \u9640\u87ba\u4eea\u6a21\u5757"},{"location":"MicroPython/MPU6050%20%E9%99%80%E8%9E%BA%E4%BB%AA%E6%A8%A1%E5%9D%97/#mpu6050","text":"","title":"MPU6050 \u9640\u87ba\u4eea\u6a21\u5757"},{"location":"MicroPython/MPU6050%20%E9%99%80%E8%9E%BA%E4%BB%AA%E6%A8%A1%E5%9D%97/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 MPU6050 \u9640\u87ba\u4eea\u6a21\u5757 1 5 PH2.0\u6570\u636e\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 MPU6050 \u9640\u87ba\u4eea\u6a21\u5757 - SCL 22 2 MPU6050 \u9640\u87ba\u4eea\u6a21\u5757 - SDA 21 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 MPU6050\u9640\u87ba\u4eea\u6a21\u5757\u662f\u4e00\u6b3e\u9ad8\u6027\u80fd\u4e09\u8f74\u52a0\u901f\u5ea6+\u4e09\u8f74\u9640\u87ba\u4eea\u7684\u516d\u8f74\u4f20\u611f\u5668\u6a21\u5757\uff0c\u91c7\u7528MPU6050\u82af\u7247\u4f5c\u4e3a\u6838\u5fc3\uff0cMPU-6050\u662f6\u8f74\u8fd0\u52a8\u5904\u7406\u4f20\u611f\u5668\u3002\u5b83\u96c6\u6210\u4e863\u8f74MEMS\u9640\u87ba\u4eea\uff0c3\u8f74MEMS\u52a0\u901f\u5ea6\u8ba1\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u6269\u5c55\u7684\u6570\u5b57\u8fd0\u52a8\u5904\u7406\u5668DMP\u3002\u4f7f\u7528\u5b83\u5c31\u662f\u4e3a\u4e86\u5f97\u5230\u5f85\u6d4b\u7269\u4f53\uff08\u5982\u56db\u8f74\u98de\u884c\u5668\u3001\u5e73\u8861\u5c0f\u8f66\uff09x\u3001y\u3001z\u8f74\u7684\u503e\u89d2\uff08\u4fef\u4ef0\u89d2Pitch\u3001\u7ffb\u6eda\u89d2Roll\u3001\u504f\u822a\u89d2Yaw\uff09\u3002\u6211\u4eec\u901a\u8fc7I2C\u8bfb\u53d6MPU6050\u7684\u516d\u4e2a\u6570\u636e\uff08\u4e09\u8f74\u52a0\u901f\u5ea6AD\u503c\u3001\u4e09\u8f74\u89d2\u901f\u5ea6AD\u503c\uff09\u7ecf\u8fc7\u59ff\u6001\u878d\u5408\u540e\u5c31\u53ef\u4ee5\u5f97\u5230Pitch\u3001Roll\u3001Yaw\u89d2\u3002\u5229\u7528\u81ea\u5e26\u7684\u6570\u5b57\u8fd0\u52a8\u5904\u7406\u5668DMP\uff0c\u901a\u8fc7IIC\u63a5\u53e3\uff0c\u8f93\u51fa\u59ff\u6001\u89e3\u7b97\u540e\u7684\u6570\u636e\u3002\u5177\u6709\u4f53\u79ef\u5c0f\uff0c\u4f7f\u7528\u65b9\u4fbf\u7b49\u7279\u70b9\u3002\u6a21\u5757\u81ea\u5e262\u4e2a\u5b9a\u4f4d\u5b54\uff0c\u65b9\u4fbf\u4f60\u5c06\u6a21\u5757\u56fa\u5b9a\u5728\u5176\u4ed6\u8bbe\u5907\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2ampu6050.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 import machine import time import math # \u5b9a\u4e49\u52a0\u901f\u5ea6\u8ba1/\u9640\u87ba\u4eea\u4f20\u611f\u5668\u64cd\u4f5c\u7c7b class accel(): def __init__(self, scl, sda ,addr=0x68): \"\"\" \u521d\u59cb\u5316\u4f20\u611f\u5668 :param i2c: \u5df2\u521d\u59cb\u5316\u7684I2C\u603b\u7ebf\u5bf9\u8c61 :param addr: \u4f20\u611f\u5668I2C\u5730\u5740\uff08MPU6050\u9ed8\u8ba4\u4e3a0x68\uff09 \"\"\" self.iic = machine.SoftI2C(scl = machine.Pin(scl), sda = machine.Pin(sda), freq = 100000) # \u5b58\u50a8I2C\u603b\u7ebf\u5bf9\u8c61 self.addr = addr # \u5b58\u50a8\u8bbe\u5907\u5730\u5740 # \u521d\u59cb\u5316\u4f20\u611f\u5668\uff08\u9000\u51fa\u7761\u7720\u6a21\u5f0f\uff09 self.iic.start() # \u542f\u52a8I2C\u901a\u4fe1 # \u5411\u7535\u6e90\u7ba1\u7406\u5bc4\u5b58\u5668\uff080x6B\uff09\u5199\u51650\u5524\u9192\u8bbe\u5907 # 107\u662f\u5bc4\u5b58\u5668\u5730\u5740\u7684\u5341\u8fdb\u5236\u8868\u793a\uff080x6B\u7684\u5341\u8fdb\u5236\u662f107\uff09 # bytearray([107, 0])\u8868\u793a\uff1a\u5411\u5bc4\u5b58\u56680x6B\u5199\u51650x00 self.iic.writeto(self.addr, bytearray([107, 0])) self.iic.stop() # \u7ed3\u675fI2C\u901a\u4fe1 def get_raw_values(self): \"\"\" \u83b7\u53d6\u539f\u59cb\u5b57\u8282\u6570\u636e\uff0814\u5b57\u8282\uff09 \"\"\" self.iic.start() # \u4ece\u5bc4\u5b58\u56680x3B\u5f00\u59cb\u8fde\u7eed\u8bfb\u53d614\u5b57\u8282\u6570\u636e\uff1a # \u52a0\u901f\u5ea6\u8ba1X/Y/Z\uff08\u54042\u5b57\u8282\uff09 + \u6e29\u5ea6\uff082\u5b57\u8282\uff09 + \u9640\u87ba\u4eeaX/Y/Z\uff08\u54042\u5b57\u8282\uff09 a = self.iic.readfrom_mem(self.addr, 0x3B, 14) self.iic.stop() return a # \u8fd4\u56de\u5b57\u8282\u6570\u7ec4\u683c\u5f0f\u7684\u539f\u59cb\u6570\u636e def get_ints(self): \"\"\" \u5c06\u539f\u59cb\u5b57\u8282\u8f6c\u6362\u4e3a\u6574\u6570\u5217\u8868\uff08\u8c03\u8bd5\u7528\uff09 \"\"\" b = self.get_raw_values() c = [] for i in b: c.append(i) # \u5c06\u5b57\u8282\u9010\u4e2a\u8f6c\u6362\u4e3a0-255\u7684\u6574\u6570 return c # \u793a\u4f8b\u8fd4\u56de\uff1a[255, 128, ...]\uff0814\u4e2a\u5143\u7d20\uff09 def bytes_toint(self, firstbyte, secondbyte): \"\"\" \u5c06\u4e24\u4e2a\u5b57\u8282\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570 \uff08\u5904\u7406\u4e8c\u8fdb\u5236\u8865\u7801\u683c\u5f0f\uff09 :param firstbyte: \u9ad8\u4f4d\u5b57\u8282 :param secondbyte: \u4f4e\u4f4d\u5b57\u8282 :return: \u6709\u7b26\u53f7\u6574\u6570\uff08\u8303\u56f4-32768~32767\uff09 \"\"\" # \u5224\u65ad\u662f\u5426\u4e3a\u8d1f\u6570\uff08\u6700\u9ad8\u4f4d\u4e3a1\uff09 if not firstbyte & 0x80: # \u6b63\u6570\u76f4\u63a5\u62fc\u63a5 return (firstbyte << 8) | secondbyte else: # \u8d1f\u6570\u5904\u7406\uff08\u8865\u7801\u8f6c\u6362\uff09 # 1. \u6309\u4f4d\u53d6\u53cd\u9ad8\u4f4d\u5b57\u8282\uff08^255\u7b49\u4ef7\u4e8e~\u64cd\u4f5c\uff09 # 2. \u6309\u4f4d\u53d6\u53cd\u4f4e\u4f4d\u5b57\u8282\u5e76+1 # 3. \u7ec4\u5408\u7ed3\u679c\u540e\u53d6\u8d1f\u6570 return - (((firstbyte ^ 255) << 8) | (secondbyte ^ 255) + 1) def get_values(self): \"\"\" \u83b7\u53d6\u89e3\u6790\u540e\u7684\u4f20\u611f\u5668\u6570\u503c\u5b57\u5178 \"\"\" raw_ints = self.get_raw_values() # \u83b7\u53d6\u539f\u59cb\u5b57\u8282\u6570\u636e vals = {} # \u521b\u5efa\u5b58\u50a8\u89e3\u6790\u503c\u7684\u5b57\u5178 # \u89e3\u6790\u52a0\u901f\u5ea6\u8ba1\u6570\u636e\uff08X/Y/Z\u8f74\uff09 # \u6bcf\u4e2a\u8f74\u5360\u75282\u4e2a\u5b57\u8282\uff08\u9ad8\u4f4d\u5728\u524d\uff09 vals[\"AcX\"] = self.bytes_toint(raw_ints[0], raw_ints[1]) # \u52a0\u901f\u5ea6X\u8f74 vals[\"AcY\"] = self.bytes_toint(raw_ints[2], raw_ints[3]) # \u52a0\u901f\u5ea6Y\u8f74 vals[\"AcZ\"] = self.bytes_toint(raw_ints[4], raw_ints[5]) # \u52a0\u901f\u5ea6Z\u8f74 # \u89e3\u6790\u6e29\u5ea6\u6570\u636e\uff08\u516c\u5f0f\u6765\u81eaMPU6050\u624b\u518c\uff09 # \u539f\u59cb\u503c\u8303\u56f4\uff1a-40\u00b0C ~ +85\u00b0C vals[\"Tmp\"] = self.bytes_toint(raw_ints[6], raw_ints[7]) / 340.00 + 36.53 # \u89e3\u6790\u9640\u87ba\u4eea\u6570\u636e\uff08X/Y/Z\u8f74\uff09 vals[\"GyX\"] = self.bytes_toint(raw_ints[8], raw_ints[9]) # \u9640\u87ba\u4eeaX\u8f74 vals[\"GyY\"] = self.bytes_toint(raw_ints[10], raw_ints[11]) # \u9640\u87ba\u4eeaY\u8f74 vals[\"GyZ\"] = self.bytes_toint(raw_ints[12], raw_ints[13]) # \u9640\u87ba\u4eeaZ\u8f74 return vals # \u8fd4\u56de\u5b57\u5178\u683c\u5f0f\u7684\u539f\u59cb\u6574\u6570\u503c # \u6ce8\u610f\uff1a\u8fd4\u56de\u7684\u662f\u672a\u6821\u51c6\u7684\u539f\u59cb\u6570\u636e\uff01 # \u52a0\u901f\u5ea6\u8ba1\u5355\u4f4d\uff1aLSB\uff08\u9700\u8f6c\u6362\u4e3ag\uff0c\u9ed8\u8ba4\u00b12g\u91cf\u7a0b\u65f6 16384 LSB/g\uff09 # \u9640\u87ba\u4eea\u5355\u4f4d\uff1aLSB\uff08\u9700\u8f6c\u6362\u4e3a\u00b0/s\uff0c\u9ed8\u8ba4\u00b1250\u00b0/s\u91cf\u7a0b\u65f6 131 LSB/\u00b0/s\uff09 # \u6e29\u5ea6\u5355\u4f4d\uff1a\u6444\u6c0f\u5ea6 def val_test(self): \"\"\" \u6301\u7eed\u6d4b\u8bd5\u4f20\u611f\u5668\u6570\u636e\uff08\u4ec5\u7528\u4e8e\u6d4b\u8bd5\uff01\uff09 \u8b66\u544a\uff1a\u9ad8\u9891\u8bfb\u53d6\u53ef\u80fd\u5bfc\u81f4I2C\u603b\u7ebf\u5d29\u6e83 \"\"\" from time import sleep while True: print(self.get_values()) # \u6253\u5370\u5f53\u524d\u4f20\u611f\u5668\u503c sleep(0.05) # 50ms\u95f4\u9694\uff08\u7ea620Hz\u91c7\u6837\u7387\uff09 # \u52a0\u901f\u5ea6\u8ba1\u8ba1\u7b97\u89d2\u5ea6\uff08\u5feb\u901f\u54cd\u5e94\u4f46\u53d7\u8fd0\u52a8\u5f71\u54cd\uff09 pitch_acc = math.atan2(ay, math.sqrt(ax**2 + az**2)) * 180/math.pi roll_acc = math.atan2(-ax, math.sqrt(ay**2 + az**2)) * 180/math.pi # \u9640\u87ba\u4eea\u79ef\u5206\u89d2\u5ea6\uff08\u957f\u671f\u7a33\u5b9a\u4f46\u4f1a\u6f02\u79fb\uff09 pitch_gyro = self.pitch + gx * dt roll_gyro = self.roll + gy * dt # \u4e92\u8865\u6ee4\u6ce2\u878d\u5408\uff08\u6743\u91cd\u7cfb\u6570alpha\uff09 alpha = 0.02 # \u52a0\u901f\u5ea6\u8ba1\u6743\u91cd2% self.pitch = (1-alpha)*pitch_gyro + alpha*pitch_acc self.roll = (1-alpha)*roll_gyro + alpha*roll_acc # \u89d2\u5ea6\u5f52\u4e00\u5316 self.pitch = self._normalize_angle(self.pitch) self.roll = self._normalize_angle(self.roll) return (self.pitch, self.roll) def reset_angles(self): \"\"\" \u91cd\u7f6e\u59ff\u6001\u89d2\u5f52\u96f6\uff08\u7528\u4e8e\u91cd\u65b0\u5b9a\u4f4d\u57fa\u51c6\uff09 \"\"\" self.pitch = 0.0 self.roll = 0.0","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/MPU6050%20%E9%99%80%E8%9E%BA%E4%BB%AA%E6%A8%A1%E5%9D%97/#_2","text":"\u4ee3\u7801\u5982\u4e0b\uff1a import machine import time import math from libs.mpu6050 import accel # \u521d\u59cb\u5316\u5bf9\u8c61 accel = accel(scl=22,sda=21) while True: temperature = accel.get_values()['Tmp'] # \u83b7\u53d6\u6e29\u5ea6\u503c Acx = accel.get_values()['AcX'] # X\u8f74\u52a0\u901f\u5ea6 Acy = accel.get_values()['AcY'] # Y\u8f74\u52a0\u901f\u5ea6 Acz = accel.get_values()['AcZ'] # Y\u8f74\u52a0\u901f\u5ea6 gyx = accel.get_values()['GyX'] # X\u8f74\u89d2\u52a0\u901f\u5ea6 gyy = accel.get_values()['GyY'] # Y\u8f74\u89d2\u52a0\u901f\u5ea6 gyz = accel.get_values()['GyZ'] # Z\u8f74\u89d2\u52a0\u901f\u5ea6 # print(accel.get_values()) # \u539f\u59cb\u6570\u636e print(\"\u6e29\u5ea6: %.1f\u2103\" % temperature) print(f\"X\u8f74\u52a0\u901f\u5ea6\uff1a%d\\t\" % Acx, end='') print(f\"Y\u8f74\u52a0\u901f\u5ea6\uff1a%d\\t\" % Acy, end='') print(f\"Z\u8f74\u52a0\u901f\u5ea6\uff1a%d\" % Acz) print(f\"X\u8f74\u89d2\u52a0\u901f\u5ea6\uff1a%d\\t\" % gyx, end='') print(f\"Y\u8f74\u89d2\u52a0\u901f\u5ea6\uff1a%d\\t\" % gyy, end='') print(f\"Z\u8f74\u89d2\u52a0\u901f\u5ea6\uff1a%d\\t\" % gyz) print('-'*45) time.sleep_ms(300)","title":"\u5b9e\u9a8c\u4e00\uff1a\u8bfb\u53d6\u9640\u87ba\u4eea\u7684\u6570\u503c"},{"location":"MicroPython/NFC%E6%84%9F%E5%BA%94%E8%AF%BB%E5%86%99%E5%8D%A1%E6%A8%A1%E5%9D%97/","text":"MNFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SDA 5 4 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SCK 18 5 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MOSI 23 6 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MISO 19 7 \u675c\u90a6\u7ebf 6 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SDA 5 2 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SCK 18 3 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MOSI 23 4 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MISO 19 5 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - RST 4 NFC\u611f\u5e94\u8bfb\u5199\u6a21\u5757\u4ecb\u7ecd NFC\u611f\u5e94\u8bfb\u5199\u6a21\u5757\u4e00\u822c\u57fa\u4e8e\u5c04\u9891\u611f\u5e94\u539f\u7406\uff0c\u5f53\u5e26\u6709\u5bf9\u5e94\u8bc6\u522b\u4ecb\u8d28\uff08\u5982 RFID \u6807\u7b7e\u3001NFC \u6807\u7b7e\u7b49\uff09\u7684\u7269\u4f53\u8fdb\u5165\u5230\u5176\u6709\u6548\u611f\u5e94\u8303\u56f4\uff08\u611f\u5e94\u8ddd\u79bb\u6839\u636e\u6a21\u5757\u7c7b\u578b\u548c\u529f\u7387\u6709\u6240\u4e0d\u540c\uff0c\u4ece\u51e0\u5398\u7c73\u5230\u6570\u7c73\u4e0d\u7b49\uff09\u5185\u65f6\uff0c\u80fd\u81ea\u52a8\u68c0\u6d4b\u8bc6\u522b\u5230\u8be5\u7269\u4f53\uff0c\u89e6\u53d1\u540e\u7eed\u7684\u6570\u636e\u4ea4\u4e92\u64cd\u4f5c\uff0c\u5e38\u7528\u4e8e\u81ea\u52a8\u95e8\u7981\u7cfb\u7edf\uff0c\u5f53\u4eba\u5458\u643a\u5e26\u6388\u6743\u7684\u611f\u5e94\u5361\u7247\u9760\u8fd1\u8bfb\u5361\u5668\u4e00\u5b9a\u8ddd\u79bb\u65f6\uff0c\u95e8\u7981\u81ea\u52a8\u6253\u5f00\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2ampu6050.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import Pin, SPI from os import uname emptyRecv = b\"\" class MFRC522: GAIN_REG = 0x26 MAX_GAIN = 0x07 OK = 0 NOTAGERR = 1 ERR = 2 REQIDL = 0x26 REQALL = 0x52 AUTHENT1A = 0x60 AUTHENT1B = 0x61 def __init__(self, spi=None, gpioRst=None, gpioCs=None): if gpioRst is not None: self.rst = Pin(gpioRst, Pin.OUT) else: self.rst = None assert(gpioCs is not None, \"Needs gpioCs\") # TODO fails without cableSelect if gpioCs is not None: self.cs = Pin(gpioCs, Pin.OUT) else: self.cs = None # TODO CH rationalise which of these are referenced, which can be identical self.regBuf = bytearray(4) self.blockWriteBuf = bytearray(18) self.authBuf = bytearray(12) self.wregBuf = bytearray(2) self.rregBuf = bytearray(1) self.recvBuf = bytearray(16) self.recvMv = memoryview(self.recvBuf) if self.rst is not None: self.rst.value(0) if self.cs is not None: self.cs.value(1) if spi is not None: self.spi = spi else: sck = Pin(14, Pin.OUT) mosi = Pin(13, Pin.OUT) miso = Pin(12, Pin.IN) if uname()[0] == 'WiPy': self.spi = SPI(0) self.spi.init(SPI.MASTER, baudrate=1000000, pins=(sck, mosi, miso)) elif uname()[0] == 'esp8266': # TODO update to match https://github.com/cefn/avatap/blob/master/python/host/cockle.py #prepareHost() self.spi = SPI(baudrate=100000, polarity=0, phase=0, sck=sck, mosi=mosi, miso=miso) self.spi.init() else: raise RuntimeError(\"Unsupported platform\") if self.rst is not None: self.rst.value(1) self.init() def _wreg(self, reg, val): if self.cs is not None: self.cs.value(0) buf = self.wregBuf buf[0]=0xff & ((reg << 1) & 0x7e) buf[1]=0xff & val self.spi.write(buf) if self.cs is not None: self.cs.value(1) def _rreg(self, reg): if self.cs is not None: self.cs.value(0) buf = self.rregBuf buf[0]=0xff & (((reg << 1) & 0x7e) | 0x80) self.spi.write(buf) val = self.spi.read(1) if self.cs is not None: self.cs.value(1) return val[0] def _sflags(self, reg, mask): self._wreg(reg, self._rreg(reg) | mask) def _cflags(self, reg, mask): self._wreg(reg, self._rreg(reg) & (~mask)) def _tocard(self, cmd, send, into=None): recv = emptyRecv bits = irq_en = wait_irq = n = 0 stat = self.ERR if cmd == 0x0E: irq_en = 0x12 wait_irq = 0x10 elif cmd == 0x0C: irq_en = 0x77 wait_irq = 0x30 self._wreg(0x02, irq_en | 0x80) self._cflags(0x04, 0x80) self._sflags(0x0A, 0x80) self._wreg(0x01, 0x00) for c in send: self._wreg(0x09, c) self._wreg(0x01, cmd) if cmd == 0x0C: self._sflags(0x0D, 0x80) i = 2000 while True: n = self._rreg(0x04) i -= 1 if ~((i != 0) and ~(n & 0x01) and ~(n & wait_irq)): break self._cflags(0x0D, 0x80) if i: if (self._rreg(0x06) & 0x1B) == 0x00: stat = self.OK if n & irq_en & 0x01: stat = self.NOTAGERR elif cmd == 0x0C: n = self._rreg(0x0A) lbits = self._rreg(0x0C) & 0x07 if lbits != 0: bits = (n - 1) * 8 + lbits else: bits = n * 8 if n == 0: n = 1 elif n > 16: n = 16 if into is None: recv = self.recvBuf else: recv = into pos = 0 while pos < n: recv[pos] = self._rreg(0x09) pos += 1 if into is None: recv = self.recvMv[:n] else: recv = into else: stat = self.ERR return stat, recv, bits def _assign_crc(self, data, count): self._cflags(0x05, 0x04) self._sflags(0x0A, 0x80) dataPos = 0 while dataPos < count: self._wreg(0x09, data[dataPos]) dataPos += 1 self._wreg(0x01, 0x03) i = 0xFF while True: n = self._rreg(0x05) i -= 1 if not ((i != 0) and not (n & 0x04)): break data[count] = self._rreg(0x22) data[count + 1] = self._rreg(0x21) def init(self): self.reset() self._wreg(0x2A, 0x8D) self._wreg(0x2B, 0x3E) self._wreg(0x2D, 30) self._wreg(0x2C, 0) self._wreg(0x15, 0x40) self._wreg(0x11, 0x3D) self.set_gain(self.MAX_GAIN) self.antenna_on() def reset(self): self._wreg(0x01, 0x0F) def antenna_on(self, on=True): if on and ~(self._rreg(0x14) & 0x03): self._sflags(0x14, 0x03) else: self._cflags(0x14, 0x03) def request(self, mode): self._wreg(0x0D, 0x07) (stat, recv, bits) = self._tocard(0x0C, [mode]) if (stat != self.OK) | (bits != 0x10): stat = self.ERR return stat, bits def anticoll(self): ser_chk = 0 ser = [0x93, 0x20] self._wreg(0x0D, 0x00) (stat, recv, bits) = self._tocard(0x0C, ser) if stat == self.OK: if len(recv) == 5: for i in range(4): ser_chk = ser_chk ^ recv[i] if ser_chk != recv[4]: stat = self.ERR else: stat = self.ERR # CH Note bytearray allocation here return stat, bytearray(recv) def select_tag(self, ser): # TODO CH normalise all list manipulation to bytearray, avoid below allocation buf = bytearray(9) buf[0] = 0x93 buf[1] = 0x70 buf[2:7] = ser self._assign_crc(buf, 7) (stat, recv, bits) = self._tocard(0x0C, buf) return self.OK if (stat == self.OK) and (bits == 0x18) else self.ERR def auth(self, mode, addr, sect, ser): # TODO CH void ser[:4] implicit list allocation buf = self.authBuf buf[0]=mode # A or B buf[1]=addr # block buf[2:8]=sect # key bytes buf[8:12]=ser[:4] # 4 bytes of id return self._tocard(0x0E, buf)[0] # TODO this may well need to be implemented for vault to properly back out from a card session # TODO how, why, when is 'HaltA' needed? see https://github.com/cefn/micropython-mfrc522/issues/1 def halt_a(self): pass def stop_crypto1(self): self._cflags(0x08, 0x08) def set_gain(self, gain): assert gain <= self.MAX_GAIN # clear bits self._cflags(self.GAIN_REG, 0x07<< 4) # set bits according to gain self._sflags(self.GAIN_REG, gain << 4) def read(self, addr, into = None): buf = self.regBuf buf[0]=0x30 buf[1]=addr self._assign_crc(buf, 2) (stat, recv, _) = self._tocard(0x0C, buf, into=into) # TODO this logic probably wrong (should be 'into is None'?) if into is None: # superstitiously avoid returning read buffer memoryview # CH Note bytearray allocation here recv = bytearray(recv) return recv if stat == self.OK else None def write(self, addr, data): buf = self.regBuf buf[0] = 0xA0 buf[1] = addr self._assign_crc(buf, 2) (stat, recv, bits) = self._tocard(0x0C, buf) if not (stat == self.OK) or not (bits == 4) or not ((recv[0] & 0x0F) == 0x0A): stat = self.ERR else: buf = self.blockWriteBuf i = 0 while i < 16: buf[i] = data[i] # TODO CH eliminate this, accelerate it? i += 1 self._assign_crc(buf, 16) (stat, recv, bits) = self._tocard(0x0C, buf) if not (stat == self.OK) or not (bits == 4) or not ((recv[0] & 0x0F) == 0x0A): stat = self.ERR return stat \u5b9e\u9a8c\u4e00\uff1aNFC\u8bfb\u53d6\u5361\u5e76\u63a7\u5236LED\u706f \u4ee3\u7801\u5982\u4e0b\uff1a ''' NFC\u8bfb\u53d6\u5361\u5e76\u63a7\u5236LED\u706f \u8bfb\u53d6\u5361\u7684ID\u53f7 \u5e76\u6307\u5b9a\u5361\u63a7\u5236\u706f\u4eae5\u79d2 ''' from libs.mfrc522 import MFRC522 from machine import Pin from machine import SPI import time spi = SPI(2,baudrate=2500000,polarity=0,phase=0) spi.init() rdr = MFRC522(spi=spi,gpioRst=4,gpioCs=5) led = Pin(2,Pin.OUT) print('\u653e\u5165\u5361\u7247') while True: (stat,tag_type) = rdr.request(rdr.REQIDL) led.value(0) if stat == rdr.OK: (stat,raw_uid) = rdr.anticoll() if stat ==rdr.OK: card_id =\"uid:0x%02x%02x%02x%02x\" % (raw_uid[0],raw_uid[1],raw_uid[2],raw_uid[3]) print(card_id) if card_id == 'uid:0x14d464a7': led.value(1) time.sleep(5) led.value(0) else: led.value(0)","title":"50.NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757"},{"location":"MicroPython/NFC%E6%84%9F%E5%BA%94%E8%AF%BB%E5%86%99%E5%8D%A1%E6%A8%A1%E5%9D%97/#mnfc","text":"","title":"MNFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757"},{"location":"MicroPython/NFC%E6%84%9F%E5%BA%94%E8%AF%BB%E5%86%99%E5%8D%A1%E6%A8%A1%E5%9D%97/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SDA 5 4 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SCK 18 5 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MOSI 23 6 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MISO 19 7 \u675c\u90a6\u7ebf 6 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SDA 5 2 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SCK 18 3 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MOSI 23 4 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - MISO 19 5 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - RST 4 NFC\u611f\u5e94\u8bfb\u5199\u6a21\u5757\u4ecb\u7ecd NFC\u611f\u5e94\u8bfb\u5199\u6a21\u5757\u4e00\u822c\u57fa\u4e8e\u5c04\u9891\u611f\u5e94\u539f\u7406\uff0c\u5f53\u5e26\u6709\u5bf9\u5e94\u8bc6\u522b\u4ecb\u8d28\uff08\u5982 RFID \u6807\u7b7e\u3001NFC \u6807\u7b7e\u7b49\uff09\u7684\u7269\u4f53\u8fdb\u5165\u5230\u5176\u6709\u6548\u611f\u5e94\u8303\u56f4\uff08\u611f\u5e94\u8ddd\u79bb\u6839\u636e\u6a21\u5757\u7c7b\u578b\u548c\u529f\u7387\u6709\u6240\u4e0d\u540c\uff0c\u4ece\u51e0\u5398\u7c73\u5230\u6570\u7c73\u4e0d\u7b49\uff09\u5185\u65f6\uff0c\u80fd\u81ea\u52a8\u68c0\u6d4b\u8bc6\u522b\u5230\u8be5\u7269\u4f53\uff0c\u89e6\u53d1\u540e\u7eed\u7684\u6570\u636e\u4ea4\u4e92\u64cd\u4f5c\uff0c\u5e38\u7528\u4e8e\u81ea\u52a8\u95e8\u7981\u7cfb\u7edf\uff0c\u5f53\u4eba\u5458\u643a\u5e26\u6388\u6743\u7684\u611f\u5e94\u5361\u7247\u9760\u8fd1\u8bfb\u5361\u5668\u4e00\u5b9a\u8ddd\u79bb\u65f6\uff0c\u95e8\u7981\u81ea\u52a8\u6253\u5f00\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2ampu6050.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import Pin, SPI from os import uname emptyRecv = b\"\" class MFRC522: GAIN_REG = 0x26 MAX_GAIN = 0x07 OK = 0 NOTAGERR = 1 ERR = 2 REQIDL = 0x26 REQALL = 0x52 AUTHENT1A = 0x60 AUTHENT1B = 0x61 def __init__(self, spi=None, gpioRst=None, gpioCs=None): if gpioRst is not None: self.rst = Pin(gpioRst, Pin.OUT) else: self.rst = None assert(gpioCs is not None, \"Needs gpioCs\") # TODO fails without cableSelect if gpioCs is not None: self.cs = Pin(gpioCs, Pin.OUT) else: self.cs = None # TODO CH rationalise which of these are referenced, which can be identical self.regBuf = bytearray(4) self.blockWriteBuf = bytearray(18) self.authBuf = bytearray(12) self.wregBuf = bytearray(2) self.rregBuf = bytearray(1) self.recvBuf = bytearray(16) self.recvMv = memoryview(self.recvBuf) if self.rst is not None: self.rst.value(0) if self.cs is not None: self.cs.value(1) if spi is not None: self.spi = spi else: sck = Pin(14, Pin.OUT) mosi = Pin(13, Pin.OUT) miso = Pin(12, Pin.IN) if uname()[0] == 'WiPy': self.spi = SPI(0) self.spi.init(SPI.MASTER, baudrate=1000000, pins=(sck, mosi, miso)) elif uname()[0] == 'esp8266': # TODO update to match https://github.com/cefn/avatap/blob/master/python/host/cockle.py #prepareHost() self.spi = SPI(baudrate=100000, polarity=0, phase=0, sck=sck, mosi=mosi, miso=miso) self.spi.init() else: raise RuntimeError(\"Unsupported platform\") if self.rst is not None: self.rst.value(1) self.init() def _wreg(self, reg, val): if self.cs is not None: self.cs.value(0) buf = self.wregBuf buf[0]=0xff & ((reg << 1) & 0x7e) buf[1]=0xff & val self.spi.write(buf) if self.cs is not None: self.cs.value(1) def _rreg(self, reg): if self.cs is not None: self.cs.value(0) buf = self.rregBuf buf[0]=0xff & (((reg << 1) & 0x7e) | 0x80) self.spi.write(buf) val = self.spi.read(1) if self.cs is not None: self.cs.value(1) return val[0] def _sflags(self, reg, mask): self._wreg(reg, self._rreg(reg) | mask) def _cflags(self, reg, mask): self._wreg(reg, self._rreg(reg) & (~mask)) def _tocard(self, cmd, send, into=None): recv = emptyRecv bits = irq_en = wait_irq = n = 0 stat = self.ERR if cmd == 0x0E: irq_en = 0x12 wait_irq = 0x10 elif cmd == 0x0C: irq_en = 0x77 wait_irq = 0x30 self._wreg(0x02, irq_en | 0x80) self._cflags(0x04, 0x80) self._sflags(0x0A, 0x80) self._wreg(0x01, 0x00) for c in send: self._wreg(0x09, c) self._wreg(0x01, cmd) if cmd == 0x0C: self._sflags(0x0D, 0x80) i = 2000 while True: n = self._rreg(0x04) i -= 1 if ~((i != 0) and ~(n & 0x01) and ~(n & wait_irq)): break self._cflags(0x0D, 0x80) if i: if (self._rreg(0x06) & 0x1B) == 0x00: stat = self.OK if n & irq_en & 0x01: stat = self.NOTAGERR elif cmd == 0x0C: n = self._rreg(0x0A) lbits = self._rreg(0x0C) & 0x07 if lbits != 0: bits = (n - 1) * 8 + lbits else: bits = n * 8 if n == 0: n = 1 elif n > 16: n = 16 if into is None: recv = self.recvBuf else: recv = into pos = 0 while pos < n: recv[pos] = self._rreg(0x09) pos += 1 if into is None: recv = self.recvMv[:n] else: recv = into else: stat = self.ERR return stat, recv, bits def _assign_crc(self, data, count): self._cflags(0x05, 0x04) self._sflags(0x0A, 0x80) dataPos = 0 while dataPos < count: self._wreg(0x09, data[dataPos]) dataPos += 1 self._wreg(0x01, 0x03) i = 0xFF while True: n = self._rreg(0x05) i -= 1 if not ((i != 0) and not (n & 0x04)): break data[count] = self._rreg(0x22) data[count + 1] = self._rreg(0x21) def init(self): self.reset() self._wreg(0x2A, 0x8D) self._wreg(0x2B, 0x3E) self._wreg(0x2D, 30) self._wreg(0x2C, 0) self._wreg(0x15, 0x40) self._wreg(0x11, 0x3D) self.set_gain(self.MAX_GAIN) self.antenna_on() def reset(self): self._wreg(0x01, 0x0F) def antenna_on(self, on=True): if on and ~(self._rreg(0x14) & 0x03): self._sflags(0x14, 0x03) else: self._cflags(0x14, 0x03) def request(self, mode): self._wreg(0x0D, 0x07) (stat, recv, bits) = self._tocard(0x0C, [mode]) if (stat != self.OK) | (bits != 0x10): stat = self.ERR return stat, bits def anticoll(self): ser_chk = 0 ser = [0x93, 0x20] self._wreg(0x0D, 0x00) (stat, recv, bits) = self._tocard(0x0C, ser) if stat == self.OK: if len(recv) == 5: for i in range(4): ser_chk = ser_chk ^ recv[i] if ser_chk != recv[4]: stat = self.ERR else: stat = self.ERR # CH Note bytearray allocation here return stat, bytearray(recv) def select_tag(self, ser): # TODO CH normalise all list manipulation to bytearray, avoid below allocation buf = bytearray(9) buf[0] = 0x93 buf[1] = 0x70 buf[2:7] = ser self._assign_crc(buf, 7) (stat, recv, bits) = self._tocard(0x0C, buf) return self.OK if (stat == self.OK) and (bits == 0x18) else self.ERR def auth(self, mode, addr, sect, ser): # TODO CH void ser[:4] implicit list allocation buf = self.authBuf buf[0]=mode # A or B buf[1]=addr # block buf[2:8]=sect # key bytes buf[8:12]=ser[:4] # 4 bytes of id return self._tocard(0x0E, buf)[0] # TODO this may well need to be implemented for vault to properly back out from a card session # TODO how, why, when is 'HaltA' needed? see https://github.com/cefn/micropython-mfrc522/issues/1 def halt_a(self): pass def stop_crypto1(self): self._cflags(0x08, 0x08) def set_gain(self, gain): assert gain <= self.MAX_GAIN # clear bits self._cflags(self.GAIN_REG, 0x07<< 4) # set bits according to gain self._sflags(self.GAIN_REG, gain << 4) def read(self, addr, into = None): buf = self.regBuf buf[0]=0x30 buf[1]=addr self._assign_crc(buf, 2) (stat, recv, _) = self._tocard(0x0C, buf, into=into) # TODO this logic probably wrong (should be 'into is None'?) if into is None: # superstitiously avoid returning read buffer memoryview # CH Note bytearray allocation here recv = bytearray(recv) return recv if stat == self.OK else None def write(self, addr, data): buf = self.regBuf buf[0] = 0xA0 buf[1] = addr self._assign_crc(buf, 2) (stat, recv, bits) = self._tocard(0x0C, buf) if not (stat == self.OK) or not (bits == 4) or not ((recv[0] & 0x0F) == 0x0A): stat = self.ERR else: buf = self.blockWriteBuf i = 0 while i < 16: buf[i] = data[i] # TODO CH eliminate this, accelerate it? i += 1 self._assign_crc(buf, 16) (stat, recv, bits) = self._tocard(0x0C, buf) if not (stat == self.OK) or not (bits == 4) or not ((recv[0] & 0x0F) == 0x0A): stat = self.ERR return stat","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/NFC%E6%84%9F%E5%BA%94%E8%AF%BB%E5%86%99%E5%8D%A1%E6%A8%A1%E5%9D%97/#nfcled","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' NFC\u8bfb\u53d6\u5361\u5e76\u63a7\u5236LED\u706f \u8bfb\u53d6\u5361\u7684ID\u53f7 \u5e76\u6307\u5b9a\u5361\u63a7\u5236\u706f\u4eae5\u79d2 ''' from libs.mfrc522 import MFRC522 from machine import Pin from machine import SPI import time spi = SPI(2,baudrate=2500000,polarity=0,phase=0) spi.init() rdr = MFRC522(spi=spi,gpioRst=4,gpioCs=5) led = Pin(2,Pin.OUT) print('\u653e\u5165\u5361\u7247') while True: (stat,tag_type) = rdr.request(rdr.REQIDL) led.value(0) if stat == rdr.OK: (stat,raw_uid) = rdr.anticoll() if stat ==rdr.OK: card_id =\"uid:0x%02x%02x%02x%02x\" % (raw_uid[0],raw_uid[1],raw_uid[2],raw_uid[3]) print(card_id) if card_id == 'uid:0x14d464a7': led.value(1) time.sleep(5) led.value(0) else: led.value(0)","title":"\u5b9e\u9a8c\u4e00\uff1aNFC\u8bfb\u53d6\u5361\u5e76\u63a7\u5236LED\u706f"},{"location":"MicroPython/OLED%E6%98%BE%E7%A4%BA%E5%B1%8F/","text":"OLED\u6db2\u6676\u663e\u793a\u5c4f \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 OLED\u6db2\u6676\u663e\u793a\u5c4f 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 OLED\u6db2\u6676\u663e\u793a\u5c4f-SCL 22 2 OLED\u6db2\u6676\u663e\u793a\u5c4f-SDA 21 OLED\u663e\u793a\u5c4f\u4ecb\u7ecd OLED\u4e5f\u53eb\u6709\u673a\u53d1\u5149\u4e8c\u6781\u7ba1\uff0c\u53c8\u79f0\u4e3a\u6709\u673a\u7535\u6fc0\u5149\u663e\u793a\uff0cOLED\u5177\u6709\u81ea\u53d1\u5149\uff08\u4e0d\u9700\u8981\u80cc\u5149\uff09\uff0c\u5bf9\u6bd4\u5ea6\u9ad8\u3001\u8f7b\u8584\u3001\u53ef\u89c6\u89d2\u5927\u3001\u53cd\u5e94\u901f\u5ea6\u5feb\u7b49\u4f18\u70b9\u3002 SSD1306\u9a71\u52a8OLED\u663e\u793a\u5c4f SSD1306\u662f\u4e00\u6b3e\u7528\u4e8e\u9a71\u52a8\u5206\u8fa8\u7387\u4e3a128\u00d764 OLED\u7684\u663e\u793a\u9a71\u52a8\u82af\u7247\uff0c\u5185\u7f6e\u5bf9\u6bd4\u5ea6\u63a7\u5236\u3001\u663e\u793a RAM\u548c\u632f\u8361\u5668\uff0c\u51cf\u5c11\u4e86\u5916\u90e8\u7ec4\u4ef6\u548c\u80fd\u8017\uff0c\u5177\u6709256\u7ea7\u4eae\u5ea6\u63a7\u5236\uff0c\u8be5\u82af\u7247\u53ef\u4ee5\u4f7f\u7528IIC\u603b\u7ebf\u63a5\u53e3\u6216SPI\uff08\u4e32\u884c\u5916\u56f4\u63a5\u53e3\uff09\u4e0e\u5355\u7247\u673a\u8fdb\u884c\u8fde\u63a5\u901a\u8baf\u3002 I2C \u4e0e SPI \u533a\u522b I2C \u53ea\u9700\u4e24\u6839\u4fe1\u53f7\u7ebf\uff0c\u800c\u6807\u51c6 SPI \u81f3\u5c11\u56db\u6839\u4fe1\u53f7\uff0c\u5982\u679c\u6709\u591a\u4e2a\u4ece\u8bbe\u5907\uff0c\u4fe1\u53f7\u9700\u8981\u66f4\u591a\u3002\u4e00\u4e9b SPI \u53d8\u79cd\u867d\u7136\u53ea\u4f7f\u7528\u4e09\u6839\u7ebf\u2014\u2014 SCK\u3001CS \u548c\u53cc\u5411\u7684 MISO/MOSI\uff0c\u4f46 CS \u7ebf\u8fd8\u662f\u8981\u548c\u4ece\u8bbe\u5907\u4e00\u5bf9\u4e00\u6839\u3002\u53e6\u5916\uff0c\u5982\u679c SPI \u8981\u5b9e\u73b0\u591a\u4e3b\u8bbe\u5907\u7ed3\u6784\uff0c\u603b\u7ebf\u7cfb\u7edf\u9700\u989d\u5916\u7684\u903b\u8f91\u548c\u7ebf\u8def\u3002\u7528 I2C \u6784\u5efa\u7cfb\u7edf\u603b\u7ebf\u552f\u4e00\u7684\u95ee\u9898\u662f\u6709\u9650\u7684 7 \u4f4d\u5730\u5740\u7a7a\u95f4\uff0c\u4f46\u8fd9\u4e2a\u95ee\u9898\u65b0\u6807\u51c6\u5df2\u7ecf\u89e3\u51b3 --- \u4f7f\u7528 10 \u4f4d\u5730\u5740\u3002 \u5982\u679c\u5e94\u7528\u4e2d\u5fc5\u987b\u4f7f\u7528\u9ad8\u901f\u6570\u636e\u4f20\u8f93\uff0c\u90a3\u4e48 SPI \u662f\u5fc5\u7136\u7684\u9009\u62e9\u3002\u56e0\u4e3a SPI \u662f\u5168\u53cc\u5de5\uff0cIIC \u7684\u4e0d\u662f\u3002SPI \u6ca1\u6709\u5b9a\u4e49\u901f\u5ea6\u9650\u5236\uff0c\u4e00\u822c\u7684\u5b9e\u73b0\u901a\u5e38\u80fd\u8fbe\u5230\u751a\u81f3\u8d85\u8fc7 10Mbps\u3002IIC \u6700\u9ad8\u7684\u901f\u5ea6\u4e5f\u5c31\u5feb\u901f+\u6a21\u5f0f\uff081Mbps\uff09\u548c\u9ad8\u901f\u6a21\u5f0f\uff083.4Mbps\uff09\uff0c\u540e\u9762\u7684\u6a21\u5f0f\u8fd8\u9700\u8981\u989d\u5916\u7684 I/O \u7f13\u51b2\u533a\uff0c\u8fd8\u5e76\u4e0d\u662f\u603b\u662f\u5bb9\u6613\u5b9e\u73b0\u7684\u3002SPI \u9002\u5408\u6570\u636e\u6d41\u5e94\u7528\uff0c\u800c IIC \u66f4\u9002\u5408\u201c\u5b57\u8282\u8bbe\u5907\u201d\u7684\u591a\u4e3b\u8bbe\u5907\u5e94\u7528\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2assd1306.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 # MicroPython SSD1306 OLED driver, I2C and SPI interfaces Modified by Bigrich-Luo import time import framebuf # register definitions SET_CONTRAST = const(0x81) SET_ENTIRE_ON = const(0xa4) SET_NORM_INV = const(0xa6) SET_DISP = const(0xae) SET_MEM_ADDR = const(0x20) SET_COL_ADDR = const(0x21) SET_PAGE_ADDR = const(0x22) SET_DISP_START_LINE = const(0x40) SET_SEG_REMAP = const(0xa0) SET_MUX_RATIO = const(0xa8) SET_COM_OUT_DIR = const(0xc0) SET_DISP_OFFSET = const(0xd3) SET_COM_PIN_CFG = const(0xda) SET_DISP_CLK_DIV = const(0xd5) SET_PRECHARGE = const(0xd9) SET_VCOM_DESEL = const(0xdb) SET_CHARGE_PUMP = const(0x8d) class SSD1306: def __init__(self, width, height, external_vcc): self.width = width self.height = height self.external_vcc = external_vcc self.pages = self.height // 8 # Note the subclass must initialize self.framebuf to a framebuffer. # This is necessary because the underlying data buffer is different # between I2C and SPI implementations (I2C needs an extra byte). self.poweron() self.init_display() def init_display(self): for cmd in ( SET_DISP | 0x00, # off # address setting SET_MEM_ADDR, 0x00, # horizontal # resolution and layout SET_DISP_START_LINE | 0x00, SET_SEG_REMAP | 0x01, # column addr 127 mapped to SEG0 SET_MUX_RATIO, self.height - 1, SET_COM_OUT_DIR | 0x08, # scan from COM[N] to COM0 SET_DISP_OFFSET, 0x00, SET_COM_PIN_CFG, 0x02 if self.height == 32 else 0x12, # timing and driving scheme SET_DISP_CLK_DIV, 0x80, SET_PRECHARGE, 0x22 if self.external_vcc else 0xf1, SET_VCOM_DESEL, 0x30, # 0.83*Vcc # display SET_CONTRAST, 0xff, # maximum SET_ENTIRE_ON, # output follows RAM contents SET_NORM_INV, # not inverted # charge pump SET_CHARGE_PUMP, 0x10 if self.external_vcc else 0x14, SET_DISP | 0x01): # on self.write_cmd(cmd) self.fill(0) self.show() def poweroff(self): self.write_cmd(SET_DISP | 0x00) def contrast(self, contrast): self.write_cmd(SET_CONTRAST) self.write_cmd(contrast) def invert(self, invert): self.write_cmd(SET_NORM_INV | (invert & 1)) def show(self): x0 = 0 x1 = self.width - 1 if self.width == 64: # displays with width of 64 pixels are shifted by 32 x0 += 32 x1 += 32 self.write_cmd(SET_COL_ADDR) self.write_cmd(x0) self.write_cmd(x1) self.write_cmd(SET_PAGE_ADDR) self.write_cmd(0) self.write_cmd(self.pages - 1) self.write_framebuf() def fill(self, col=0): self.framebuf.fill(col) def pixel(self, x, y, col=1): self.framebuf.pixel(x, y, col) def scroll(self, dx, dy): self.framebuf.scroll(dx, dy) def text(self, string, x, y, col=1): self.framebuf.text(string, x, y, col) class SSD1306_I2C(SSD1306): def __init__(self, width, height, i2c, addr=0x3c, external_vcc=False): self.i2c = i2c self.addr = addr self.temp = bytearray(2) # Add an extra byte to the data buffer to hold an I2C data/command byte # to use hardware-compatible I2C transactions. A memoryview of the # buffer is used to mask this byte from the framebuffer operations # (without a major memory hit as memoryview doesn't copy to a separate # buffer). self.buffer = bytearray(((height // 8) * width) + 1) self.buffer[0] = 0x40 # Set first byte of data buffer to Co=0, D/C=1 self.framebuf = framebuf.FrameBuffer1(memoryview(self.buffer)[1:], width, height) super().__init__(width, height, external_vcc) def write_cmd(self, cmd): self.temp[0] = 0x80 # Co=1, D/C#=0 self.temp[1] = cmd self.i2c.writeto(self.addr, self.temp) def write_framebuf(self): # Blast out the frame buffer using a single I2C transaction to support # hardware I2C interfaces. self.i2c.writeto(self.addr, self.buffer) def display_zh_character(self,character, x, y): character_dict = {} num_list = self.character_dict[character] for i in range(16): left = bin(num_list[i]).replace('0b', '') right = bin(num_list[i + 16]).replace('0b', '') # \u8865 0 while len(left) < 8: left = '0' + left while len(right) < 8: right = '0' + right num_binary = left+right for j in range(len(num_binary)): self.pixel(x + j, y + i, int(num_binary[j])) def display_zh(self,text, x, y): for i in range(len(text)): self.display_zh_character(text[i], x + i * 16, y) def poweron(self): pass class SSD1306_SPI(SSD1306): def __init__(self, width, height, spi, dc, res, cs, external_vcc=False): self.rate = 10 * 1024 * 1024 dc.init(dc.OUT, value=0) res.init(res.OUT, value=0) cs.init(cs.OUT, value=1) self.spi = spi self.dc = dc self.res = res self.cs = cs self.buffer = bytearray((height // 8) * width) self.framebuf = framebuf.FrameBuffer1(self.buffer, width, height) super().__init__(width, height, external_vcc) def write_cmd(self, cmd): self.spi.init(baudrate=self.rate, polarity=0, phase=0) self.cs.on() self.dc.off() self.cs.off() self.spi.write(bytearray([cmd])) self.cs.on() def write_framebuf(self): self.spi.init(baudrate=self.rate, polarity=0, phase=0) self.cs.on() self.dc.on() self.cs.off() self.spi.write(self.buffer) self.cs.on() def poweron(self): self.res.on() time.sleep_ms(1) self.res.off() time.sleep_ms(10) self.res.on() \u5b9e\u9a8c\u4e00\uff1aOLED\u6db2\u6676\u5c4f\u7684\u663e\u793a \u4ee3\u7801\u5982\u4e0b\uff1a from machine import Pin, I2C from libs.ssd1306 import SSD1306_I2C import time i2c = I2C(0, scl=Pin(22), sda=Pin(21), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 # \u4e00\u3001\u6e05\u5c4f\u3002oled.fill(col),\u53c2\u6570colcol\u53ef\u4e0d\u5199\u9ed8\u8ba4\u4e3a0\u663e\u793a\u70b9\u7684\u989c\u8272\uff081-\u767d\u8272\uff0c0-\u9ed1\u8272\uff09 oled.fill(0) ''' 2\u3001\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u663e\u793a\u6587\u672c\u3002 text(string, x, y, col=1)\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u663e\u793a\u5b57\u7b26\u4e32\uff0cx,y\u4e3a\u663e\u793a\u4f4d\u7f6e\uff0ccol\u53ef\u4e0d\u5199\u9ed8\u8ba4\u4e3a1\u663e\u793a\u70b9\u7684\u989c\u8272\uff081-\u767d\u8272\uff0c0-\u9ed1\u8272\uff09 ''' oled.text(\"Hello, MicroPython!\", 0, 0) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6587\u672c oled.text(\"Temp: 25.5C\", 0, 16) # 3\u3001\u542f\u52a8\u663e\u793a oled.show() time.sleep(3) # 4\u3001\u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u4e00\u4e2a\u70b9\u3002oled.pixel(x\uff0cy\uff0ccol) x,y\u8868\u793a\u5750\u6807\uff0ccol\u53ef\u4e0d\u5199\u9ed8\u8ba4\u4e3a1\u663e\u793a\u70b9\u7684\u989c\u8272\uff081-\u767d\u8272\uff0c0-\u9ed1\u8272\uff09 oled.fill(0) for i in range(64): oled.pixel(3,i) oled.show() time.sleep(3) # 5\u3001\u6307\u5b9a\u6a2a\u7eb5\u65b9\u5411\u4e0a\u79fb\u52a8\u6b65\u6570\u79fb\u52a8\u663e\u793a\u5bf9\u8c61 for _ in range(128): oled.scroll(1, 0) # dx=1\uff08\u5411\u53f3\uff09\uff0cdy=0 oled.show() time.sleep(0.02) \u5b9e\u9a8c\u4e8c\uff1aOLED\u663e\u793a\u4e2d\u6587 \u5982\u679c\u4f60\u60f3\u8981\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u4e2d\u6587\uff0c\u6211\u4eec\u5e38\u7528\u7684\u65b9\u6cd5\u662f\uff0c\u4f7f\u7528\u53d6\u6a21\u8f6f\u4ef6\uff0c\u5bf9\u7528\u5230\u7684\u5b57\u4f53\u8fdb\u884c\u53d6\u6a21\u3002 \u70b9\u51fb\u4e0b\u8f7d \uff08\u7f51\u76d8\u63d0\u53d6\u7801: 5qrn \uff09 \u4e0b\u8f7d\u540e\uff0c\u8fdb\u884c\u89e3\u538b\u7f29\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a \u6253\u5f00 PCtoLCD2002.exe \uff0c\u70b9\u51fb\u8bbe\u7f6e\uff0c\u6309\u7167\u4e0b\u56fe\u8bbe\u7f6e \u8f93\u5165\u60f3\u8981\u53d6\u6a21\u7684\u6c49\u5b57\uff0c\u70b9\u51fb\u751f\u6210\u5b57\u6a21 \u5c06\u5b57\u6a21\u6587\u4ef6\uff0c\u6574\u7406\u6210\u5982\u4e0b\u5b57\u5178\u7684\u683c\u5f0f\uff1a character_dict = { '\u4e50': [0x00,0x00,0x1F,0x10,0x11,0x21,0x21,0x3F,0x01,0x09,0x09,0x11,0x21,0x41,0x05,0x02, 0x20,0xF0,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x20,0x10,0x08,0x04,0x04,0x00,0x00], '\u542f': [0x01,0x00,0x1F,0x10,0x10,0x10,0x1F,0x10,0x10,0x10,0x17,0x24,0x24,0x44,0x87,0x04, 0x00,0x80,0xFC,0x04,0x04,0x04,0xFC,0x00,0x00,0x00,0xFC,0x04,0x04,0x04,0xFC,0x04], '\u667a': [0x20,0x3E,0x48,0x08,0xFF,0x14,0x22,0x40,0x1F,0x10,0x10,0x1F,0x10,0x10,0x1F,0x10, 0x00,0x7C,0x44,0x44,0x44,0x44,0x7C,0x00,0xF0,0x10,0x10,0xF0,0x10,0x10,0xF0,0x10] } \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin, I2C from libs.ssd1306 import SSD1306_I2C import time i2c = I2C(0, scl=Pin(22), sda=Pin(21), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 ''' \u901a\u8fc7\u53d6\u6a21\u7684\u65b9\u6cd5\u5efa\u7acb\u6c49\u5b57\u5b57\u5178 ''' # \u5efa\u7acb\u6c49\u5b57\u5b57\u5178\uff0c\u5e76\u5c06\u4e4b\u524d\u7684\u53d6\u6a21\u6587\u4ef6\u590d\u5236\u8fdb\u6765 oled.character_dict = { '\u4e50': [0x00,0x00,0x1F,0x10,0x11,0x21,0x21,0x3F,0x01,0x09,0x09,0x11,0x21,0x41,0x05,0x02, 0x20,0xF0,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x20,0x10,0x08,0x04,0x04,0x00,0x00], '\u542f': [0x01,0x00,0x1F,0x10,0x10,0x10,0x1F,0x10,0x10,0x10,0x17,0x24,0x24,0x44,0x87,0x04, 0x00,0x80,0xFC,0x04,0x04,0x04,0xFC,0x00,0x00,0x00,0xFC,0x04,0x04,0x04,0xFC,0x04], '\u667a': [0x20,0x3E,0x48,0x08,0xFF,0x14,0x22,0x40,0x1F,0x10,0x10,0x1F,0x10,0x10,0x1F,0x10, 0x00,0x7C,0x44,0x44,0x44,0x44,0x7C,0x00,0xF0,0x10,0x10,0xF0,0x10,0x10,0xF0,0x10] } # \u6e05\u5c4f oled.fill(0) ''' \u8c03\u7528\u663e\u793a\u6c49\u5b57\u7684\u7c7b\u65b9\u6cd5: display_zh(text, x, y) text\u4e3a\u524d\u9762\u53d6\u6a21\u51fa\u6765\u7684\u6c49\u5b57\u7ec4\u5408\uff08\u4e00\u5b9a\u8981\uff09\uff0cx,y \u4e3a\u6c49\u5b57\u663e\u793a\u7684\u8d77\u59cb\u4f4d\u7f6e ''' oled.display_zh('\u4e50\u542f\u667a',30, 20) oled.show()","title":"17.OLED\u663e\u793a\u5c4f"},{"location":"MicroPython/OLED%E6%98%BE%E7%A4%BA%E5%B1%8F/#oled","text":"","title":"OLED\u6db2\u6676\u663e\u793a\u5c4f"},{"location":"MicroPython/OLED%E6%98%BE%E7%A4%BA%E5%B1%8F/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 OLED\u6db2\u6676\u663e\u793a\u5c4f 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 OLED\u6db2\u6676\u663e\u793a\u5c4f-SCL 22 2 OLED\u6db2\u6676\u663e\u793a\u5c4f-SDA 21 OLED\u663e\u793a\u5c4f\u4ecb\u7ecd OLED\u4e5f\u53eb\u6709\u673a\u53d1\u5149\u4e8c\u6781\u7ba1\uff0c\u53c8\u79f0\u4e3a\u6709\u673a\u7535\u6fc0\u5149\u663e\u793a\uff0cOLED\u5177\u6709\u81ea\u53d1\u5149\uff08\u4e0d\u9700\u8981\u80cc\u5149\uff09\uff0c\u5bf9\u6bd4\u5ea6\u9ad8\u3001\u8f7b\u8584\u3001\u53ef\u89c6\u89d2\u5927\u3001\u53cd\u5e94\u901f\u5ea6\u5feb\u7b49\u4f18\u70b9\u3002 SSD1306\u9a71\u52a8OLED\u663e\u793a\u5c4f SSD1306\u662f\u4e00\u6b3e\u7528\u4e8e\u9a71\u52a8\u5206\u8fa8\u7387\u4e3a128\u00d764 OLED\u7684\u663e\u793a\u9a71\u52a8\u82af\u7247\uff0c\u5185\u7f6e\u5bf9\u6bd4\u5ea6\u63a7\u5236\u3001\u663e\u793a RAM\u548c\u632f\u8361\u5668\uff0c\u51cf\u5c11\u4e86\u5916\u90e8\u7ec4\u4ef6\u548c\u80fd\u8017\uff0c\u5177\u6709256\u7ea7\u4eae\u5ea6\u63a7\u5236\uff0c\u8be5\u82af\u7247\u53ef\u4ee5\u4f7f\u7528IIC\u603b\u7ebf\u63a5\u53e3\u6216SPI\uff08\u4e32\u884c\u5916\u56f4\u63a5\u53e3\uff09\u4e0e\u5355\u7247\u673a\u8fdb\u884c\u8fde\u63a5\u901a\u8baf\u3002 I2C \u4e0e SPI \u533a\u522b I2C \u53ea\u9700\u4e24\u6839\u4fe1\u53f7\u7ebf\uff0c\u800c\u6807\u51c6 SPI \u81f3\u5c11\u56db\u6839\u4fe1\u53f7\uff0c\u5982\u679c\u6709\u591a\u4e2a\u4ece\u8bbe\u5907\uff0c\u4fe1\u53f7\u9700\u8981\u66f4\u591a\u3002\u4e00\u4e9b SPI \u53d8\u79cd\u867d\u7136\u53ea\u4f7f\u7528\u4e09\u6839\u7ebf\u2014\u2014 SCK\u3001CS \u548c\u53cc\u5411\u7684 MISO/MOSI\uff0c\u4f46 CS \u7ebf\u8fd8\u662f\u8981\u548c\u4ece\u8bbe\u5907\u4e00\u5bf9\u4e00\u6839\u3002\u53e6\u5916\uff0c\u5982\u679c SPI \u8981\u5b9e\u73b0\u591a\u4e3b\u8bbe\u5907\u7ed3\u6784\uff0c\u603b\u7ebf\u7cfb\u7edf\u9700\u989d\u5916\u7684\u903b\u8f91\u548c\u7ebf\u8def\u3002\u7528 I2C \u6784\u5efa\u7cfb\u7edf\u603b\u7ebf\u552f\u4e00\u7684\u95ee\u9898\u662f\u6709\u9650\u7684 7 \u4f4d\u5730\u5740\u7a7a\u95f4\uff0c\u4f46\u8fd9\u4e2a\u95ee\u9898\u65b0\u6807\u51c6\u5df2\u7ecf\u89e3\u51b3 --- \u4f7f\u7528 10 \u4f4d\u5730\u5740\u3002 \u5982\u679c\u5e94\u7528\u4e2d\u5fc5\u987b\u4f7f\u7528\u9ad8\u901f\u6570\u636e\u4f20\u8f93\uff0c\u90a3\u4e48 SPI \u662f\u5fc5\u7136\u7684\u9009\u62e9\u3002\u56e0\u4e3a SPI \u662f\u5168\u53cc\u5de5\uff0cIIC \u7684\u4e0d\u662f\u3002SPI \u6ca1\u6709\u5b9a\u4e49\u901f\u5ea6\u9650\u5236\uff0c\u4e00\u822c\u7684\u5b9e\u73b0\u901a\u5e38\u80fd\u8fbe\u5230\u751a\u81f3\u8d85\u8fc7 10Mbps\u3002IIC \u6700\u9ad8\u7684\u901f\u5ea6\u4e5f\u5c31\u5feb\u901f+\u6a21\u5f0f\uff081Mbps\uff09\u548c\u9ad8\u901f\u6a21\u5f0f\uff083.4Mbps\uff09\uff0c\u540e\u9762\u7684\u6a21\u5f0f\u8fd8\u9700\u8981\u989d\u5916\u7684 I/O \u7f13\u51b2\u533a\uff0c\u8fd8\u5e76\u4e0d\u662f\u603b\u662f\u5bb9\u6613\u5b9e\u73b0\u7684\u3002SPI \u9002\u5408\u6570\u636e\u6d41\u5e94\u7528\uff0c\u800c IIC \u66f4\u9002\u5408\u201c\u5b57\u8282\u8bbe\u5907\u201d\u7684\u591a\u4e3b\u8bbe\u5907\u5e94\u7528\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2assd1306.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 # MicroPython SSD1306 OLED driver, I2C and SPI interfaces Modified by Bigrich-Luo import time import framebuf # register definitions SET_CONTRAST = const(0x81) SET_ENTIRE_ON = const(0xa4) SET_NORM_INV = const(0xa6) SET_DISP = const(0xae) SET_MEM_ADDR = const(0x20) SET_COL_ADDR = const(0x21) SET_PAGE_ADDR = const(0x22) SET_DISP_START_LINE = const(0x40) SET_SEG_REMAP = const(0xa0) SET_MUX_RATIO = const(0xa8) SET_COM_OUT_DIR = const(0xc0) SET_DISP_OFFSET = const(0xd3) SET_COM_PIN_CFG = const(0xda) SET_DISP_CLK_DIV = const(0xd5) SET_PRECHARGE = const(0xd9) SET_VCOM_DESEL = const(0xdb) SET_CHARGE_PUMP = const(0x8d) class SSD1306: def __init__(self, width, height, external_vcc): self.width = width self.height = height self.external_vcc = external_vcc self.pages = self.height // 8 # Note the subclass must initialize self.framebuf to a framebuffer. # This is necessary because the underlying data buffer is different # between I2C and SPI implementations (I2C needs an extra byte). self.poweron() self.init_display() def init_display(self): for cmd in ( SET_DISP | 0x00, # off # address setting SET_MEM_ADDR, 0x00, # horizontal # resolution and layout SET_DISP_START_LINE | 0x00, SET_SEG_REMAP | 0x01, # column addr 127 mapped to SEG0 SET_MUX_RATIO, self.height - 1, SET_COM_OUT_DIR | 0x08, # scan from COM[N] to COM0 SET_DISP_OFFSET, 0x00, SET_COM_PIN_CFG, 0x02 if self.height == 32 else 0x12, # timing and driving scheme SET_DISP_CLK_DIV, 0x80, SET_PRECHARGE, 0x22 if self.external_vcc else 0xf1, SET_VCOM_DESEL, 0x30, # 0.83*Vcc # display SET_CONTRAST, 0xff, # maximum SET_ENTIRE_ON, # output follows RAM contents SET_NORM_INV, # not inverted # charge pump SET_CHARGE_PUMP, 0x10 if self.external_vcc else 0x14, SET_DISP | 0x01): # on self.write_cmd(cmd) self.fill(0) self.show() def poweroff(self): self.write_cmd(SET_DISP | 0x00) def contrast(self, contrast): self.write_cmd(SET_CONTRAST) self.write_cmd(contrast) def invert(self, invert): self.write_cmd(SET_NORM_INV | (invert & 1)) def show(self): x0 = 0 x1 = self.width - 1 if self.width == 64: # displays with width of 64 pixels are shifted by 32 x0 += 32 x1 += 32 self.write_cmd(SET_COL_ADDR) self.write_cmd(x0) self.write_cmd(x1) self.write_cmd(SET_PAGE_ADDR) self.write_cmd(0) self.write_cmd(self.pages - 1) self.write_framebuf() def fill(self, col=0): self.framebuf.fill(col) def pixel(self, x, y, col=1): self.framebuf.pixel(x, y, col) def scroll(self, dx, dy): self.framebuf.scroll(dx, dy) def text(self, string, x, y, col=1): self.framebuf.text(string, x, y, col) class SSD1306_I2C(SSD1306): def __init__(self, width, height, i2c, addr=0x3c, external_vcc=False): self.i2c = i2c self.addr = addr self.temp = bytearray(2) # Add an extra byte to the data buffer to hold an I2C data/command byte # to use hardware-compatible I2C transactions. A memoryview of the # buffer is used to mask this byte from the framebuffer operations # (without a major memory hit as memoryview doesn't copy to a separate # buffer). self.buffer = bytearray(((height // 8) * width) + 1) self.buffer[0] = 0x40 # Set first byte of data buffer to Co=0, D/C=1 self.framebuf = framebuf.FrameBuffer1(memoryview(self.buffer)[1:], width, height) super().__init__(width, height, external_vcc) def write_cmd(self, cmd): self.temp[0] = 0x80 # Co=1, D/C#=0 self.temp[1] = cmd self.i2c.writeto(self.addr, self.temp) def write_framebuf(self): # Blast out the frame buffer using a single I2C transaction to support # hardware I2C interfaces. self.i2c.writeto(self.addr, self.buffer) def display_zh_character(self,character, x, y): character_dict = {} num_list = self.character_dict[character] for i in range(16): left = bin(num_list[i]).replace('0b', '') right = bin(num_list[i + 16]).replace('0b', '') # \u8865 0 while len(left) < 8: left = '0' + left while len(right) < 8: right = '0' + right num_binary = left+right for j in range(len(num_binary)): self.pixel(x + j, y + i, int(num_binary[j])) def display_zh(self,text, x, y): for i in range(len(text)): self.display_zh_character(text[i], x + i * 16, y) def poweron(self): pass class SSD1306_SPI(SSD1306): def __init__(self, width, height, spi, dc, res, cs, external_vcc=False): self.rate = 10 * 1024 * 1024 dc.init(dc.OUT, value=0) res.init(res.OUT, value=0) cs.init(cs.OUT, value=1) self.spi = spi self.dc = dc self.res = res self.cs = cs self.buffer = bytearray((height // 8) * width) self.framebuf = framebuf.FrameBuffer1(self.buffer, width, height) super().__init__(width, height, external_vcc) def write_cmd(self, cmd): self.spi.init(baudrate=self.rate, polarity=0, phase=0) self.cs.on() self.dc.off() self.cs.off() self.spi.write(bytearray([cmd])) self.cs.on() def write_framebuf(self): self.spi.init(baudrate=self.rate, polarity=0, phase=0) self.cs.on() self.dc.on() self.cs.off() self.spi.write(self.buffer) self.cs.on() def poweron(self): self.res.on() time.sleep_ms(1) self.res.off() time.sleep_ms(10) self.res.on()","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/OLED%E6%98%BE%E7%A4%BA%E5%B1%8F/#oled_1","text":"\u4ee3\u7801\u5982\u4e0b\uff1a from machine import Pin, I2C from libs.ssd1306 import SSD1306_I2C import time i2c = I2C(0, scl=Pin(22), sda=Pin(21), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 # \u4e00\u3001\u6e05\u5c4f\u3002oled.fill(col),\u53c2\u6570colcol\u53ef\u4e0d\u5199\u9ed8\u8ba4\u4e3a0\u663e\u793a\u70b9\u7684\u989c\u8272\uff081-\u767d\u8272\uff0c0-\u9ed1\u8272\uff09 oled.fill(0) ''' 2\u3001\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u663e\u793a\u6587\u672c\u3002 text(string, x, y, col=1)\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u663e\u793a\u5b57\u7b26\u4e32\uff0cx,y\u4e3a\u663e\u793a\u4f4d\u7f6e\uff0ccol\u53ef\u4e0d\u5199\u9ed8\u8ba4\u4e3a1\u663e\u793a\u70b9\u7684\u989c\u8272\uff081-\u767d\u8272\uff0c0-\u9ed1\u8272\uff09 ''' oled.text(\"Hello, MicroPython!\", 0, 0) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6587\u672c oled.text(\"Temp: 25.5C\", 0, 16) # 3\u3001\u542f\u52a8\u663e\u793a oled.show() time.sleep(3) # 4\u3001\u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u4e00\u4e2a\u70b9\u3002oled.pixel(x\uff0cy\uff0ccol) x,y\u8868\u793a\u5750\u6807\uff0ccol\u53ef\u4e0d\u5199\u9ed8\u8ba4\u4e3a1\u663e\u793a\u70b9\u7684\u989c\u8272\uff081-\u767d\u8272\uff0c0-\u9ed1\u8272\uff09 oled.fill(0) for i in range(64): oled.pixel(3,i) oled.show() time.sleep(3) # 5\u3001\u6307\u5b9a\u6a2a\u7eb5\u65b9\u5411\u4e0a\u79fb\u52a8\u6b65\u6570\u79fb\u52a8\u663e\u793a\u5bf9\u8c61 for _ in range(128): oled.scroll(1, 0) # dx=1\uff08\u5411\u53f3\uff09\uff0cdy=0 oled.show() time.sleep(0.02)","title":"\u5b9e\u9a8c\u4e00\uff1aOLED\u6db2\u6676\u5c4f\u7684\u663e\u793a"},{"location":"MicroPython/OLED%E6%98%BE%E7%A4%BA%E5%B1%8F/#oled_2","text":"\u5982\u679c\u4f60\u60f3\u8981\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u4e2d\u6587\uff0c\u6211\u4eec\u5e38\u7528\u7684\u65b9\u6cd5\u662f\uff0c\u4f7f\u7528\u53d6\u6a21\u8f6f\u4ef6\uff0c\u5bf9\u7528\u5230\u7684\u5b57\u4f53\u8fdb\u884c\u53d6\u6a21\u3002 \u70b9\u51fb\u4e0b\u8f7d \uff08\u7f51\u76d8\u63d0\u53d6\u7801: 5qrn \uff09 \u4e0b\u8f7d\u540e\uff0c\u8fdb\u884c\u89e3\u538b\u7f29\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a \u6253\u5f00 PCtoLCD2002.exe \uff0c\u70b9\u51fb\u8bbe\u7f6e\uff0c\u6309\u7167\u4e0b\u56fe\u8bbe\u7f6e \u8f93\u5165\u60f3\u8981\u53d6\u6a21\u7684\u6c49\u5b57\uff0c\u70b9\u51fb\u751f\u6210\u5b57\u6a21 \u5c06\u5b57\u6a21\u6587\u4ef6\uff0c\u6574\u7406\u6210\u5982\u4e0b\u5b57\u5178\u7684\u683c\u5f0f\uff1a character_dict = { '\u4e50': [0x00,0x00,0x1F,0x10,0x11,0x21,0x21,0x3F,0x01,0x09,0x09,0x11,0x21,0x41,0x05,0x02, 0x20,0xF0,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x20,0x10,0x08,0x04,0x04,0x00,0x00], '\u542f': [0x01,0x00,0x1F,0x10,0x10,0x10,0x1F,0x10,0x10,0x10,0x17,0x24,0x24,0x44,0x87,0x04, 0x00,0x80,0xFC,0x04,0x04,0x04,0xFC,0x00,0x00,0x00,0xFC,0x04,0x04,0x04,0xFC,0x04], '\u667a': [0x20,0x3E,0x48,0x08,0xFF,0x14,0x22,0x40,0x1F,0x10,0x10,0x1F,0x10,0x10,0x1F,0x10, 0x00,0x7C,0x44,0x44,0x44,0x44,0x7C,0x00,0xF0,0x10,0x10,0xF0,0x10,0x10,0xF0,0x10] } \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin, I2C from libs.ssd1306 import SSD1306_I2C import time i2c = I2C(0, scl=Pin(22), sda=Pin(21), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 ''' \u901a\u8fc7\u53d6\u6a21\u7684\u65b9\u6cd5\u5efa\u7acb\u6c49\u5b57\u5b57\u5178 ''' # \u5efa\u7acb\u6c49\u5b57\u5b57\u5178\uff0c\u5e76\u5c06\u4e4b\u524d\u7684\u53d6\u6a21\u6587\u4ef6\u590d\u5236\u8fdb\u6765 oled.character_dict = { '\u4e50': [0x00,0x00,0x1F,0x10,0x11,0x21,0x21,0x3F,0x01,0x09,0x09,0x11,0x21,0x41,0x05,0x02, 0x20,0xF0,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x20,0x10,0x08,0x04,0x04,0x00,0x00], '\u542f': [0x01,0x00,0x1F,0x10,0x10,0x10,0x1F,0x10,0x10,0x10,0x17,0x24,0x24,0x44,0x87,0x04, 0x00,0x80,0xFC,0x04,0x04,0x04,0xFC,0x00,0x00,0x00,0xFC,0x04,0x04,0x04,0xFC,0x04], '\u667a': [0x20,0x3E,0x48,0x08,0xFF,0x14,0x22,0x40,0x1F,0x10,0x10,0x1F,0x10,0x10,0x1F,0x10, 0x00,0x7C,0x44,0x44,0x44,0x44,0x7C,0x00,0xF0,0x10,0x10,0xF0,0x10,0x10,0xF0,0x10] } # \u6e05\u5c4f oled.fill(0) ''' \u8c03\u7528\u663e\u793a\u6c49\u5b57\u7684\u7c7b\u65b9\u6cd5: display_zh(text, x, y) text\u4e3a\u524d\u9762\u53d6\u6a21\u51fa\u6765\u7684\u6c49\u5b57\u7ec4\u5408\uff08\u4e00\u5b9a\u8981\uff09\uff0cx,y \u4e3a\u6c49\u5b57\u663e\u793a\u7684\u8d77\u59cb\u4f4d\u7f6e ''' oled.display_zh('\u4e50\u542f\u667a',30, 20) oled.show()","title":"\u5b9e\u9a8c\u4e8c\uff1aOLED\u663e\u793a\u4e2d\u6587"},{"location":"MicroPython/PWM%E5%91%BC%E5%90%B8%E7%81%AF/","text":"PWM\u547c\u5438\u706f \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 \u5b9e\u7269\u63a5\u7ebf PWM\u662f\u4ec0\u4e48 1. \u6838\u5fc3\u6982\u5ff5 \u8109\u51b2\u5bbd\u5ea6\u8c03\u5236 \uff1a\u901a\u8fc7\u8c03\u8282\u4fe1\u53f7\u7684 \u5360\u7a7a\u6bd4 \uff08\u9ad8\u7535\u5e73\u65f6\u95f4\u5360\u6bd4\uff09\u6a21\u62df\u4e0d\u540c\u7535\u538b\u6548\u679c \u5173\u952e\u53c2\u6570 \uff1a \u9891\u7387 \uff1a\u6bcf\u79d2\u8109\u51b2\u5468\u671f\u6570\uff08Hz\uff09 \u5360\u7a7a\u6bd4 \uff1a\u9ad8\u7535\u5e73\u65f6\u95f4\u5360\u5468\u671f\u7684\u767e\u5206\u6bd4\uff080-100%\uff09 \u516c\u5f0f \u7b49\u6548\u7535\u538b = \u5360\u7a7a\u6bd4 \u00d7 \u6700\u5927\u7535\u538b 2. \u6ce2\u5f62\u56fe 3. \u5173\u952e\u53c2\u6570 \u53c2\u6570 \u8bf4\u660e \u5178\u578b\u5e94\u7528\u573a\u666f \u9891\u7387 \u6bcf\u79d2\u8109\u51b2\u5468\u671f\u6570 (Hz) \u7535\u673a\u63a7\u5236(1k-20kHz) \u5360\u7a7a\u6bd4 \u9ad8\u7535\u5e73\u65f6\u95f4\u5360\u6bd4 (0-100%) LED\u8c03\u5149\u3001\u7535\u6e90\u7a33\u538b \u5206\u8fa8\u7387 \u5360\u7a7a\u6bd4\u8c03\u8282\u7cbe\u5ea6 (\u59828\u4f4d=256\u7ea7) \u7cbe\u5bc6\u63a7\u5236\u573a\u666f PWM \u5728 machine \u7684 PWM \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u4e5f\u662f\u53ea\u9700\u8981\u4e86\u89e3\u5176\u6784\u9020\u5bf9\u8c61\u51fd\u6570\u548c\u4f7f\u7528\u65b9\u6cd5\uff1a \u6784\u9020\u51fd\u6570 machine.PWM(dest, freq, duty, duty_u16, duty_ns) \uff0c\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u6784\u9020\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 PWM \u5bf9\u8c61\uff1a dest \u662f\u8f93\u51fa PWM \u7684\u5b9e\u4f53\uff0c\u901a\u5e38\u662f machine.Pin \u5bf9\u8c61\uff1b freq \u5e94\u8be5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e PWM \u5468\u671f\u7684 \u9891\u7387 \uff08\u4ee5 Hz \u4e3a\u5355\u4f4d\uff09\uff1b duty \u5360\u7a7a\u6bd4\uff0c\u8303\u56f4\u662f 0 - 1023\uff1b duty_u16 \u5360\u7a7a\u6bd4\uff0c\u8303\u56f4\u662f 0 - 65535\uff0c2 \u7684 16 \u6b21\u65b9\uff1b duty_ns \u4ee5\u7eb3\u79d2\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u8109\u51b2\u5bbd\u5ea6\uff0c\u8303\u56f4\u662f 0 - 50000\u3002 MicroPython PWM\u5b9e\u73b0 # \u548cPin\u4e00\u6837\u5c5e\u4e8emachine\u6a21\u5757\uff0c\u4f7f\u7528\u524d\u9700\u8981\u5bfc\u5165 from machine import Pin, PWM # \u521b\u5efaPWM\u5bf9\u8c61 led = PWM(Pin(12), freq=20000, duty=512) led.freq() # \u83b7\u53d6\u5f53\u524d\u9891\u7387 led.freq(1000) # \u8bbe\u7f6e\u9891\u7387 led.duty() # \u83b7\u53d6\u5f53\u524d\u5360\u7a7a\u6bd4 led.duty(200) # \u8bbe\u7f6e\u5360\u7a7a\u6bd4 led.duty_u16(12345) # \u4f7f\u7528 duty_u16 \u65b9\u6cd5 led.duty_ns() # \u4f7f\u7528 duty_ns \u65b9\u6cd5 led.deinit() # \u5173\u95ed\u5f15\u811a\u7684 PWM \u4e0a\u624b\u5b9e\u9a8c \u5b9e\u9a8c\u4e00\uff1a\u547c\u5438\u706f \u547c\u5438\u706f \u662f\u4e00\u79cd\u901a\u8fc7PWM\uff08\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\uff09\u6280\u672f\u5b9e\u73b0LED\u4eae\u5ea6\u6e10\u53d8\u5faa\u73af\u7684\u706f\u5149\u6548\u679c\uff0c\u6a21\u62df\u4eba\u7c7b\u547c\u5438\u7684\u660e\u6697\u8282\u594f \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u4ea4\u901a\u706f3\u8272\u706f\u8f6e\u6d41\u70b9\u4eae ''' import time from machine import Pin, PWM # \u521b\u5efa LED \u63a7\u5236\u5bf9\u8c61 led = PWM(Pin(2), freq=1000) while True: # \u6e10\u4eae for i in range(0, 1024): led.duty(i) time.sleep_ms(1) # \u6e10\u6697 for i in range(1023, 0, -1): led.duty(i) time.sleep_ms(1) \u5b9e\u9a8c\u4e8c\uff1a\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0\u547c\u5438\u706f \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aBreathLED \u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin, PWM class BreathLED: def __init__(self, pin, freq=1000, max_duty=1023, speed=3): \"\"\" \u547c\u5438\u706f\uff08\u4ece\u660e\u5230\u6697\u518d\u4ece\u6697\u5230\u660e\uff09 :param pin: \u5f15\u811a\u7f16\u53f7 :param freq: \u9891\u7387\u503c\uff08\u9ed8\u8ba4\u4e3a1000\uff09 :param max_duty: \u6700\u5927\u5360\u7a7a\u6bd4\u8303\u56f4\uff080~1023\uff09 :param speed: \u63a7\u5236\u547c\u5438\u706f\u8282\u594f \"\"\" self.pwm = PWM(Pin(pin)) self.pwm.freq(freq) # \u8bbe\u7f6ePWM\u9891\u7387 self.max_duty = max_duty # \u6700\u5927\u4eae\u5ea6\u503c\uff080-1023\uff09 self.steps = 100 # \u547c\u5438\u5e73\u6ed1\u5ea6 self.speed = speed # \u547c\u5438\u901f\u5ea6\uff08\u79d2/\u6b65\uff09 def linear(self): while True: # \u6e10\u4eae for i in range(0, 1024): self.pwm.duty(i) time.sleep_ms(self.speed) # \u6e10\u6697 for i in range(1023, 0, -1): self.pwm.duty(i) time.sleep_ms(self.speed) # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": # \u793a\u4f8b\u5316\u5bf9\u8c61 led = BreathLED(pin=2,speed=5) led.linear() \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b ''' PWM\u547c\u5438\u706f pin\uff1a\u5bf9\u5e94\u5f15\u811a\u7f16\u53f7 speed\uff1a\u5bf9\u5e94\u7684\u547c\u5438\u901f\u5ea6\uff0c\u5fc5\u987b\u4e3a\u6574\u6570\u578b\uff0c\u5355\u4f4d\uff08\u6beb\u79d2\uff09 ''' from common.BreathLED import BreathLED led = BreathLED(pin=2,speed=1) led.linear()","title":"5.PWM\u547c\u5438\u706f"},{"location":"MicroPython/PWM%E5%91%BC%E5%90%B8%E7%81%AF/#pwm","text":"","title":"PWM\u547c\u5438\u706f"},{"location":"MicroPython/PWM%E5%91%BC%E5%90%B8%E7%81%AF/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 \u5b9e\u7269\u63a5\u7ebf","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/PWM%E5%91%BC%E5%90%B8%E7%81%AF/#pwm_1","text":"1. \u6838\u5fc3\u6982\u5ff5 \u8109\u51b2\u5bbd\u5ea6\u8c03\u5236 \uff1a\u901a\u8fc7\u8c03\u8282\u4fe1\u53f7\u7684 \u5360\u7a7a\u6bd4 \uff08\u9ad8\u7535\u5e73\u65f6\u95f4\u5360\u6bd4\uff09\u6a21\u62df\u4e0d\u540c\u7535\u538b\u6548\u679c \u5173\u952e\u53c2\u6570 \uff1a \u9891\u7387 \uff1a\u6bcf\u79d2\u8109\u51b2\u5468\u671f\u6570\uff08Hz\uff09 \u5360\u7a7a\u6bd4 \uff1a\u9ad8\u7535\u5e73\u65f6\u95f4\u5360\u5468\u671f\u7684\u767e\u5206\u6bd4\uff080-100%\uff09 \u516c\u5f0f \u7b49\u6548\u7535\u538b = \u5360\u7a7a\u6bd4 \u00d7 \u6700\u5927\u7535\u538b 2. \u6ce2\u5f62\u56fe 3. \u5173\u952e\u53c2\u6570 \u53c2\u6570 \u8bf4\u660e \u5178\u578b\u5e94\u7528\u573a\u666f \u9891\u7387 \u6bcf\u79d2\u8109\u51b2\u5468\u671f\u6570 (Hz) \u7535\u673a\u63a7\u5236(1k-20kHz) \u5360\u7a7a\u6bd4 \u9ad8\u7535\u5e73\u65f6\u95f4\u5360\u6bd4 (0-100%) LED\u8c03\u5149\u3001\u7535\u6e90\u7a33\u538b \u5206\u8fa8\u7387 \u5360\u7a7a\u6bd4\u8c03\u8282\u7cbe\u5ea6 (\u59828\u4f4d=256\u7ea7) \u7cbe\u5bc6\u63a7\u5236\u573a\u666f PWM \u5728 machine \u7684 PWM \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u4e5f\u662f\u53ea\u9700\u8981\u4e86\u89e3\u5176\u6784\u9020\u5bf9\u8c61\u51fd\u6570\u548c\u4f7f\u7528\u65b9\u6cd5\uff1a \u6784\u9020\u51fd\u6570 machine.PWM(dest, freq, duty, duty_u16, duty_ns) \uff0c\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u6784\u9020\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 PWM \u5bf9\u8c61\uff1a dest \u662f\u8f93\u51fa PWM \u7684\u5b9e\u4f53\uff0c\u901a\u5e38\u662f machine.Pin \u5bf9\u8c61\uff1b freq \u5e94\u8be5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e PWM \u5468\u671f\u7684 \u9891\u7387 \uff08\u4ee5 Hz \u4e3a\u5355\u4f4d\uff09\uff1b duty \u5360\u7a7a\u6bd4\uff0c\u8303\u56f4\u662f 0 - 1023\uff1b duty_u16 \u5360\u7a7a\u6bd4\uff0c\u8303\u56f4\u662f 0 - 65535\uff0c2 \u7684 16 \u6b21\u65b9\uff1b duty_ns \u4ee5\u7eb3\u79d2\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u8109\u51b2\u5bbd\u5ea6\uff0c\u8303\u56f4\u662f 0 - 50000\u3002 MicroPython PWM\u5b9e\u73b0 # \u548cPin\u4e00\u6837\u5c5e\u4e8emachine\u6a21\u5757\uff0c\u4f7f\u7528\u524d\u9700\u8981\u5bfc\u5165 from machine import Pin, PWM # \u521b\u5efaPWM\u5bf9\u8c61 led = PWM(Pin(12), freq=20000, duty=512) led.freq() # \u83b7\u53d6\u5f53\u524d\u9891\u7387 led.freq(1000) # \u8bbe\u7f6e\u9891\u7387 led.duty() # \u83b7\u53d6\u5f53\u524d\u5360\u7a7a\u6bd4 led.duty(200) # \u8bbe\u7f6e\u5360\u7a7a\u6bd4 led.duty_u16(12345) # \u4f7f\u7528 duty_u16 \u65b9\u6cd5 led.duty_ns() # \u4f7f\u7528 duty_ns \u65b9\u6cd5 led.deinit() # \u5173\u95ed\u5f15\u811a\u7684 PWM","title":"PWM\u662f\u4ec0\u4e48"},{"location":"MicroPython/PWM%E5%91%BC%E5%90%B8%E7%81%AF/#_2","text":"","title":"\u4e0a\u624b\u5b9e\u9a8c"},{"location":"MicroPython/PWM%E5%91%BC%E5%90%B8%E7%81%AF/#_3","text":"\u547c\u5438\u706f \u662f\u4e00\u79cd\u901a\u8fc7PWM\uff08\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\uff09\u6280\u672f\u5b9e\u73b0LED\u4eae\u5ea6\u6e10\u53d8\u5faa\u73af\u7684\u706f\u5149\u6548\u679c\uff0c\u6a21\u62df\u4eba\u7c7b\u547c\u5438\u7684\u660e\u6697\u8282\u594f \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u4ea4\u901a\u706f3\u8272\u706f\u8f6e\u6d41\u70b9\u4eae ''' import time from machine import Pin, PWM # \u521b\u5efa LED \u63a7\u5236\u5bf9\u8c61 led = PWM(Pin(2), freq=1000) while True: # \u6e10\u4eae for i in range(0, 1024): led.duty(i) time.sleep_ms(1) # \u6e10\u6697 for i in range(1023, 0, -1): led.duty(i) time.sleep_ms(1)","title":"\u5b9e\u9a8c\u4e00\uff1a\u547c\u5438\u706f"},{"location":"MicroPython/PWM%E5%91%BC%E5%90%B8%E7%81%AF/#_4","text":"\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aBreathLED \u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin, PWM class BreathLED: def __init__(self, pin, freq=1000, max_duty=1023, speed=3): \"\"\" \u547c\u5438\u706f\uff08\u4ece\u660e\u5230\u6697\u518d\u4ece\u6697\u5230\u660e\uff09 :param pin: \u5f15\u811a\u7f16\u53f7 :param freq: \u9891\u7387\u503c\uff08\u9ed8\u8ba4\u4e3a1000\uff09 :param max_duty: \u6700\u5927\u5360\u7a7a\u6bd4\u8303\u56f4\uff080~1023\uff09 :param speed: \u63a7\u5236\u547c\u5438\u706f\u8282\u594f \"\"\" self.pwm = PWM(Pin(pin)) self.pwm.freq(freq) # \u8bbe\u7f6ePWM\u9891\u7387 self.max_duty = max_duty # \u6700\u5927\u4eae\u5ea6\u503c\uff080-1023\uff09 self.steps = 100 # \u547c\u5438\u5e73\u6ed1\u5ea6 self.speed = speed # \u547c\u5438\u901f\u5ea6\uff08\u79d2/\u6b65\uff09 def linear(self): while True: # \u6e10\u4eae for i in range(0, 1024): self.pwm.duty(i) time.sleep_ms(self.speed) # \u6e10\u6697 for i in range(1023, 0, -1): self.pwm.duty(i) time.sleep_ms(self.speed) # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": # \u793a\u4f8b\u5316\u5bf9\u8c61 led = BreathLED(pin=2,speed=5) led.linear() \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b ''' PWM\u547c\u5438\u706f pin\uff1a\u5bf9\u5e94\u5f15\u811a\u7f16\u53f7 speed\uff1a\u5bf9\u5e94\u7684\u547c\u5438\u901f\u5ea6\uff0c\u5fc5\u987b\u4e3a\u6574\u6570\u578b\uff0c\u5355\u4f4d\uff08\u6beb\u79d2\uff09 ''' from common.BreathLED import BreathLED led = BreathLED(pin=2,speed=1) led.linear()","title":"\u5b9e\u9a8c\u4e8c\uff1a\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0\u547c\u5438\u706f"},{"location":"MicroPython/RGB%20LED%E7%81%AF/","text":"RGB LED\u706f \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 RGB LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 RGB - R 25 2 RGB - G 26 3 RGB - B 27 \u5b9e\u7269\u63a5\u7ebf \u4e0a\u624b\u5b9e\u9a8c \u5b9e\u9a8c\u4e00\u3001RGB\u4e09\u8272\u663e\u793a \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u901a\u8fc7GPIO\u5f15\u811a\u63a7\u5236\u7ea2\u7eff\u84dd\u4e09\u8272\u7684\u663e\u793a ''' from machine import Pin,PWM import time R_p25 = Pin(25,Pin.OUT) # \u7ea2\u8272\u5bf9\u5e94\u7684\u5f15\u811a G_p26 = Pin(26,Pin.OUT) # \u7eff\u8272\u5bf9\u5e94\u7684\u5f15\u811a B_p27 = Pin(27,Pin.OUT) # \u84dd\u8272\u5bf9\u5e94\u7684\u5f15\u811a while True: # \u663e\u793a\u7ea2\u82721\u79d2\u540e\u7184\u706d R_p25.value(1) time.sleep(1) R_p25.value(0) time.sleep(1) # \u663e\u793a\u7eff\u82721\u79d2\u540e\u7184\u706d G_p26.value(1) time.sleep(1) G_p26.value(0) time.sleep(1) # \u663e\u793a\u84dd\u82721\u79d2\u540e\u7184\u706d B_p27.value(1) time.sleep(1) B_p27.value(0) time.sleep(1) # \u7ea2\u7eff\u84dd\u6df7\u8272\u4e3a\u767d\u8272\u663e\u793a1\u79d2\u540e\u7184\u706d R_p25.value(1) G_p26.value(1) B_p27.value(1) time.sleep(1) R_p25.value(0) G_p26.value(0) B_p27.value(0) time.sleep(1) \u5b9e\u9a8c\u4e8c\uff1a\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0RGB\u4e09\u8272\u706f \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aRGB_led \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time class RGB_led: def __init__(self, pins): ''' RGB\u706f :param pins: \u5f15\u811a\u7f16\u53f7\uff0c\u662f\u4e00\u4e2a\u5217\u8868 ''' self.pins = [] self.ALL_off() for i in pins: self.pins.append(Pin(Pin(i), Pin.OUT)) print(f\"{self.pins}\") def RED_on(self): self.pins[0].value(1) def GREEN_on(self): self.pins[1].value(1) def BLUE_on(self): self.pins[2].value(1) def ALL_off(self): for led in self.pins: rgb_led.ALL_off() time.sleep(1) # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": rgb_led = RGB_led(pins = [25,26,27]) while True : rgb_led.RED_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) rgb_led.GREEN_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b # \u5bfc\u5165\u7c7b\u6a21\u5757 from common.RGB_led import RGB_led import time rgb_led = RGB_led(pins = [25,26,27]) while True: # \u7ea2\u706f\u4eae1\u79d2\u540e \u7184\u706d rgb_led.RED_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) # \u7eff\u8272\u4eae1\u79d2\u540e \u7184\u706d rgb_led.GREEN_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) # \u84dd\u706f\u4eae1\u79d2\u540e \u7184\u706d rgb_led.BLUE_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) \u4e09\u57fa\u8272\u6df7\u8272\u6cd5 \u5b9e\u8df5\u8bc1\u660e\uff0c\u81ea\u7136\u754c\u4e2d\u51e0\u4e4e\u6240\u6709\u7684\u989c\u8272\u90fd\u662f\u53ef\u4ee5\u7531\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u6309\u7167\u4e0d\u540c\u7684\u6bd4\u7387\u6df7\u5408\u800c\u6210 \u4e09\u539f\u8272\u6df7\u8272\u89c4\u5f8b\uff1a \u989c\u8272\u7ec4\u5408 \u5408\u6210\u989c\u8272 \u6570\u5b66\u8868\u793a \u5341\u516d\u8fdb\u5236\u793a\u4f8b PWM\u503c\uff080-255\uff09 \u7ea2(R) + \u7eff(G) \u9ec4(Y) (255,255,0) #FFFF00 (255,255,0) \u7eff(G) + \u84dd(B) \u9752(C) (0,255,255) #00FFFF (0,255,255) \u7ea2(R) + \u84dd(B) \u54c1\u7ea2(M) (255,0,255) #FF00FF (255,0,255) R+G+B \u767d(W) (255,255,255) #FFFFFF (255,255,255) \u5168\u5173 \u9ed1(K) (0,0,0) #000000 (0,0,0) RGB\u706f\u7684\u5de5\u4f5c\u539f\u7406\uff1a RGB\u706f\u76f8\u5f53\u4e8e\u5728\u5185\u7f6e\u4e863\u4e2aLED\u706f\uff0c\u5206\u522b\u663e\u793a\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u79cd\u989c\u8272\uff0c\u901a\u8fc7\u8c03\u8282\u5404\u4e2a\u706f\u73e0\u7684\u4eae\u5ea6\uff0c\u4ece\u800c\u8fbe\u5230\u4e0d\u540c\u7684\u6df7\u8272\u6548\u679c \u5b9e\u9a8c\u4e09\uff1a\u968f\u673a\u4ea7\u751f\u4e00\u4e2a\u989c\u8272 \u7a0b\u5e8f\u5982\u4e0b \"\"\" \u6bcf\u96942\u79d2\u968f\u673a\u7ec4\u5408\u4e00\u4e2a\u989c\u8272 \"\"\" import time from machine import Pin, PWM import random led_R =PWM(Pin(25),freq=1000,duty=0) led_G =PWM(Pin(26),freq=1000,duty=0) led_B =PWM(Pin(27),freq=1000,duty=0) while True : led_R.duty(random.randint(0,1023)) led_G.duty(random.randint(0,1023)) led_B.duty(random.randint(0,1023)) time.sleep(2) \u5b9e\u9a8c\u56db\uff1a\u66f4\u591a\u7684\u989c\u8272\u53d8\u6362 from machine import Pin, PWM import time # \u521d\u59cb\u5316PWM\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u63a5\u7ebf\u4fee\u6539\uff09 red = PWM(Pin(25),freq=1000,duty=0) # \u7ea2\u8272\u5f15\u811a green = PWM(Pin(26),freq=1000,duty=0) # \u7eff\u8272\u5f15\u811a blue = PWM(Pin(27),freq=1000,duty=0) # \u84dd\u8272\u5f15\u811a def set_color(r, g, b): \"\"\"\u8bbe\u7f6eRGB\u989c\u8272\uff080-255\uff09\"\"\" # \u5c060-255\u6620\u5c04\u52300-1023\uff08ESP32 PWM\u8303\u56f4\uff09 red.duty(int(r * 1023 / 255)) green.duty(int(g * 1023 / 255)) blue.duty(int(b * 1023 / 255)) # \u57fa\u7840\u989c\u8272\u6f14\u793a colors = [ (255, 0, 0), # \u7ea2 (0, 255, 0), # \u7eff (0, 0, 255), # \u84dd (255, 255, 0), # \u9ec4 (0, 255, 255), # \u9752 (255, 0, 255), # \u7d2b (255, 255, 255) # \u767d ] set_color(0,0,255) while True: for color in colors: print(\"\u663e\u793a\u989c\u8272:\", color) set_color(*color) time.sleep(1) # \u6bcf\u79cd\u989c\u8272\u663e\u793a1\u79d2 # \u7b80\u5355\u6e10\u53d8\u6548\u679c\uff08\u7ea2\u2192\u7eff\u2192\u84dd\uff09 for i in range(256): set_color(255-i, i, 0) # \u7ea2\u2192\u7eff time.sleep_ms(10) for i in range(256): set_color(0, 255-i, i) # \u7eff\u2192\u84dd time.sleep_ms(10) for i in range(256): set_color(i, 0, 255-i) # \u84dd\u2192\u7ea2 time.sleep_ms(10) \u8bed\u6cd5\u96be\u70b9\u8bb2\u89e3 set_color(*color) * \u7b26\u53f7\u7528\u4e8e \u89e3\u5305\uff08unpack\uff09 \u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5982\u5217\u8868\u3001\u5143\u7ec4\u7b49\uff09\u3002\u4ee5\u4e0b\u662f\u8be6\u7ec6\u8bb2\u89e3\uff1a \u51fd\u6570\u4f20\u53c2\u65f6\u7684\u89e3\u5305 def set_color(r, g, b): print(f\"R:{r}, G:{g}, B:{b}\") color = (255, 128, 0) # \u5143\u7ec4\u5305\u542b\u4e09\u4e2a\u503c # \u6b63\u5e38\u8c03\u7528 set_color(color[0], color[1], color[2]) # \u4f20\u7edf\u5199\u6cd5 set_color(*color) # \u4f7f\u7528*\u89e3\u5305 \u2192 \u7b49\u6548\u4e8e set_color(255, 128, 0) \u6848\u4f8b\u4e2d\u7684\u7a0b\u5e8f def set_color(r, g, b): print(f\"R:{r}, G:{g}, B:{b}\") color = (255, 128, 0) # \u5143\u7ec4\u5305\u542b\u4e09\u4e2a\u503c # \u6b63\u5e38\u8c03\u7528 set_color(color[0], color[1], color[2]) # \u4f20\u7edf\u5199\u6cd5 set_color(*color) # \u4f7f\u7528*\u89e3\u5305 \u2192 \u7b49\u6548\u4e8e set_color(255, 128, 0) \u6267\u884c\u8fc7\u7a0b \u7b2c\u4e00\u6b21\u5faa\u73af\uff1a color = (255, 0, 0) *color \u89e3\u5305 \u2192 set_color(255, 0, 0) \u7b2c\u4e8c\u6b21\u5faa\u73af\uff1a color = (0, 255, 0) *color \u89e3\u5305 \u2192 set_color(0, 255, 0) \u7b2c\u4e09\u6b21\u5faa\u73af\uff1a color = (0, 0, 255) *color \u89e3\u5305 \u2192 set_color(0, 0, 255) \u5b57\u5178\u91c7\u7528 ** \u89e3\u5305 params = {'r': 255, 'g': 0, 'b': 0} set_color(**params) # \u7b49\u6548\u4e8e set_color(r=255,g=0,b=0) \u5b9e\u9a8c\u4e94\uff1a\u7b80\u5316\u72483\u79cd\u989c\u8272\u4ea4\u66ff\u65b9\u6848 from machine import Pin, PWM import time rgb = [PWM(Pin(p)) for p in [23,22,21]] # R,G,B [pwm.freq(1000) for pwm in rgb] # \u7edf\u4e00\u9891\u7387 def color(r,g,b): for i,v in enumerate([r,g,b]): rgb[i].duty(int(v * 1023 / 255)) # \u7ea2\u7eff\u84dd\u4ea4\u66ff\u663e\u793a while True: color(255,0,0); time.sleep(1) # \u7ea2 color(0,255,0); time.sleep(1) # \u7eff color(0,0,255); time.sleep(1) # \u84dd enumerate() \u51fd\u6570\u7684\u6838\u5fc3\u7528\u6cd5 \u200c \u4e00\u3001\u57fa\u672c\u8bed\u6cd5\u4e0e\u53c2\u6570\u8bf4\u660e \u200c \u200c \u51fd\u6570\u5b9a\u4e49 \u200c\uff1a enumerate(iterable, start=0) iterable \uff1a\u5fc5\u9700\u53c2\u6570\uff0c\u63a5\u53d7\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u7b49\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 start \uff1a\u53ef\u9009\u53c2\u6570\uff0c\u6307\u5b9a\u7d22\u5f15\u7684\u8d77\u59cb\u503c\uff0c\u9ed8\u8ba4\u4e3a 0 \u3002 \u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u6362\u4e3a\u679a\u4e3e\u5bf9\u8c61\uff0c\u6bcf\u6b21\u8fed\u4ee3\u8fd4\u56de (index, value) \u5143\u7ec4 fruits = ['apple', 'banana', 'cherry'] for index, fruit in enumerate(fruits): print(f\"\u7d22\u5f15{index}: {fruit}\") # \u8f93\u51fa\uff1a # \u7d22\u5f150: apple # \u7d22\u5f151: banana # \u7d22\u5f152: enum_list = list(enumerate(fruits)) print(enum_list) # \u8f93\u51fa\uff1a[(0, 'apple'), (1, 'banana'), (2, 'cherry')]","title":"6.RGB LED\u706f"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#rgb-led","text":"","title":"RGB LED\u706f"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 RGB LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 RGB - R 25 2 RGB - G 26 3 RGB - B 27 \u5b9e\u7269\u63a5\u7ebf","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#_2","text":"","title":"\u4e0a\u624b\u5b9e\u9a8c"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#rgb","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u901a\u8fc7GPIO\u5f15\u811a\u63a7\u5236\u7ea2\u7eff\u84dd\u4e09\u8272\u7684\u663e\u793a ''' from machine import Pin,PWM import time R_p25 = Pin(25,Pin.OUT) # \u7ea2\u8272\u5bf9\u5e94\u7684\u5f15\u811a G_p26 = Pin(26,Pin.OUT) # \u7eff\u8272\u5bf9\u5e94\u7684\u5f15\u811a B_p27 = Pin(27,Pin.OUT) # \u84dd\u8272\u5bf9\u5e94\u7684\u5f15\u811a while True: # \u663e\u793a\u7ea2\u82721\u79d2\u540e\u7184\u706d R_p25.value(1) time.sleep(1) R_p25.value(0) time.sleep(1) # \u663e\u793a\u7eff\u82721\u79d2\u540e\u7184\u706d G_p26.value(1) time.sleep(1) G_p26.value(0) time.sleep(1) # \u663e\u793a\u84dd\u82721\u79d2\u540e\u7184\u706d B_p27.value(1) time.sleep(1) B_p27.value(0) time.sleep(1) # \u7ea2\u7eff\u84dd\u6df7\u8272\u4e3a\u767d\u8272\u663e\u793a1\u79d2\u540e\u7184\u706d R_p25.value(1) G_p26.value(1) B_p27.value(1) time.sleep(1) R_p25.value(0) G_p26.value(0) B_p27.value(0) time.sleep(1)","title":"\u5b9e\u9a8c\u4e00\u3001RGB\u4e09\u8272\u663e\u793a"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#rgb_1","text":"\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aRGB_led \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time class RGB_led: def __init__(self, pins): ''' RGB\u706f :param pins: \u5f15\u811a\u7f16\u53f7\uff0c\u662f\u4e00\u4e2a\u5217\u8868 ''' self.pins = [] self.ALL_off() for i in pins: self.pins.append(Pin(Pin(i), Pin.OUT)) print(f\"{self.pins}\") def RED_on(self): self.pins[0].value(1) def GREEN_on(self): self.pins[1].value(1) def BLUE_on(self): self.pins[2].value(1) def ALL_off(self): for led in self.pins: rgb_led.ALL_off() time.sleep(1) # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": rgb_led = RGB_led(pins = [25,26,27]) while True : rgb_led.RED_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) rgb_led.GREEN_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b # \u5bfc\u5165\u7c7b\u6a21\u5757 from common.RGB_led import RGB_led import time rgb_led = RGB_led(pins = [25,26,27]) while True: # \u7ea2\u706f\u4eae1\u79d2\u540e \u7184\u706d rgb_led.RED_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) # \u7eff\u8272\u4eae1\u79d2\u540e \u7184\u706d rgb_led.GREEN_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) # \u84dd\u706f\u4eae1\u79d2\u540e \u7184\u706d rgb_led.BLUE_on() time.sleep(1) rgb_led.ALL_off() time.sleep(1) \u4e09\u57fa\u8272\u6df7\u8272\u6cd5 \u5b9e\u8df5\u8bc1\u660e\uff0c\u81ea\u7136\u754c\u4e2d\u51e0\u4e4e\u6240\u6709\u7684\u989c\u8272\u90fd\u662f\u53ef\u4ee5\u7531\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u6309\u7167\u4e0d\u540c\u7684\u6bd4\u7387\u6df7\u5408\u800c\u6210 \u4e09\u539f\u8272\u6df7\u8272\u89c4\u5f8b\uff1a \u989c\u8272\u7ec4\u5408 \u5408\u6210\u989c\u8272 \u6570\u5b66\u8868\u793a \u5341\u516d\u8fdb\u5236\u793a\u4f8b PWM\u503c\uff080-255\uff09 \u7ea2(R) + \u7eff(G) \u9ec4(Y) (255,255,0) #FFFF00 (255,255,0) \u7eff(G) + \u84dd(B) \u9752(C) (0,255,255) #00FFFF (0,255,255) \u7ea2(R) + \u84dd(B) \u54c1\u7ea2(M) (255,0,255) #FF00FF (255,0,255) R+G+B \u767d(W) (255,255,255) #FFFFFF (255,255,255) \u5168\u5173 \u9ed1(K) (0,0,0) #000000 (0,0,0) RGB\u706f\u7684\u5de5\u4f5c\u539f\u7406\uff1a RGB\u706f\u76f8\u5f53\u4e8e\u5728\u5185\u7f6e\u4e863\u4e2aLED\u706f\uff0c\u5206\u522b\u663e\u793a\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u79cd\u989c\u8272\uff0c\u901a\u8fc7\u8c03\u8282\u5404\u4e2a\u706f\u73e0\u7684\u4eae\u5ea6\uff0c\u4ece\u800c\u8fbe\u5230\u4e0d\u540c\u7684\u6df7\u8272\u6548\u679c","title":"\u5b9e\u9a8c\u4e8c\uff1a\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0RGB\u4e09\u8272\u706f"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b \"\"\" \u6bcf\u96942\u79d2\u968f\u673a\u7ec4\u5408\u4e00\u4e2a\u989c\u8272 \"\"\" import time from machine import Pin, PWM import random led_R =PWM(Pin(25),freq=1000,duty=0) led_G =PWM(Pin(26),freq=1000,duty=0) led_B =PWM(Pin(27),freq=1000,duty=0) while True : led_R.duty(random.randint(0,1023)) led_G.duty(random.randint(0,1023)) led_B.duty(random.randint(0,1023)) time.sleep(2)","title":"\u5b9e\u9a8c\u4e09\uff1a\u968f\u673a\u4ea7\u751f\u4e00\u4e2a\u989c\u8272"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#_4","text":"from machine import Pin, PWM import time # \u521d\u59cb\u5316PWM\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u63a5\u7ebf\u4fee\u6539\uff09 red = PWM(Pin(25),freq=1000,duty=0) # \u7ea2\u8272\u5f15\u811a green = PWM(Pin(26),freq=1000,duty=0) # \u7eff\u8272\u5f15\u811a blue = PWM(Pin(27),freq=1000,duty=0) # \u84dd\u8272\u5f15\u811a def set_color(r, g, b): \"\"\"\u8bbe\u7f6eRGB\u989c\u8272\uff080-255\uff09\"\"\" # \u5c060-255\u6620\u5c04\u52300-1023\uff08ESP32 PWM\u8303\u56f4\uff09 red.duty(int(r * 1023 / 255)) green.duty(int(g * 1023 / 255)) blue.duty(int(b * 1023 / 255)) # \u57fa\u7840\u989c\u8272\u6f14\u793a colors = [ (255, 0, 0), # \u7ea2 (0, 255, 0), # \u7eff (0, 0, 255), # \u84dd (255, 255, 0), # \u9ec4 (0, 255, 255), # \u9752 (255, 0, 255), # \u7d2b (255, 255, 255) # \u767d ] set_color(0,0,255) while True: for color in colors: print(\"\u663e\u793a\u989c\u8272:\", color) set_color(*color) time.sleep(1) # \u6bcf\u79cd\u989c\u8272\u663e\u793a1\u79d2 # \u7b80\u5355\u6e10\u53d8\u6548\u679c\uff08\u7ea2\u2192\u7eff\u2192\u84dd\uff09 for i in range(256): set_color(255-i, i, 0) # \u7ea2\u2192\u7eff time.sleep_ms(10) for i in range(256): set_color(0, 255-i, i) # \u7eff\u2192\u84dd time.sleep_ms(10) for i in range(256): set_color(i, 0, 255-i) # \u84dd\u2192\u7ea2 time.sleep_ms(10) \u8bed\u6cd5\u96be\u70b9\u8bb2\u89e3 set_color(*color) * \u7b26\u53f7\u7528\u4e8e \u89e3\u5305\uff08unpack\uff09 \u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5982\u5217\u8868\u3001\u5143\u7ec4\u7b49\uff09\u3002\u4ee5\u4e0b\u662f\u8be6\u7ec6\u8bb2\u89e3\uff1a \u51fd\u6570\u4f20\u53c2\u65f6\u7684\u89e3\u5305 def set_color(r, g, b): print(f\"R:{r}, G:{g}, B:{b}\") color = (255, 128, 0) # \u5143\u7ec4\u5305\u542b\u4e09\u4e2a\u503c # \u6b63\u5e38\u8c03\u7528 set_color(color[0], color[1], color[2]) # \u4f20\u7edf\u5199\u6cd5 set_color(*color) # \u4f7f\u7528*\u89e3\u5305 \u2192 \u7b49\u6548\u4e8e set_color(255, 128, 0) \u6848\u4f8b\u4e2d\u7684\u7a0b\u5e8f def set_color(r, g, b): print(f\"R:{r}, G:{g}, B:{b}\") color = (255, 128, 0) # \u5143\u7ec4\u5305\u542b\u4e09\u4e2a\u503c # \u6b63\u5e38\u8c03\u7528 set_color(color[0], color[1], color[2]) # \u4f20\u7edf\u5199\u6cd5 set_color(*color) # \u4f7f\u7528*\u89e3\u5305 \u2192 \u7b49\u6548\u4e8e set_color(255, 128, 0) \u6267\u884c\u8fc7\u7a0b \u7b2c\u4e00\u6b21\u5faa\u73af\uff1a color = (255, 0, 0) *color \u89e3\u5305 \u2192 set_color(255, 0, 0) \u7b2c\u4e8c\u6b21\u5faa\u73af\uff1a color = (0, 255, 0) *color \u89e3\u5305 \u2192 set_color(0, 255, 0) \u7b2c\u4e09\u6b21\u5faa\u73af\uff1a color = (0, 0, 255) *color \u89e3\u5305 \u2192 set_color(0, 0, 255) \u5b57\u5178\u91c7\u7528 ** \u89e3\u5305 params = {'r': 255, 'g': 0, 'b': 0} set_color(**params) # \u7b49\u6548\u4e8e set_color(r=255,g=0,b=0)","title":"\u5b9e\u9a8c\u56db\uff1a\u66f4\u591a\u7684\u989c\u8272\u53d8\u6362"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#3","text":"from machine import Pin, PWM import time rgb = [PWM(Pin(p)) for p in [23,22,21]] # R,G,B [pwm.freq(1000) for pwm in rgb] # \u7edf\u4e00\u9891\u7387 def color(r,g,b): for i,v in enumerate([r,g,b]): rgb[i].duty(int(v * 1023 / 255)) # \u7ea2\u7eff\u84dd\u4ea4\u66ff\u663e\u793a while True: color(255,0,0); time.sleep(1) # \u7ea2 color(0,255,0); time.sleep(1) # \u7eff color(0,0,255); time.sleep(1) # \u84dd enumerate() \u51fd\u6570\u7684\u6838\u5fc3\u7528\u6cd5","title":"\u5b9e\u9a8c\u4e94\uff1a\u7b80\u5316\u72483\u79cd\u989c\u8272\u4ea4\u66ff\u65b9\u6848"},{"location":"MicroPython/RGB%20LED%E7%81%AF/#_5","text":"\u200c \u51fd\u6570\u5b9a\u4e49 \u200c\uff1a enumerate(iterable, start=0) iterable \uff1a\u5fc5\u9700\u53c2\u6570\uff0c\u63a5\u53d7\u5217\u8868\u3001\u5143\u7ec4\u3001\u5b57\u7b26\u4e32\u7b49\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 start \uff1a\u53ef\u9009\u53c2\u6570\uff0c\u6307\u5b9a\u7d22\u5f15\u7684\u8d77\u59cb\u503c\uff0c\u9ed8\u8ba4\u4e3a 0 \u3002 \u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u6362\u4e3a\u679a\u4e3e\u5bf9\u8c61\uff0c\u6bcf\u6b21\u8fed\u4ee3\u8fd4\u56de (index, value) \u5143\u7ec4 fruits = ['apple', 'banana', 'cherry'] for index, fruit in enumerate(fruits): print(f\"\u7d22\u5f15{index}: {fruit}\") # \u8f93\u51fa\uff1a # \u7d22\u5f150: apple # \u7d22\u5f151: banana # \u7d22\u5f152: enum_list = list(enumerate(fruits)) print(enum_list) # \u8f93\u51fa\uff1a[(0, 'apple'), (1, 'banana'), (2, 'cherry')]","title":"\u200c\u4e00\u3001\u57fa\u672c\u8bed\u6cd5\u4e0e\u53c2\u6570\u8bf4\u660e\u200c"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/","text":"RGB LED\u706f\u6761 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 RGB LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 RGB - LED\u706f\u6761 2 \u5b9e\u7269\u63a5\u7ebf MicroPython NeoPixel \u7c7b\u8be6\u89e3 \u53c2\u6570\u8bf4\u660e\uff1a \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e \u9ed8\u8ba4\u503c pin Pin\u5bf9\u8c61 \u6570\u636e\u5f15\u811a \u5fc5\u586b n int LED\u6570\u91cf \u5fc5\u586b bpp int \u6bcf\u50cf\u7d20\u5b57\u8282\u6570(3=RGB,4=RGBW) 3 timing int \u65f6\u5e8f\u6a21\u5f0f(0=\u8f6f\u4ef6,1=\u786c\u4ef6RMT) 0 \u793a\u4f8b # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin from neopixel import NeoPixel # \u63a7\u523610\u4e2aLED\uff0cGPIO2\u5f15\u811a np = NeoPixel(Pin(2), 10) \u64cd\u4f5c\u65b9\u6cd5\uff1a \u7d22\u5f15\u8bbf\u95ee (\u901a\u8fc7\u7d22\u5f15\u8bfb\u5199\u5355\u4e2aLED\u989c\u8272) # \u8bbe\u7f6e\u7b2c1\u4e2aLED\u4e3a\u7ea2\u8272 np[0] = (255, 0, 0) # \u83b7\u53d6\u7b2c2\u4e2aLED\u989c\u8272 color = np[1] # \u8fd4\u56de(R,G,B)\u5143\u7ec4 \u6ce8\u610f \uff1a \u4fee\u6539\u540e\u9700\u8c03\u7528 write() \u751f\u6548 \u7d22\u5f15\u4ece0\u5f00\u59cb\uff0c\u4e0d\u80fd\u8d8a\u754c fill(color) \u6279\u91cf\u8bbe\u7f6e\u6240\u6709LED\u989c\u8272\uff09 # \u5168\u90e8\u8bbe\u4e3a\u84dd\u8272 np.fill((0, 0, 255)) \u53c2\u6570 \uff1a color : (R,G,B)\u6216(R,G,B,W)\u5143\u7ec4 write() \u5c06\u989c\u8272\u6570\u636e\u53d1\u9001\u5230LED\u706f\u5e26 np[0] = (255, 0, 0) np.write() # \u5b9e\u9645\u66f4\u65b0LED \u52a8\u624b\u5b9e\u9a8c \u5b9e\u9a8c\u4e00\uff1a\u70b9\u4eae4\u4e2a\u706f\u7136\u540e\u7184\u706d \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin,PWM from neopixel import NeoPixel import time np = NeoPixel(Pin(2), 10) # \u63a7\u523610\u4e2aLED\uff0cGPIO2 # \u7b2c\u4e00\u4e2a\u706f\u663e\u793a\u7ea2\u8272 np[0] = [255,0,0] np.write() # \u7b2c\u4e8c\u4e2a\u706f\u663e\u793a\u7eff\u8272 np[1] = [0,255,0] np.write() # \u7b2c\u4e8c\u4e2a\u706f\u663e\u793a\u84dd\u8272 np[2] = [0,0,255] np.write() # \u7b2c\u4e8c\u4e2a\u706f\u663e\u793a\u767d\u8272 np[3] = [255,255,255] np.write() # \u505c\u75592\u79d2\u540e\uff0c\u5168\u90e8\u7184\u706d time.sleep(2) np.fill((0,0,0)) np.write()55,255] np.write() \u5b9e\u9a8c\u4e8c\uff1a\u7ed9\u706f\u73e0\u968f\u673a\u5206\u914d\u989c\u8272 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin,PWM from neopixel import NeoPixel import random np = NeoPixel(Pin(2), 10) # \u63a7\u523610\u4e2aLED\uff0cGPIO2 # \u4ea7\u751f10\u4e2aRGB\u5217\u8868\u503c list =[] for i in range(10): list1 = [] for j in range(3): list1.append(random.randint(0,255)) list.append(list1) for i in range(10): np[i] = list[i] np.write() \u5b9e\u9a8c\u4e09\uff1a\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u5b9e\u73b0\u70ab\u9177\u6548\u679c WS2812B LED \u7b80\u4ecb WS2812B \u662f\u4e00\u6b3e\u667a\u80fd\u63a7\u5236 LED \u5149\u6e90\uff0c\u5c06\u63a7\u5236\u7535\u8def\u548c RGB \u82af\u7247\u96c6\u6210\u5728 5050 \u5c01\u88c5\u4e2d\uff0c\u5f62\u6210\u5b8c\u6574\u50cf\u7d20\u70b9\u3002 WS122812B\u5e93\u6587\u4ef6 MicroPython\u7684\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u5927\u91cf\u7684\u5e93\u6587\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u4f7f\u7528\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u5f00\u53d1\u6548\u7387\uff0c\u964d\u4f4e\u4e86\u5f00\u53d1\u7684\u96be\u5ea6\u3002\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u7f51\u4e0a\u627e\u6765\u7684\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aWS2812B import time from machine import Pin from neopixel import NeoPixel # \u6d41\u661f\u96e8\u52a8\u753b\u6548\u679c class WS2812B_1: ''' \u6d41\u661f\u96e8\u6d41\u6c34\u706f\u6548\u679c :param pin: \u706f\u6761\u5f15\u811a :param num: \u706f\u6761\u4e2dLED\u706f\u6570\u91cf :param length: \u6d41\u52a8\u4eae\u6761\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u540c\u65f6\u53d1\u5149\u7684LED\u706f\u6570\u91cf :param lolor: \u706f\u5149\u989c\u8272\uff0c\u5143\u7ec4\u683c\u5f0f\uff0c\u5143\u7d20\u6570\u91cf\u4e3a3\uff0c\u4f8b\u5982\uff1acolor=(255, 0, 0) :param speed: \u706f\u5149\u6d41\u52a8\u7684\u901f\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u79d2 ''' def __init__(self, pin, num,color=(255, 0, 0),length=5, speed=50): self.num = num self.pin = pin self.color = color self.length = length self.speed = speed self.np = NeoPixel(Pin(self.pin), self.num) def meteor_effect(self): for i in range(len(self.np) + self.length): for j in range(len(self.np)): # \u8ba1\u7b97\u4eae\u5ea6\u8870\u51cf brightness = max(0, 255 - (abs(i - j) * (255 // self.length))) self.np[j] = tuple(int(c * brightness / 255) for c in self.color) self.np.write() time.sleep_ms(self.speed) self.np.fill((0, 0, 0)) class WS2812B_2: ''' \u5168\u706f\u73e0\u5f69\u8679\u6e10\u53d8 :param pin: \u706f\u6761\u5f15\u811a :param num: \u706f\u6761\u4e2dLED\u706f\u6570\u91cf :param waith: \u6e10\u53d8\u7684\u95f4\u9694\u65f6\u95f4 ''' def __init__(self, pin, num,waith=5): self.num = num self.pin = pin self.np = NeoPixel(Pin(self.pin), self.num) self.waith = waith def rainbow_cycle(self,wait=20): for j in range(256): # \u8272\u76f8\u5faa\u73af for i in range(len(self.np)): hue = (i * 256 // len(self.np)) + j self.np[i] = self.hsv_to_rgb(hue % 256, 255, 50) self.np.write() time.sleep_ms(self.waith) # HSV\u8f6cRGB\u51fd\u6570\uff08\u7b80\u5316\u7248\uff09 def hsv_to_rgb(self,h, s=255, v=50): h = h % 256 if s == 0: return (v, v, v) region = h // 43 remainder = (h % 43) * 6 p = (v * (255 - s)) >> 8 q = (v * (255 - ((s * remainder) >> 8))) >> 8 t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8 if region == 0: return (v, t, p) elif region == 1: return (q, v, p) elif region == 2: return (p, v, t) elif region == 3: return (p, q, v) elif region == 4: return (t, p, v) else: return (v, p, q) if __name__ == \"__main__\": while True : led = WS2812B_1(pin =2,num=10, color = (0,255,255), length = 3, speed = 100) led.meteor_effect() led = WS2812B_2(pin =2,num=10,waith=5) led.rainbow_cycle() \u5bfc\u5165\u5e93\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\u5f97\u5230\u60f3\u8981\u7684\u6548\u679c # \u5bfc\u5165\u521a\u624d\u7684\u5e93\u6587\u4ef6 from common.WS2812B import WS2812B_1,WS2812B_2 while True : # \u5f69\u8679\u706f\u6e10\u53d8\u6548\u679c led = WS2812B_1(pin =2,num=10, color = (0,255,255), length = 3, speed = 100) led.meteor_effect() # \u6d41\u661f\u96e8\u706f\u5149\u6548\u679c led = WS2812B_2(pin =2,num=10,waith=5) led.rainbow_cycle()","title":"7.RGB LED\u706f\u6761"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/#rgb-led","text":"","title":"RGB LED\u706f\u6761"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 RGB LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 RGB - LED\u706f\u6761 2 \u5b9e\u7269\u63a5\u7ebf","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/#micropython-neopixel","text":"\u53c2\u6570\u8bf4\u660e\uff1a \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e \u9ed8\u8ba4\u503c pin Pin\u5bf9\u8c61 \u6570\u636e\u5f15\u811a \u5fc5\u586b n int LED\u6570\u91cf \u5fc5\u586b bpp int \u6bcf\u50cf\u7d20\u5b57\u8282\u6570(3=RGB,4=RGBW) 3 timing int \u65f6\u5e8f\u6a21\u5f0f(0=\u8f6f\u4ef6,1=\u786c\u4ef6RMT) 0 \u793a\u4f8b # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin from neopixel import NeoPixel # \u63a7\u523610\u4e2aLED\uff0cGPIO2\u5f15\u811a np = NeoPixel(Pin(2), 10) \u64cd\u4f5c\u65b9\u6cd5\uff1a \u7d22\u5f15\u8bbf\u95ee (\u901a\u8fc7\u7d22\u5f15\u8bfb\u5199\u5355\u4e2aLED\u989c\u8272) # \u8bbe\u7f6e\u7b2c1\u4e2aLED\u4e3a\u7ea2\u8272 np[0] = (255, 0, 0) # \u83b7\u53d6\u7b2c2\u4e2aLED\u989c\u8272 color = np[1] # \u8fd4\u56de(R,G,B)\u5143\u7ec4 \u6ce8\u610f \uff1a \u4fee\u6539\u540e\u9700\u8c03\u7528 write() \u751f\u6548 \u7d22\u5f15\u4ece0\u5f00\u59cb\uff0c\u4e0d\u80fd\u8d8a\u754c fill(color) \u6279\u91cf\u8bbe\u7f6e\u6240\u6709LED\u989c\u8272\uff09 # \u5168\u90e8\u8bbe\u4e3a\u84dd\u8272 np.fill((0, 0, 255)) \u53c2\u6570 \uff1a color : (R,G,B)\u6216(R,G,B,W)\u5143\u7ec4 write() \u5c06\u989c\u8272\u6570\u636e\u53d1\u9001\u5230LED\u706f\u5e26 np[0] = (255, 0, 0) np.write() # \u5b9e\u9645\u66f4\u65b0LED","title":"MicroPython NeoPixel \u7c7b\u8be6\u89e3"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/#_2","text":"","title":"\u52a8\u624b\u5b9e\u9a8c"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/#4","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin,PWM from neopixel import NeoPixel import time np = NeoPixel(Pin(2), 10) # \u63a7\u523610\u4e2aLED\uff0cGPIO2 # \u7b2c\u4e00\u4e2a\u706f\u663e\u793a\u7ea2\u8272 np[0] = [255,0,0] np.write() # \u7b2c\u4e8c\u4e2a\u706f\u663e\u793a\u7eff\u8272 np[1] = [0,255,0] np.write() # \u7b2c\u4e8c\u4e2a\u706f\u663e\u793a\u84dd\u8272 np[2] = [0,0,255] np.write() # \u7b2c\u4e8c\u4e2a\u706f\u663e\u793a\u767d\u8272 np[3] = [255,255,255] np.write() # \u505c\u75592\u79d2\u540e\uff0c\u5168\u90e8\u7184\u706d time.sleep(2) np.fill((0,0,0)) np.write()55,255] np.write()","title":"\u5b9e\u9a8c\u4e00\uff1a\u70b9\u4eae4\u4e2a\u706f\u7136\u540e\u7184\u706d"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin,PWM from neopixel import NeoPixel import random np = NeoPixel(Pin(2), 10) # \u63a7\u523610\u4e2aLED\uff0cGPIO2 # \u4ea7\u751f10\u4e2aRGB\u5217\u8868\u503c list =[] for i in range(10): list1 = [] for j in range(3): list1.append(random.randint(0,255)) list.append(list1) for i in range(10): np[i] = list[i] np.write()","title":"\u5b9e\u9a8c\u4e8c\uff1a\u7ed9\u706f\u73e0\u968f\u673a\u5206\u914d\u989c\u8272"},{"location":"MicroPython/RGB%20LED%E7%81%AF%E6%9D%A1/#_4","text":"WS2812B LED \u7b80\u4ecb WS2812B \u662f\u4e00\u6b3e\u667a\u80fd\u63a7\u5236 LED \u5149\u6e90\uff0c\u5c06\u63a7\u5236\u7535\u8def\u548c RGB \u82af\u7247\u96c6\u6210\u5728 5050 \u5c01\u88c5\u4e2d\uff0c\u5f62\u6210\u5b8c\u6574\u50cf\u7d20\u70b9\u3002 WS122812B\u5e93\u6587\u4ef6 MicroPython\u7684\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u5927\u91cf\u7684\u5e93\u6587\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u4f7f\u7528\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u5f00\u53d1\u6548\u7387\uff0c\u964d\u4f4e\u4e86\u5f00\u53d1\u7684\u96be\u5ea6\u3002\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u7f51\u4e0a\u627e\u6765\u7684\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aWS2812B import time from machine import Pin from neopixel import NeoPixel # \u6d41\u661f\u96e8\u52a8\u753b\u6548\u679c class WS2812B_1: ''' \u6d41\u661f\u96e8\u6d41\u6c34\u706f\u6548\u679c :param pin: \u706f\u6761\u5f15\u811a :param num: \u706f\u6761\u4e2dLED\u706f\u6570\u91cf :param length: \u6d41\u52a8\u4eae\u6761\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u540c\u65f6\u53d1\u5149\u7684LED\u706f\u6570\u91cf :param lolor: \u706f\u5149\u989c\u8272\uff0c\u5143\u7ec4\u683c\u5f0f\uff0c\u5143\u7d20\u6570\u91cf\u4e3a3\uff0c\u4f8b\u5982\uff1acolor=(255, 0, 0) :param speed: \u706f\u5149\u6d41\u52a8\u7684\u901f\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u79d2 ''' def __init__(self, pin, num,color=(255, 0, 0),length=5, speed=50): self.num = num self.pin = pin self.color = color self.length = length self.speed = speed self.np = NeoPixel(Pin(self.pin), self.num) def meteor_effect(self): for i in range(len(self.np) + self.length): for j in range(len(self.np)): # \u8ba1\u7b97\u4eae\u5ea6\u8870\u51cf brightness = max(0, 255 - (abs(i - j) * (255 // self.length))) self.np[j] = tuple(int(c * brightness / 255) for c in self.color) self.np.write() time.sleep_ms(self.speed) self.np.fill((0, 0, 0)) class WS2812B_2: ''' \u5168\u706f\u73e0\u5f69\u8679\u6e10\u53d8 :param pin: \u706f\u6761\u5f15\u811a :param num: \u706f\u6761\u4e2dLED\u706f\u6570\u91cf :param waith: \u6e10\u53d8\u7684\u95f4\u9694\u65f6\u95f4 ''' def __init__(self, pin, num,waith=5): self.num = num self.pin = pin self.np = NeoPixel(Pin(self.pin), self.num) self.waith = waith def rainbow_cycle(self,wait=20): for j in range(256): # \u8272\u76f8\u5faa\u73af for i in range(len(self.np)): hue = (i * 256 // len(self.np)) + j self.np[i] = self.hsv_to_rgb(hue % 256, 255, 50) self.np.write() time.sleep_ms(self.waith) # HSV\u8f6cRGB\u51fd\u6570\uff08\u7b80\u5316\u7248\uff09 def hsv_to_rgb(self,h, s=255, v=50): h = h % 256 if s == 0: return (v, v, v) region = h // 43 remainder = (h % 43) * 6 p = (v * (255 - s)) >> 8 q = (v * (255 - ((s * remainder) >> 8))) >> 8 t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8 if region == 0: return (v, t, p) elif region == 1: return (q, v, p) elif region == 2: return (p, v, t) elif region == 3: return (p, q, v) elif region == 4: return (t, p, v) else: return (v, p, q) if __name__ == \"__main__\": while True : led = WS2812B_1(pin =2,num=10, color = (0,255,255), length = 3, speed = 100) led.meteor_effect() led = WS2812B_2(pin =2,num=10,waith=5) led.rainbow_cycle() \u5bfc\u5165\u5e93\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\u5f97\u5230\u60f3\u8981\u7684\u6548\u679c # \u5bfc\u5165\u521a\u624d\u7684\u5e93\u6587\u4ef6 from common.WS2812B import WS2812B_1,WS2812B_2 while True : # \u5f69\u8679\u706f\u6e10\u53d8\u6548\u679c led = WS2812B_1(pin =2,num=10, color = (0,255,255), length = 3, speed = 100) led.meteor_effect() # \u6d41\u661f\u96e8\u706f\u5149\u6548\u679c led = WS2812B_2(pin =2,num=10,waith=5) led.rainbow_cycle()","title":"\u5b9e\u9a8c\u4e09\uff1a\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u5b9e\u73b0\u70ab\u9177\u6548\u679c"},{"location":"MicroPython/SD%E8%AF%BB%E5%8D%A1%E5%99%A8%E6%A8%A1%E5%9D%97/","text":"SD\u8bfb\u5361\u5668\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 SD\u8bfb\u5361\u5668\u6a21\u5757 1 5 \u53cc\u5934\u675c\u90a6\u6570\u636e\u7ebf 6 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 SD\u8bfb\u5361\u5668 - MOSI 23 2 SD\u8bfb\u5361\u5668 - MOSO 19 3 SD\u8bfb\u5361\u5668 - SCK 18 4 SD\u8bfb\u5361\u5668 - CS 8 SD\u8bfb\u5361\u5668\u6a21\u5757** MicroSD\u5361\u901a\u8fc7SD\u5361\u63a5\u53e3\u4e0e\u7cfb\u7edf\u8fdb\u884c\u901a\u4fe1\uff0c\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u3002SD\u5361\u5e38\u7528\u4e8e\u6570\u636e\u8bb0\u5f55\u5668\uff0c\u4f8b\u5982\u73af\u5883\u76d1\u6d4b\u8bbe\u5907\u3002\u901a\u8fc7\u5b9a\u671f\u5c06\u4f20\u611f\u5668\u6570\u636e\u5199\u5165SD\u5361\uff0c\u53ef\u4ee5\u957f\u671f\u4fdd\u5b58\u6570\u636e\uff0c\u4fbf\u4e8e\u540e\u7eed\u5206\u6790\u3002\u5728\u9700\u8981\u5b58\u50a8\u5927\u91cf\u6570\u636e\u7684\u573a\u666f\u4e2d\uff0cSD\u5361\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u9009\u62e9\u3002\u4f8b\u5982\uff0c\u5728\u7269\u8054\u7f51\u8bbe\u5907\u4e2d\uff0cSD\u5361\u53ef\u4ee5\u7528\u4e8e\u5b58\u50a8\u914d\u7f6e\u6587\u4ef6\u3001\u65e5\u5fd7\u6587\u4ef6\u7b49\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a sdcard.py \u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 \"\"\" MicroPython driver for SD cards using SPI bus. Requires an SPI bus and a CS pin. Provides readblocks and writeblocks methods so the device can be mounted as a filesystem. Example usage on pyboard: import pyb, sdcard, os sd = sdcard.SDCard(pyb.SPI(1), pyb.Pin.board.X5) pyb.mount(sd, '/sd2') os.listdir('/') Example usage on ESP8266: import machine, sdcard, os sd = sdcard.SDCard(machine.SPI(1), machine.Pin(15)) os.mount(sd, '/sd') os.listdir('/') \"\"\" from micropython import const import time _CMD_TIMEOUT = const(100) _R1_IDLE_STATE = const(1 << 0) # R1_ERASE_RESET = const(1 << 1) _R1_ILLEGAL_COMMAND = const(1 << 2) # R1_COM_CRC_ERROR = const(1 << 3) # R1_ERASE_SEQUENCE_ERROR = const(1 << 4) # R1_ADDRESS_ERROR = const(1 << 5) # R1_PARAMETER_ERROR = const(1 << 6) _TOKEN_CMD25 = const(0xFC) _TOKEN_STOP_TRAN = const(0xFD) _TOKEN_DATA = const(0xFE) class SDCard: def __init__(self, spi, cs, baudrate=1320000): self.spi = spi self.cs = cs self.cmdbuf = bytearray(6) self.dummybuf = bytearray(512) self.tokenbuf = bytearray(1) for i in range(512): self.dummybuf[i] = 0xFF self.dummybuf_memoryview = memoryview(self.dummybuf) # initialise the card self.init_card(baudrate) def init_spi(self, baudrate): try: master = self.spi.MASTER except AttributeError: # on ESP8266 self.spi.init(baudrate=baudrate, phase=0, polarity=0) else: # on pyboard self.spi.init(master, baudrate=baudrate, phase=0, polarity=0) def init_card(self, baudrate): # init CS pin self.cs.init(self.cs.OUT, value=1) # init SPI bus; use low data rate for initialisation self.init_spi(100000) # clock card at least 100 cycles with cs high for i in range(16): self.spi.write(b\"\\xff\") # CMD0: init card; should return _R1_IDLE_STATE (allow 5 attempts) for _ in range(5): if self.cmd(0, 0, 0x95) == _R1_IDLE_STATE: break else: raise OSError(\"no SD card\") # CMD8: determine card version r = self.cmd(8, 0x01AA, 0x87, 4) if r == _R1_IDLE_STATE: self.init_card_v2() elif r == (_R1_IDLE_STATE | _R1_ILLEGAL_COMMAND): self.init_card_v1() else: raise OSError(\"couldn't determine SD card version\") # get the number of sectors # CMD9: response R2 (R1 byte + 16-byte block read) if self.cmd(9, 0, 0, 0, False) != 0: raise OSError(\"no response from SD card\") csd = bytearray(16) self.readinto(csd) if csd[0] & 0xC0 == 0x40: # CSD version 2.0 self.sectors = ((csd[8] << 8 | csd[9]) + 1) * 1024 elif csd[0] & 0xC0 == 0x00: # CSD version 1.0 (old, <=2GB) c_size = (csd[6] & 0b11) << 10 | csd[7] << 2 | csd[8] >> 6 c_size_mult = (csd[9] & 0b11) << 1 | csd[10] >> 7 read_bl_len = csd[5] & 0b1111 capacity = (c_size + 1) * (2 ** (c_size_mult + 2)) * (2**read_bl_len) self.sectors = capacity // 512 else: raise OSError(\"SD card CSD format not supported\") # print('sectors', self.sectors) # CMD16: set block length to 512 bytes if self.cmd(16, 512, 0) != 0: raise OSError(\"can't set 512 block size\") # set to high data rate now that it's initialised self.init_spi(baudrate) def init_card_v1(self): for i in range(_CMD_TIMEOUT): self.cmd(55, 0, 0) if self.cmd(41, 0, 0) == 0: # SDSC card, uses byte addressing in read/write/erase commands self.cdv = 512 # print(\"[SDCard] v1 card\") return raise OSError(\"timeout waiting for v1 card\") def init_card_v2(self): for i in range(_CMD_TIMEOUT): time.sleep_ms(50) self.cmd(58, 0, 0, 4) self.cmd(55, 0, 0) if self.cmd(41, 0x40000000, 0) == 0: self.cmd(58, 0, 0, -4) # 4-byte response, negative means keep the first byte ocr = self.tokenbuf[0] # get first byte of response, which is OCR if not ocr & 0x40: # SDSC card, uses byte addressing in read/write/erase commands self.cdv = 512 else: # SDHC/SDXC card, uses block addressing in read/write/erase commands self.cdv = 1 # print(\"[SDCard] v2 card\") return raise OSError(\"timeout waiting for v2 card\") def cmd(self, cmd, arg, crc, final=0, release=True, skip1=False): self.cs(0) # create and send the command buf = self.cmdbuf buf[0] = 0x40 | cmd buf[1] = arg >> 24 buf[2] = arg >> 16 buf[3] = arg >> 8 buf[4] = arg buf[5] = crc self.spi.write(buf) if skip1: self.spi.readinto(self.tokenbuf, 0xFF) # wait for the response (response[7] == 0) for i in range(_CMD_TIMEOUT): self.spi.readinto(self.tokenbuf, 0xFF) response = self.tokenbuf[0] if not (response & 0x80): # this could be a big-endian integer that we are getting here # if final<0 then store the first byte to tokenbuf and discard the rest if final < 0: self.spi.readinto(self.tokenbuf, 0xFF) final = -1 - final for j in range(final): self.spi.write(b\"\\xff\") if release: self.cs(1) self.spi.write(b\"\\xff\") return response # timeout self.cs(1) self.spi.write(b\"\\xff\") return -1 def readinto(self, buf): self.cs(0) # read until start byte (0xff) for i in range(_CMD_TIMEOUT): self.spi.readinto(self.tokenbuf, 0xFF) if self.tokenbuf[0] == _TOKEN_DATA: break time.sleep_ms(1) else: self.cs(1) raise OSError(\"timeout waiting for response\") # read data mv = self.dummybuf_memoryview if len(buf) != len(mv): mv = mv[: len(buf)] self.spi.write_readinto(mv, buf) # read checksum self.spi.write(b\"\\xff\") self.spi.write(b\"\\xff\") self.cs(1) self.spi.write(b\"\\xff\") def write(self, token, buf): self.cs(0) # send: start of block, data, checksum self.spi.read(1, token) self.spi.write(buf) self.spi.write(b\"\\xff\") self.spi.write(b\"\\xff\") # check the response if (self.spi.read(1, 0xFF)[0] & 0x1F) != 0x05: self.cs(1) self.spi.write(b\"\\xff\") return # wait for write to finish while self.spi.read(1, 0xFF)[0] == 0: pass self.cs(1) self.spi.write(b\"\\xff\") def write_token(self, token): self.cs(0) self.spi.read(1, token) self.spi.write(b\"\\xff\") # wait for write to finish while self.spi.read(1, 0xFF)[0] == 0x00: pass self.cs(1) self.spi.write(b\"\\xff\") def readblocks(self, block_num, buf): nblocks = len(buf) // 512 assert nblocks and not len(buf) % 512, \"Buffer length is invalid\" if nblocks == 1: # CMD17: set read address for single block if self.cmd(17, block_num * self.cdv, 0, release=False) != 0: # release the card self.cs(1) raise OSError(5) # EIO # receive the data and release card self.readinto(buf) else: # CMD18: set read address for multiple blocks if self.cmd(18, block_num * self.cdv, 0, release=False) != 0: # release the card self.cs(1) raise OSError(5) # EIO offset = 0 mv = memoryview(buf) while nblocks: # receive the data and release card self.readinto(mv[offset : offset + 512]) offset += 512 nblocks -= 1 if self.cmd(12, 0, 0xFF, skip1=True): raise OSError(5) # EIO def writeblocks(self, block_num, buf): nblocks, err = divmod(len(buf), 512) assert nblocks and not err, \"Buffer length is invalid\" if nblocks == 1: # CMD24: set write address for single block if self.cmd(24, block_num * self.cdv, 0) != 0: raise OSError(5) # EIO # send the data self.write(_TOKEN_DATA, buf) else: # CMD25: set write address for first block if self.cmd(25, block_num * self.cdv, 0) != 0: raise OSError(5) # EIO # send the data offset = 0 mv = memoryview(buf) while nblocks: self.write(_TOKEN_CMD25, mv[offset : offset + 512]) offset += 512 nblocks -= 1 self.write_token(_TOKEN_STOP_TRAN) def ioctl(self, op, arg): if op == 4: # get number of blocks return self.sectors if op == 5: # get block size in bytes return 512 \u5b9e\u9a8c\u4e00\uff1a\u8bfb\u5199SD\u5361\u4e2d\u7684\u6570\u636e \u4ee3\u7801\u5982\u4e0b\uff1a import os from machine import Pin, SoftSPI from sdcard import SDCard # \u63a5\u7ebf\u8bf4\u660e: # MISO -> GPTO 19 # MOSI -> GPIO 23 # SCK -> GPIO 18 # CS -> GPIO 5 spisd=SoftSPI(-1, miso=Pin(19), mosi=Pin(23), sck=Pin(18)) sd=SDCard(spisd, Pin(5)) print('\u672a\u6302\u8f7dSD\u4e4b\u524d:{}'.format(os.listdir())) vfs=os.VfsFat(sd) os.mount(vfs,'/sd') print('\u6302\u8f7dSD\u5f00\u4e4b\u540e:{}'.format(os.listdir())) os.chdir('sd') print('SD\u5361\u4e2d\u7684\u6587\u4ef6:{}'.format(os.listdir())) with open(\"/sd/test.txt\", \"w\") as f: for i in range(1, 101): f.write(str(i)+\"\\n\") print(\"\u5df2\u7ecf\u5c061 2 3....100\u5199\u5165\u5230SD\u5361\u4e2d\u7684text.txt\u6587\u4ef6\")","title":"52.SD\u8bfb\u5361\u5668\u6a21\u5757"},{"location":"MicroPython/SD%E8%AF%BB%E5%8D%A1%E5%99%A8%E6%A8%A1%E5%9D%97/#sd","text":"","title":"SD\u8bfb\u5361\u5668\u6a21\u5757"},{"location":"MicroPython/SD%E8%AF%BB%E5%8D%A1%E5%99%A8%E6%A8%A1%E5%9D%97/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 SD\u8bfb\u5361\u5668\u6a21\u5757 1 5 \u53cc\u5934\u675c\u90a6\u6570\u636e\u7ebf 6 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 SD\u8bfb\u5361\u5668 - MOSI 23 2 SD\u8bfb\u5361\u5668 - MOSO 19 3 SD\u8bfb\u5361\u5668 - SCK 18 4 SD\u8bfb\u5361\u5668 - CS 8 SD\u8bfb\u5361\u5668\u6a21\u5757** MicroSD\u5361\u901a\u8fc7SD\u5361\u63a5\u53e3\u4e0e\u7cfb\u7edf\u8fdb\u884c\u901a\u4fe1\uff0c\u5b9e\u73b0\u4e86\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u3002SD\u5361\u5e38\u7528\u4e8e\u6570\u636e\u8bb0\u5f55\u5668\uff0c\u4f8b\u5982\u73af\u5883\u76d1\u6d4b\u8bbe\u5907\u3002\u901a\u8fc7\u5b9a\u671f\u5c06\u4f20\u611f\u5668\u6570\u636e\u5199\u5165SD\u5361\uff0c\u53ef\u4ee5\u957f\u671f\u4fdd\u5b58\u6570\u636e\uff0c\u4fbf\u4e8e\u540e\u7eed\u5206\u6790\u3002\u5728\u9700\u8981\u5b58\u50a8\u5927\u91cf\u6570\u636e\u7684\u573a\u666f\u4e2d\uff0cSD\u5361\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u9009\u62e9\u3002\u4f8b\u5982\uff0c\u5728\u7269\u8054\u7f51\u8bbe\u5907\u4e2d\uff0cSD\u5361\u53ef\u4ee5\u7528\u4e8e\u5b58\u50a8\u914d\u7f6e\u6587\u4ef6\u3001\u65e5\u5fd7\u6587\u4ef6\u7b49\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a sdcard.py \u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 \"\"\" MicroPython driver for SD cards using SPI bus. Requires an SPI bus and a CS pin. Provides readblocks and writeblocks methods so the device can be mounted as a filesystem. Example usage on pyboard: import pyb, sdcard, os sd = sdcard.SDCard(pyb.SPI(1), pyb.Pin.board.X5) pyb.mount(sd, '/sd2') os.listdir('/') Example usage on ESP8266: import machine, sdcard, os sd = sdcard.SDCard(machine.SPI(1), machine.Pin(15)) os.mount(sd, '/sd') os.listdir('/') \"\"\" from micropython import const import time _CMD_TIMEOUT = const(100) _R1_IDLE_STATE = const(1 << 0) # R1_ERASE_RESET = const(1 << 1) _R1_ILLEGAL_COMMAND = const(1 << 2) # R1_COM_CRC_ERROR = const(1 << 3) # R1_ERASE_SEQUENCE_ERROR = const(1 << 4) # R1_ADDRESS_ERROR = const(1 << 5) # R1_PARAMETER_ERROR = const(1 << 6) _TOKEN_CMD25 = const(0xFC) _TOKEN_STOP_TRAN = const(0xFD) _TOKEN_DATA = const(0xFE) class SDCard: def __init__(self, spi, cs, baudrate=1320000): self.spi = spi self.cs = cs self.cmdbuf = bytearray(6) self.dummybuf = bytearray(512) self.tokenbuf = bytearray(1) for i in range(512): self.dummybuf[i] = 0xFF self.dummybuf_memoryview = memoryview(self.dummybuf) # initialise the card self.init_card(baudrate) def init_spi(self, baudrate): try: master = self.spi.MASTER except AttributeError: # on ESP8266 self.spi.init(baudrate=baudrate, phase=0, polarity=0) else: # on pyboard self.spi.init(master, baudrate=baudrate, phase=0, polarity=0) def init_card(self, baudrate): # init CS pin self.cs.init(self.cs.OUT, value=1) # init SPI bus; use low data rate for initialisation self.init_spi(100000) # clock card at least 100 cycles with cs high for i in range(16): self.spi.write(b\"\\xff\") # CMD0: init card; should return _R1_IDLE_STATE (allow 5 attempts) for _ in range(5): if self.cmd(0, 0, 0x95) == _R1_IDLE_STATE: break else: raise OSError(\"no SD card\") # CMD8: determine card version r = self.cmd(8, 0x01AA, 0x87, 4) if r == _R1_IDLE_STATE: self.init_card_v2() elif r == (_R1_IDLE_STATE | _R1_ILLEGAL_COMMAND): self.init_card_v1() else: raise OSError(\"couldn't determine SD card version\") # get the number of sectors # CMD9: response R2 (R1 byte + 16-byte block read) if self.cmd(9, 0, 0, 0, False) != 0: raise OSError(\"no response from SD card\") csd = bytearray(16) self.readinto(csd) if csd[0] & 0xC0 == 0x40: # CSD version 2.0 self.sectors = ((csd[8] << 8 | csd[9]) + 1) * 1024 elif csd[0] & 0xC0 == 0x00: # CSD version 1.0 (old, <=2GB) c_size = (csd[6] & 0b11) << 10 | csd[7] << 2 | csd[8] >> 6 c_size_mult = (csd[9] & 0b11) << 1 | csd[10] >> 7 read_bl_len = csd[5] & 0b1111 capacity = (c_size + 1) * (2 ** (c_size_mult + 2)) * (2**read_bl_len) self.sectors = capacity // 512 else: raise OSError(\"SD card CSD format not supported\") # print('sectors', self.sectors) # CMD16: set block length to 512 bytes if self.cmd(16, 512, 0) != 0: raise OSError(\"can't set 512 block size\") # set to high data rate now that it's initialised self.init_spi(baudrate) def init_card_v1(self): for i in range(_CMD_TIMEOUT): self.cmd(55, 0, 0) if self.cmd(41, 0, 0) == 0: # SDSC card, uses byte addressing in read/write/erase commands self.cdv = 512 # print(\"[SDCard] v1 card\") return raise OSError(\"timeout waiting for v1 card\") def init_card_v2(self): for i in range(_CMD_TIMEOUT): time.sleep_ms(50) self.cmd(58, 0, 0, 4) self.cmd(55, 0, 0) if self.cmd(41, 0x40000000, 0) == 0: self.cmd(58, 0, 0, -4) # 4-byte response, negative means keep the first byte ocr = self.tokenbuf[0] # get first byte of response, which is OCR if not ocr & 0x40: # SDSC card, uses byte addressing in read/write/erase commands self.cdv = 512 else: # SDHC/SDXC card, uses block addressing in read/write/erase commands self.cdv = 1 # print(\"[SDCard] v2 card\") return raise OSError(\"timeout waiting for v2 card\") def cmd(self, cmd, arg, crc, final=0, release=True, skip1=False): self.cs(0) # create and send the command buf = self.cmdbuf buf[0] = 0x40 | cmd buf[1] = arg >> 24 buf[2] = arg >> 16 buf[3] = arg >> 8 buf[4] = arg buf[5] = crc self.spi.write(buf) if skip1: self.spi.readinto(self.tokenbuf, 0xFF) # wait for the response (response[7] == 0) for i in range(_CMD_TIMEOUT): self.spi.readinto(self.tokenbuf, 0xFF) response = self.tokenbuf[0] if not (response & 0x80): # this could be a big-endian integer that we are getting here # if final<0 then store the first byte to tokenbuf and discard the rest if final < 0: self.spi.readinto(self.tokenbuf, 0xFF) final = -1 - final for j in range(final): self.spi.write(b\"\\xff\") if release: self.cs(1) self.spi.write(b\"\\xff\") return response # timeout self.cs(1) self.spi.write(b\"\\xff\") return -1 def readinto(self, buf): self.cs(0) # read until start byte (0xff) for i in range(_CMD_TIMEOUT): self.spi.readinto(self.tokenbuf, 0xFF) if self.tokenbuf[0] == _TOKEN_DATA: break time.sleep_ms(1) else: self.cs(1) raise OSError(\"timeout waiting for response\") # read data mv = self.dummybuf_memoryview if len(buf) != len(mv): mv = mv[: len(buf)] self.spi.write_readinto(mv, buf) # read checksum self.spi.write(b\"\\xff\") self.spi.write(b\"\\xff\") self.cs(1) self.spi.write(b\"\\xff\") def write(self, token, buf): self.cs(0) # send: start of block, data, checksum self.spi.read(1, token) self.spi.write(buf) self.spi.write(b\"\\xff\") self.spi.write(b\"\\xff\") # check the response if (self.spi.read(1, 0xFF)[0] & 0x1F) != 0x05: self.cs(1) self.spi.write(b\"\\xff\") return # wait for write to finish while self.spi.read(1, 0xFF)[0] == 0: pass self.cs(1) self.spi.write(b\"\\xff\") def write_token(self, token): self.cs(0) self.spi.read(1, token) self.spi.write(b\"\\xff\") # wait for write to finish while self.spi.read(1, 0xFF)[0] == 0x00: pass self.cs(1) self.spi.write(b\"\\xff\") def readblocks(self, block_num, buf): nblocks = len(buf) // 512 assert nblocks and not len(buf) % 512, \"Buffer length is invalid\" if nblocks == 1: # CMD17: set read address for single block if self.cmd(17, block_num * self.cdv, 0, release=False) != 0: # release the card self.cs(1) raise OSError(5) # EIO # receive the data and release card self.readinto(buf) else: # CMD18: set read address for multiple blocks if self.cmd(18, block_num * self.cdv, 0, release=False) != 0: # release the card self.cs(1) raise OSError(5) # EIO offset = 0 mv = memoryview(buf) while nblocks: # receive the data and release card self.readinto(mv[offset : offset + 512]) offset += 512 nblocks -= 1 if self.cmd(12, 0, 0xFF, skip1=True): raise OSError(5) # EIO def writeblocks(self, block_num, buf): nblocks, err = divmod(len(buf), 512) assert nblocks and not err, \"Buffer length is invalid\" if nblocks == 1: # CMD24: set write address for single block if self.cmd(24, block_num * self.cdv, 0) != 0: raise OSError(5) # EIO # send the data self.write(_TOKEN_DATA, buf) else: # CMD25: set write address for first block if self.cmd(25, block_num * self.cdv, 0) != 0: raise OSError(5) # EIO # send the data offset = 0 mv = memoryview(buf) while nblocks: self.write(_TOKEN_CMD25, mv[offset : offset + 512]) offset += 512 nblocks -= 1 self.write_token(_TOKEN_STOP_TRAN) def ioctl(self, op, arg): if op == 4: # get number of blocks return self.sectors if op == 5: # get block size in bytes return 512","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/SD%E8%AF%BB%E5%8D%A1%E5%99%A8%E6%A8%A1%E5%9D%97/#sd_1","text":"\u4ee3\u7801\u5982\u4e0b\uff1a import os from machine import Pin, SoftSPI from sdcard import SDCard # \u63a5\u7ebf\u8bf4\u660e: # MISO -> GPTO 19 # MOSI -> GPIO 23 # SCK -> GPIO 18 # CS -> GPIO 5 spisd=SoftSPI(-1, miso=Pin(19), mosi=Pin(23), sck=Pin(18)) sd=SDCard(spisd, Pin(5)) print('\u672a\u6302\u8f7dSD\u4e4b\u524d:{}'.format(os.listdir())) vfs=os.VfsFat(sd) os.mount(vfs,'/sd') print('\u6302\u8f7dSD\u5f00\u4e4b\u540e:{}'.format(os.listdir())) os.chdir('sd') print('SD\u5361\u4e2d\u7684\u6587\u4ef6:{}'.format(os.listdir())) with open(\"/sd/test.txt\", \"w\") as f: for i in range(1, 101): f.write(str(i)+\"\\n\") print(\"\u5df2\u7ecf\u5c061 2 3....100\u5199\u5165\u5230SD\u5361\u4e2d\u7684text.txt\u6587\u4ef6\")","title":"\u5b9e\u9a8c\u4e00\uff1a\u8bfb\u5199SD\u5361\u4e2d\u7684\u6570\u636e"},{"location":"MicroPython/TCS342%E9%A2%9C%E8%89%B2%E4%BC%A0%E6%84%9F%E5%99%A8%E6%A8%A1%E5%9D%97/","text":"TCS342\u989c\u8272\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 TCS\u989c\u8272\u4f20\u611f\u5668 1 5 PH2.0\u6570\u636e\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SDA 21 2 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SCL 22 TCS\u989c\u8272\u4f20\u611f\u5668\u4ecb\u7ecd TCS34725\u4f20\u611f\u5668\u6a21\u5757\uff0c\u4f7f\u7528IIC\u6216\u8005UART\u901a\u4fe1\uff0c\u53ef\u76f4\u63a5\u8f93\u51faRGB\u503c\u3002\u6709\u529f\u8017\u5c0f\uff0c\u4f53\u79ef\u5c0f\uff0c\u5b89\u88c5\u65b9\u4fbf\u7684\u4f18\u52bf\u3002\u5176\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u901a\u8fc7\u7167\u660eLED\u53d1\u5149\uff0c\u7167\u5c04\u5230\u88ab\u6d4b\u7269\u4f53\u540e\uff0c\u8fd4\u56de\u5149\u7ecf\u8fc7\u6ee4\u955c\u68c0\u6d4bRGB\u7684\u6bd4\u4f8b\u503c\uff0c\u6839\u636eRGB\u7684\u6bd4\u4f8b\u503c\u8bc6\u522b\u51fa\u989c\u8272\u3002\u6a21\u5757\u5177\u6709\u4e24\u79cd\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff0c\u5373\u4e32\u53e3UART\uff08TTL\u7535\u5e73\uff09\u6216\u8005IIC\uff082\u7ebf\uff09\uff0c\u4e32\u53e3\u7684\u6ce2\u7279\u7387\u67099600bps\u4e0e115200bps\u53ef\u914d\u7f6e\uff0c\u6709\u8fde\u7eed\u3001\u8be2\u95ee\u8f93\u51fa\u4e24\u79cd\u65b9\u5f0f\u8fd8\u80fd\u6389\u7535\u4fdd\u5b58\u8bbe\u7f6e\u3002\u8fd8\u53ef\u4ee5\u8fdb\u884c\u7b80\u5355\u76847\u79cd\u989c\u8272\u8bc6\u522b\uff0c\u4e0d\u9700\u8981\u8ba1\u7b97RGB\u503c\u3002\u80fd\u9002\u5e94\u4e0d\u540c\u7684\u5de5\u4f5c\u73af\u5883\uff0c\u4e0e\u5355\u7247\u673a\u53ca\u7535\u8111\u8fde\u63a5\u3002\u6a21\u5757\u53e6\u5916\u53ef\u4ee5\u8bbe\u7f6e\u5355\u72ec\u4f20\u611f\u5668\u82af\u7247\u5de5\u4f5c\u6a21\u5f0f\uff0c\u4f5c\u4e3a\u7b80\u5355\u4f20\u611f\u5668\u6a21\u5757\uff0cMCU\u4e0d\u53c2\u4e0e\u6570\u636e\u5904\u7406\u5de5\u4f5c\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2atcs34725.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import I2C import time import ustruct const = lambda x:x _COMMAND_BIT = const(0x80) _REGISTER_ENABLE = const(0x00) _REGISTER_ATIME = const(0x01) _REGISTER_AILT = const(0x04) _REGISTER_AIHT = const(0x06) _REGISTER_ID = const(0x12) _REGISTER_APERS = const(0x0c) _REGISTER_CONTROL = const(0x0f) _REGISTER_SENSORID = const(0x12) _REGISTER_STATUS = const(0x13) _REGISTER_CDATA = const(0x14) _REGISTER_RDATA = const(0x16) _REGISTER_GDATA = const(0x18) _REGISTER_BDATA = const(0x1a) _ENABLE_AIEN = const(0x10) _ENABLE_WEN = const(0x08) _ENABLE_AEN = const(0x02) _ENABLE_PON = const(0x01) _GAINS = (1, 4, 16, 60) _CYCLES = (0, 1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60) class TCS34725: def __init__(self, i2c, address=None): self.i2c = i2c self.address = address self._active = False self.integration_time(2.4) sensor_id = self.i2c.scan()[0] if sensor_id not in (0x29,0x10): raise RuntimeError(\"wrong sensor id 0x{:x}\".format(sensor_id)) def _register8(self, register, value=None): register |= _COMMAND_BIT if value is None: return self.i2c.readfrom_mem(self.address, register, 1)[0] data = ustruct.pack('<B', value) self.i2c.writeto_mem(self.address, register, data) def _register16(self, register, value=None): register |= _COMMAND_BIT if value is None: data = self.i2c.readfrom_mem(self.address, register, 2) return ustruct.unpack('<H', data)[0] data = ustruct.pack('<H', value) self.i2c.writeto_mem(self.address, register, data) def active(self, value=None): if value is None: return self._active value = bool(value) if self._active == value: return self._active = value enable = self._register8(_REGISTER_ENABLE) if value: self._register8(_REGISTER_ENABLE, enable | _ENABLE_PON) time.sleep_ms(3) self._register8(_REGISTER_ENABLE, enable | _ENABLE_PON | _ENABLE_AEN) else: self._register8(_REGISTER_ENABLE, enable & ~(_ENABLE_PON | _ENABLE_AEN)) def sensor_id(self): return self.i2c.scan()[0] def integration_time(self, value=None): if value is None: return self._integration_time value = min(614.4, max(2.4, value)) cycles = int(value / 2.4) self._integration_time = cycles * 2.4 return self._register8(_REGISTER_ATIME, 256 - cycles) def gain(self, value): if value is None: return _GAINS[self._register8(_REGISTER_CONTROL)] if value not in _GAINS: raise ValueError(\"gain must be 1, 4, 16 or 60\") return self._register8(_REGISTER_CONTROL, _GAINS.index(value)) def _valid(self): return bool(self._register8(_REGISTER_STATUS) & 0x01) def read(self, raw=False): was_active = self.active() self.active(True) while not self._valid(): time.sleep_ms(int(self._integration_time + 0.9)) data = tuple(self._register16(register) for register in ( _REGISTER_RDATA, _REGISTER_GDATA, _REGISTER_BDATA, _REGISTER_CDATA, )) self.active(was_active) if raw: return data return self._temperature_and_lux(data) def _temperature_and_lux(self, data): r, g, b, c = data x = -0.14282 * r + 1.54924 * g + -0.95641 * b y = -0.32466 * r + 1.57837 * g + -0.73191 * b z = -0.68202 * r + 0.77073 * g + 0.56332 * b d = x + y + z n = (x / d - 0.3320) / (0.1858 - y / d) cct = 449.0 * n**3 + 3525.0 * n**2 + 6823.3 * n + 5520.33 return cct, y def threshold(self, cycles=None, min_value=None, max_value=None): if cycles is None and min_value is None and max_value is None: min_value = self._register16(_REGISTER_AILT) max_value = self._register16(_REGISTER_AILT) if self._register8(_REGISTER_ENABLE) & _ENABLE_AIEN: cycles = _CYCLES[self._register8(_REGISTER_APERS) & 0x0f] else: cycles = -1 return cycles, min_value, max_value if min_value is not None: self._register16(_REGISTER_AILT, min_value) if max_value is not None: self._register16(_REGISTER_AIHT, max_value) if cycles is not None: enable = self._register8(_REGISTER_ENABLE) if cycles == -1: self._register8(_REGISTER_ENABLE, enable & ~(_ENABLE_AIEN)) else: self._register8(_REGISTER_ENABLE, enable | _ENABLE_AIEN) if cycles not in _CYCLES: raise ValueError(\"invalid persistence cycles\") self._register8(_REGISTER_APERS, _CYCLES.index(cycles)) def interrupt(self, value=None): if value is None: return bool(self._register8(_REGISTER_STATUS) & _ENABLE_AIEN) if value: raise ValueError(\"interrupt can only be cleared\") self.i2c.writeto(self.address, b'\\xe6') def html_rgb(data): r, g, b, c = data red = pow((int((r/c) * 256) / 255), 2.5) * 255 green = pow((int((g/c) * 256) / 255), 2.5) * 255 blue = pow((int((b/c) * 256) / 255), 2.5) * 255 return red, green, blue def html_hex(data): r, g, b = html_rgb(data) return \"{0:02x}{1:02x}{2:02x}\".format(int(r),int(g),int(b)) \u5b9e\u9a8c\u4e00\uff1a\u8bfb\u53d6RGB\u7684\u503c \u4ee3\u7801\u5982\u4e0b\uff1a import machine import time from machine import Pin,I2C from libs.tcs34725 import TCS34725 import time # \u521b\u5efaI2C\u5bf9\u8c61 i2cObj = I2C(1,scl = Pin(22),sda = Pin(21),freq = 400000) # \u6253\u5370\u626b\u63cf\u51fa\u7684I2C\u5bf9\u8c61 print(\"I2C Bus Scan: \", i2cObj .scan(), \"\\n\") # \u521b\u5efatcs34725\u989c\u8272\u8bc6\u522b\u6a21\u5757\u5bf9\u8c61 tcs = TCS34725(i2cObj ,0x29) # \u521b\u5efaRGB\u989c\u8272\u8ba1\u7b97\u51fd\u6570 def Colour(): try: red,green,blue,colour = tcs.read(True) # \u8bfb\u53d6\u989c\u8272\u503c if colour != 0: # \u5982\u679ccolour\u4e0d\u7b49\u4e8e0 Red = int((red / colour) * 32) # \u8ba1\u7b97\u7ea2\u8272\u7684\u503c Green = int((green / colour) * 32) # \u8ba1\u7b97\u7eff\u8272\u7684\u503c Blue = int((blue / colour) * 32) # \u8ba1\u7b97\u84dd\u8272\u7684\u503c return Red,Green,Blue else: return 0,0,0 except : print(\"\u6570\u636e\u5f02\u5e38\uff01\") RuntimeError RGB = [0, 0, 0] while True: print('\uff08r\uff0cg\uff0cb\uff09\u5bf9\u5e94\u662f',end =\"\") # \u83b7\u53d6\u989c\u8272R,G,B\u51fd\u6570 print(Colour()) time.sleep_ms(10)","title":"51.TCS342\u989c\u8272\u4f20\u611f\u5668\u6a21\u5757"},{"location":"MicroPython/TCS342%E9%A2%9C%E8%89%B2%E4%BC%A0%E6%84%9F%E5%99%A8%E6%A8%A1%E5%9D%97/#tcs342","text":"","title":"TCS342\u989c\u8272\u4f20\u611f\u5668"},{"location":"MicroPython/TCS342%E9%A2%9C%E8%89%B2%E4%BC%A0%E6%84%9F%E5%99%A8%E6%A8%A1%E5%9D%97/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 TCS\u989c\u8272\u4f20\u611f\u5668 1 5 PH2.0\u6570\u636e\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SDA 21 2 NFC\u611f\u5e94\u8bfb\u5199\u5361\u6a21\u5757 - SCL 22 TCS\u989c\u8272\u4f20\u611f\u5668\u4ecb\u7ecd TCS34725\u4f20\u611f\u5668\u6a21\u5757\uff0c\u4f7f\u7528IIC\u6216\u8005UART\u901a\u4fe1\uff0c\u53ef\u76f4\u63a5\u8f93\u51faRGB\u503c\u3002\u6709\u529f\u8017\u5c0f\uff0c\u4f53\u79ef\u5c0f\uff0c\u5b89\u88c5\u65b9\u4fbf\u7684\u4f18\u52bf\u3002\u5176\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u901a\u8fc7\u7167\u660eLED\u53d1\u5149\uff0c\u7167\u5c04\u5230\u88ab\u6d4b\u7269\u4f53\u540e\uff0c\u8fd4\u56de\u5149\u7ecf\u8fc7\u6ee4\u955c\u68c0\u6d4bRGB\u7684\u6bd4\u4f8b\u503c\uff0c\u6839\u636eRGB\u7684\u6bd4\u4f8b\u503c\u8bc6\u522b\u51fa\u989c\u8272\u3002\u6a21\u5757\u5177\u6709\u4e24\u79cd\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff0c\u5373\u4e32\u53e3UART\uff08TTL\u7535\u5e73\uff09\u6216\u8005IIC\uff082\u7ebf\uff09\uff0c\u4e32\u53e3\u7684\u6ce2\u7279\u7387\u67099600bps\u4e0e115200bps\u53ef\u914d\u7f6e\uff0c\u6709\u8fde\u7eed\u3001\u8be2\u95ee\u8f93\u51fa\u4e24\u79cd\u65b9\u5f0f\u8fd8\u80fd\u6389\u7535\u4fdd\u5b58\u8bbe\u7f6e\u3002\u8fd8\u53ef\u4ee5\u8fdb\u884c\u7b80\u5355\u76847\u79cd\u989c\u8272\u8bc6\u522b\uff0c\u4e0d\u9700\u8981\u8ba1\u7b97RGB\u503c\u3002\u80fd\u9002\u5e94\u4e0d\u540c\u7684\u5de5\u4f5c\u73af\u5883\uff0c\u4e0e\u5355\u7247\u673a\u53ca\u7535\u8111\u8fde\u63a5\u3002\u6a21\u5757\u53e6\u5916\u53ef\u4ee5\u8bbe\u7f6e\u5355\u72ec\u4f20\u611f\u5668\u82af\u7247\u5de5\u4f5c\u6a21\u5f0f\uff0c\u4f5c\u4e3a\u7b80\u5355\u4f20\u611f\u5668\u6a21\u5757\uff0cMCU\u4e0d\u53c2\u4e0e\u6570\u636e\u5904\u7406\u5de5\u4f5c\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2atcs34725.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import I2C import time import ustruct const = lambda x:x _COMMAND_BIT = const(0x80) _REGISTER_ENABLE = const(0x00) _REGISTER_ATIME = const(0x01) _REGISTER_AILT = const(0x04) _REGISTER_AIHT = const(0x06) _REGISTER_ID = const(0x12) _REGISTER_APERS = const(0x0c) _REGISTER_CONTROL = const(0x0f) _REGISTER_SENSORID = const(0x12) _REGISTER_STATUS = const(0x13) _REGISTER_CDATA = const(0x14) _REGISTER_RDATA = const(0x16) _REGISTER_GDATA = const(0x18) _REGISTER_BDATA = const(0x1a) _ENABLE_AIEN = const(0x10) _ENABLE_WEN = const(0x08) _ENABLE_AEN = const(0x02) _ENABLE_PON = const(0x01) _GAINS = (1, 4, 16, 60) _CYCLES = (0, 1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60) class TCS34725: def __init__(self, i2c, address=None): self.i2c = i2c self.address = address self._active = False self.integration_time(2.4) sensor_id = self.i2c.scan()[0] if sensor_id not in (0x29,0x10): raise RuntimeError(\"wrong sensor id 0x{:x}\".format(sensor_id)) def _register8(self, register, value=None): register |= _COMMAND_BIT if value is None: return self.i2c.readfrom_mem(self.address, register, 1)[0] data = ustruct.pack('<B', value) self.i2c.writeto_mem(self.address, register, data) def _register16(self, register, value=None): register |= _COMMAND_BIT if value is None: data = self.i2c.readfrom_mem(self.address, register, 2) return ustruct.unpack('<H', data)[0] data = ustruct.pack('<H', value) self.i2c.writeto_mem(self.address, register, data) def active(self, value=None): if value is None: return self._active value = bool(value) if self._active == value: return self._active = value enable = self._register8(_REGISTER_ENABLE) if value: self._register8(_REGISTER_ENABLE, enable | _ENABLE_PON) time.sleep_ms(3) self._register8(_REGISTER_ENABLE, enable | _ENABLE_PON | _ENABLE_AEN) else: self._register8(_REGISTER_ENABLE, enable & ~(_ENABLE_PON | _ENABLE_AEN)) def sensor_id(self): return self.i2c.scan()[0] def integration_time(self, value=None): if value is None: return self._integration_time value = min(614.4, max(2.4, value)) cycles = int(value / 2.4) self._integration_time = cycles * 2.4 return self._register8(_REGISTER_ATIME, 256 - cycles) def gain(self, value): if value is None: return _GAINS[self._register8(_REGISTER_CONTROL)] if value not in _GAINS: raise ValueError(\"gain must be 1, 4, 16 or 60\") return self._register8(_REGISTER_CONTROL, _GAINS.index(value)) def _valid(self): return bool(self._register8(_REGISTER_STATUS) & 0x01) def read(self, raw=False): was_active = self.active() self.active(True) while not self._valid(): time.sleep_ms(int(self._integration_time + 0.9)) data = tuple(self._register16(register) for register in ( _REGISTER_RDATA, _REGISTER_GDATA, _REGISTER_BDATA, _REGISTER_CDATA, )) self.active(was_active) if raw: return data return self._temperature_and_lux(data) def _temperature_and_lux(self, data): r, g, b, c = data x = -0.14282 * r + 1.54924 * g + -0.95641 * b y = -0.32466 * r + 1.57837 * g + -0.73191 * b z = -0.68202 * r + 0.77073 * g + 0.56332 * b d = x + y + z n = (x / d - 0.3320) / (0.1858 - y / d) cct = 449.0 * n**3 + 3525.0 * n**2 + 6823.3 * n + 5520.33 return cct, y def threshold(self, cycles=None, min_value=None, max_value=None): if cycles is None and min_value is None and max_value is None: min_value = self._register16(_REGISTER_AILT) max_value = self._register16(_REGISTER_AILT) if self._register8(_REGISTER_ENABLE) & _ENABLE_AIEN: cycles = _CYCLES[self._register8(_REGISTER_APERS) & 0x0f] else: cycles = -1 return cycles, min_value, max_value if min_value is not None: self._register16(_REGISTER_AILT, min_value) if max_value is not None: self._register16(_REGISTER_AIHT, max_value) if cycles is not None: enable = self._register8(_REGISTER_ENABLE) if cycles == -1: self._register8(_REGISTER_ENABLE, enable & ~(_ENABLE_AIEN)) else: self._register8(_REGISTER_ENABLE, enable | _ENABLE_AIEN) if cycles not in _CYCLES: raise ValueError(\"invalid persistence cycles\") self._register8(_REGISTER_APERS, _CYCLES.index(cycles)) def interrupt(self, value=None): if value is None: return bool(self._register8(_REGISTER_STATUS) & _ENABLE_AIEN) if value: raise ValueError(\"interrupt can only be cleared\") self.i2c.writeto(self.address, b'\\xe6') def html_rgb(data): r, g, b, c = data red = pow((int((r/c) * 256) / 255), 2.5) * 255 green = pow((int((g/c) * 256) / 255), 2.5) * 255 blue = pow((int((b/c) * 256) / 255), 2.5) * 255 return red, green, blue def html_hex(data): r, g, b = html_rgb(data) return \"{0:02x}{1:02x}{2:02x}\".format(int(r),int(g),int(b))","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/TCS342%E9%A2%9C%E8%89%B2%E4%BC%A0%E6%84%9F%E5%99%A8%E6%A8%A1%E5%9D%97/#rgb","text":"\u4ee3\u7801\u5982\u4e0b\uff1a import machine import time from machine import Pin,I2C from libs.tcs34725 import TCS34725 import time # \u521b\u5efaI2C\u5bf9\u8c61 i2cObj = I2C(1,scl = Pin(22),sda = Pin(21),freq = 400000) # \u6253\u5370\u626b\u63cf\u51fa\u7684I2C\u5bf9\u8c61 print(\"I2C Bus Scan: \", i2cObj .scan(), \"\\n\") # \u521b\u5efatcs34725\u989c\u8272\u8bc6\u522b\u6a21\u5757\u5bf9\u8c61 tcs = TCS34725(i2cObj ,0x29) # \u521b\u5efaRGB\u989c\u8272\u8ba1\u7b97\u51fd\u6570 def Colour(): try: red,green,blue,colour = tcs.read(True) # \u8bfb\u53d6\u989c\u8272\u503c if colour != 0: # \u5982\u679ccolour\u4e0d\u7b49\u4e8e0 Red = int((red / colour) * 32) # \u8ba1\u7b97\u7ea2\u8272\u7684\u503c Green = int((green / colour) * 32) # \u8ba1\u7b97\u7eff\u8272\u7684\u503c Blue = int((blue / colour) * 32) # \u8ba1\u7b97\u84dd\u8272\u7684\u503c return Red,Green,Blue else: return 0,0,0 except : print(\"\u6570\u636e\u5f02\u5e38\uff01\") RuntimeError RGB = [0, 0, 0] while True: print('\uff08r\uff0cg\uff0cb\uff09\u5bf9\u5e94\u662f',end =\"\") # \u83b7\u53d6\u989c\u8272R,G,B\u51fd\u6570 print(Colour()) time.sleep_ms(10)","title":"\u5b9e\u9a8c\u4e00\uff1a\u8bfb\u53d6RGB\u7684\u503c"},{"location":"MicroPython/%E4%B8%80%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/","text":"\u4e00\u4f4d\u6570\u7801\u7ba1 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u4e00\u4f4d\u6570\u7801\u7ba1 1 4 \u4ea4\u901a\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u4e00\u4f4d\u6570\u7801\u7ba1-DS 23 2 \u4e00\u4f4d\u6570\u7801\u7ba1-SCK 5 3 \u4e00\u4f4d\u6570\u7801\u7ba1-RCK 18 4 \u4ea4\u901a\u706f-G 25 5 \u4ea4\u901a\u706f-Y 26 6 \u4ea4\u901a\u706f-R 27 \u5b9e\u7269\u642d\u5efa \u4e00\u4f4d\u6570\u7801\u7ba1 LED\u6570\u7801\u7ba1\u662f\u5c06\u53d1\u5149\u4e8c\u6781\u7ba1\u505a\u6210\u6bb5\uff0c\u7136\u540e\u628a\u6bb5\u7ec4\u5408\u6210\u201c8\u201d\u7684\u5f62\u72b6\uff0c\u63a7\u5236\u4e0d\u540c\u6bb5\u7684\u53d1\u5149\u7ec4\u5408\uff0c\u5f62\u6210\u6570\u5b57\u6837\u5f0f\u3002 \u4e00\u4f4d\u6570\u7801\u7ba1 \u662f\u4e00\u79cd\u5e38\u89c1\u7684\u663e\u793a\u5668\u4ef6\uff0c\u7531 7 \u4e2a LED \u6bb5\uff08a-g\uff09 \u548c 1 \u4e2a\u5c0f\u6570\u70b9\uff08dp\uff09 \u7ec4\u6210\uff0c\u901a\u8fc7\u4e0d\u540c\u6bb5\u7684\u7ec4\u5408\u663e\u793a\u6570\u5b57\uff080-9\uff09\u6216\u90e8\u5206\u5b57\u6bcd\uff08\u5982 A-F\uff09\u3002\u5176\u540d\u79f0\u201c\u4e00\u4f4d\u201d\u8868\u793a\u5b83\u53ea\u80fd\u663e\u793a\u5355\u4e2a\u5b57\u7b26\u3002 \u56e0\u76f4\u63a5\u4f7f\u7528\u6570\u7801\u7ba1\uff0c\u9700\u8981\u8fde\u63a5\u5f88\u591a\u7684\u63a5\u7ebf\uff0c\u6bd4\u8f83\u7e41\u7410\uff0c\u73b0\u5728\u5e38\u89c1\u7684\u6570\u7801\u7ba1\u90fd\u4f7f\u7528\u4e86 74HC595\u4e32\u884c\u8f93\u5165/\u5e76\u884c\u8f93\u51fa\u79fb\u4f4d\u5bc4\u5b58\u5668\u82af\u7247\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u5f15\u811a\u7684\u5360\u7528\uff0c\u800c\u4e14\u76ee\u524d\u6709\u6210\u719f\u7684\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528\uff0c\u5927\u5927\u7684\u964d\u4f4e\u4e86\u7f16\u7a0b\u7684\u96be\u5ea6 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aSegmentDisp.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a from machine import Pin import time class SegmentDisplay: def __init__(self, data_pin, clock_pin, latch_pin, common_cathode=True): \"\"\" \u521d\u59cb\u5316 74HC595 \u6570\u7801\u7ba1\u9a71\u52a8\u7c7b :param data_pin: \u6570\u636e\u5f15\u811a (DS) :param clock_pin: \u65f6\u949f\u5f15\u811a (SHCP) :param latch_pin: \u9501\u5b58\u5f15\u811a (STCP) :param common_cathode: \u6570\u7801\u7ba1\u7c7b\u578b (True\u4e3a\u5171\u9634\uff0cFalse\u4e3a\u5171\u9633) \"\"\" self.data = Pin(data_pin, Pin.OUT) self.clock = Pin(clock_pin, Pin.OUT) self.latch = Pin(latch_pin, Pin.OUT) self.common_cathode = common_cathode # \u5b9a\u4e49\u5171\u9634\u6570\u7801\u7ba1\u6bb5\u7801\u8868 (0-9, A-F, \u5c0f\u6570\u70b9) self.segment_codes = { '0': 0x3F, '1': 0x06, '2': 0x5B, '3': 0x4F, '4': 0x66, '5': 0x6D, '6': 0x7D, '7': 0x07, '8': 0x7F, '9': 0x6F, 'A': 0x77, 'B': 0x7C, 'C': 0x39, 'D': 0x5E, 'E': 0x79, 'F': 0x71, '.': 0x80, ' ': 0x00, '5.': 0x6D | 0x80 # \u6ce8\u610f\u5c0f\u6570\u70b9\u7684\u663e\u793a\u65b9\u6cd5 } # \u5982\u679c\u662f\u5171\u9633\u6570\u7801\u7ba1\uff0c\u6bb5\u7801\u53d6\u53cd if not self.common_cathode: for key in self.segment_codes: self.segment_codes[key] ^= 0xFF def _shift_out(self, value): \"\"\"\u541174HC595\u79fb\u4f4d\u5bc4\u5b58\u5668\u53d1\u9001\u4e00\u4e2a\u5b57\u8282\u6570\u636e\"\"\" for _ in range(8): self.data.value((value >> 7) & 0x01) # \u53d1\u9001\u6700\u9ad8\u4f4d self.clock.value(1) time.sleep_us(1) self.clock.value(0) time.sleep_us(1) value <<= 1 # \u5de6\u79fb\u51c6\u5907\u53d1\u9001\u4e0b\u4e00\u4f4d def display(self, char): \"\"\" \u663e\u793a\u6307\u5b9a\u5b57\u7b26 :param char: \u8981\u663e\u793a\u7684\u5b57\u7b26 (0-9, A-F, \u6216\u5c0f\u6570\u70b9 '.') \"\"\" # \u83b7\u53d6\u6bb5\u7801\uff0c\u9ed8\u8ba4\u663e\u793a\u7a7a\u683c\uff08\u5168\u706d\uff09 code = self.segment_codes.get(str(char).upper(), 0x00) # \u53d1\u9001\u6570\u636e\u5e76\u9501\u5b58\u8f93\u51fa self.latch.value(0) self._shift_out(code) self.latch.value(1) time.sleep_us(1) self.latch.value(0) def clear(self): \"\"\"\u5173\u95ed\u6240\u6709\u6bb5\"\"\" self.display(' ') \u5b9e\u9a8c\u4e00\uff1a\u4e00\u4f4d\u6570\u7801\u7ba1\u7684\u663e\u793a \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u4e00\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u201c0~9\u201d\u3001\u201cA~F\u201d\u548c\u5c0f\u6570\u70b9\u201c.\u201d ''' # # \u4ece\u6211\u4eec\u5b58\u653e\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6\u7684\u6587\u4ef6\u5939\uff08libs\uff09\u4e2d\u5bfc\u5165SegmentDisplay from libs.SegmentDisplay import SegmentDisplay import time # \u521d\u59cb\u5316\u6570\u7801\u7ba1 (DS=13, SHCP=14, STCP=15\uff0c\u5171\u9634\u6781)\uff0c\u914d\u7f6e\u5bf9\u5e94\u7684\u7ba1\u811a seg = SegmentDisplay(data_pin=23, clock_pin=5,latch_pin=18, common_cathode=True) # \u7b2c\u4e00\uff1a\u663e\u793a\u6570\u5b57 0-9 for num in range(10): seg.display(num) time.sleep(0.5) # \u7b2c\u4e8c\uff1a\u663e\u793a\u5b57\u6bcd A-F for char in ['A', 'B', 'C', 'D', 'E', 'F','.']: seg.display(char) time.sleep(1) # \u7b2c\u4e09\uff1a\u663e\u793a\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57 seg.display('5.') # \u9700\u5728\u6bb5\u7801\u8868\u4e2d\u5b9a\u4e49\u5bf9\u5e94\u7ec4\u5408 time.sleep(5) # \u7b2c\u56db\uff1a\u5173\u95ed\u663e\u793a seg.clear() \u901a\u8fc7\u8c03\u7528\u7b2c\u4e09\u65b9\u5e93\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u5e38\u89c1\u7684\u6570\u5b57\u5b57\u6bcd\u548c\u5c0f\u6570\u70b9\u7684\u663e\u793a \u6ce8\u610f\uff1a \u5982\u679c\u9700\u8981\u663e\u793a\u6570\u5b57\u6216\u5b57\u6bcd\u540c\u65f6\u663e\u793a\u201c.\u201d\uff0c\u5c31\u9700\u8981\u5728\u5e93\u6587\u4ef6\u4e2d\uff0c\u589e\u52a0\u5bf9\u5e94\u7684\u7ec4\u5408 \u793a\u4f8b\uff1a \u5b9e\u9a8c\u4e8c\uff1a\u5012\u8ba1\u65f6\u4ea4\u901a\u706f \u591a\u7ebf\u7a0b\u7684\u4ecb\u7ecd MicroPython \u901a\u8fc7 _thread \u6a21\u5757\u63d0\u4f9b \u8f7b\u91cf\u7ea7\u591a\u7ebf\u7a0b \u652f\u6301\uff0c\u9002\u7528\u4e8e\u5e76\u53d1\u6267\u884c\u7b80\u5355\u4efb\u52a1\u3002 _thread.start_new_thread(func, args) \u542f\u52a8\u65b0\u7ebf\u7a0b\uff0c args \u4e3a\u53c2\u6570\u5143\u7ec4\u3002 \u7a0b\u5e8f\u5982\u4e0b\uff1a from libs.SegmentDisplay import SegmentDisplay from machine import Pin import time import _thread # \u521d\u59cb\u5316\u6570\u7801\u7ba1 (DS=13, SHCP=14, STCP=15\uff0c\u5171\u9634\u6781)\uff0c\u914d\u7f6e\u5bf9\u5e94\u7684\u7ba1\u811a display1 = SegmentDisplay(data_pin=23, clock_pin=5,latch_pin=18, common_cathode=True) # \u5b9a\u4e49\u6570\u7801\u7ba1\u7ebf\u7a0b def display1_task(): while True : for num in range(9,-1,-1): display1.display(num) time.sleep(1) for num in range(3,0,-1): display1.display(num) time.sleep(1) for num in range(9,-1,-1): display1.display(num) time.sleep(1) for num in range(3,0,-1): display1.display(num) time.sleep(1) # \u521d\u59cb\u5316\u4ea4\u901a\u706f\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u63a5\u7ebf\u4fee\u6539\uff09 red = Pin(27, Pin.OUT) # \u7ea2\u706f yellow = Pin(26, Pin.OUT) # \u9ec4\u706f green = Pin(25, Pin.OUT) # \u7eff\u706f # \u521d\u59cb\u5316\u6240\u6709\u706f\u706d red.value(0) yellow.value(0) green.value(0) # \u4e3b\u7a0b\u5e8f def traffic_light_task(): while True: # \u7eff\u706f\u9636\u6bb5 green.value(1) # \u7eff\u706f\u4eae print(\"\u7eff\u706f\u901a\u884c\") time.sleep(10) green.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u9ec4\u706f\u7b49\u5f85\") yellow.value(0) time.sleep(0.5) # \u7ea2\u706f\u9636\u6bb5 red.value(1) # \u7ea2\u706f\u4eae print(\"\u7ea2\u706f\u7981\u6b62\") time.sleep(10) red.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21\uff08\u53cc\u5411\u4ea4\u901a\u9700\u8981\uff09 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u51c6\u5907\u901a\u884c\") yellow.value(0) time.sleep(0.5) # \u542f\u52a8\u4ea4\u901a\u706f\u63a7\u5236\u7ebf\u7a0b _thread.start_new_thread(traffic_light_task, ()) # \u542f\u52a8\u6570\u7801\u7ba1\u663e\u793a\u7ebf\u7a0b _thread.start_new_thread(display1_task, ())","title":"13.\u4e00\u4f4d\u6570\u7801\u7ba1"},{"location":"MicroPython/%E4%B8%80%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_1","text":"","title":"\u4e00\u4f4d\u6570\u7801\u7ba1"},{"location":"MicroPython/%E4%B8%80%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u4e00\u4f4d\u6570\u7801\u7ba1 1 4 \u4ea4\u901a\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u4e00\u4f4d\u6570\u7801\u7ba1-DS 23 2 \u4e00\u4f4d\u6570\u7801\u7ba1-SCK 5 3 \u4e00\u4f4d\u6570\u7801\u7ba1-RCK 18 4 \u4ea4\u901a\u706f-G 25 5 \u4ea4\u901a\u706f-Y 26 6 \u4ea4\u901a\u706f-R 27 \u5b9e\u7269\u642d\u5efa \u4e00\u4f4d\u6570\u7801\u7ba1 LED\u6570\u7801\u7ba1\u662f\u5c06\u53d1\u5149\u4e8c\u6781\u7ba1\u505a\u6210\u6bb5\uff0c\u7136\u540e\u628a\u6bb5\u7ec4\u5408\u6210\u201c8\u201d\u7684\u5f62\u72b6\uff0c\u63a7\u5236\u4e0d\u540c\u6bb5\u7684\u53d1\u5149\u7ec4\u5408\uff0c\u5f62\u6210\u6570\u5b57\u6837\u5f0f\u3002 \u4e00\u4f4d\u6570\u7801\u7ba1 \u662f\u4e00\u79cd\u5e38\u89c1\u7684\u663e\u793a\u5668\u4ef6\uff0c\u7531 7 \u4e2a LED \u6bb5\uff08a-g\uff09 \u548c 1 \u4e2a\u5c0f\u6570\u70b9\uff08dp\uff09 \u7ec4\u6210\uff0c\u901a\u8fc7\u4e0d\u540c\u6bb5\u7684\u7ec4\u5408\u663e\u793a\u6570\u5b57\uff080-9\uff09\u6216\u90e8\u5206\u5b57\u6bcd\uff08\u5982 A-F\uff09\u3002\u5176\u540d\u79f0\u201c\u4e00\u4f4d\u201d\u8868\u793a\u5b83\u53ea\u80fd\u663e\u793a\u5355\u4e2a\u5b57\u7b26\u3002 \u56e0\u76f4\u63a5\u4f7f\u7528\u6570\u7801\u7ba1\uff0c\u9700\u8981\u8fde\u63a5\u5f88\u591a\u7684\u63a5\u7ebf\uff0c\u6bd4\u8f83\u7e41\u7410\uff0c\u73b0\u5728\u5e38\u89c1\u7684\u6570\u7801\u7ba1\u90fd\u4f7f\u7528\u4e86 74HC595\u4e32\u884c\u8f93\u5165/\u5e76\u884c\u8f93\u51fa\u79fb\u4f4d\u5bc4\u5b58\u5668\u82af\u7247\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u5f15\u811a\u7684\u5360\u7528\uff0c\u800c\u4e14\u76ee\u524d\u6709\u6210\u719f\u7684\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528\uff0c\u5927\u5927\u7684\u964d\u4f4e\u4e86\u7f16\u7a0b\u7684\u96be\u5ea6 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aSegmentDisp.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a from machine import Pin import time class SegmentDisplay: def __init__(self, data_pin, clock_pin, latch_pin, common_cathode=True): \"\"\" \u521d\u59cb\u5316 74HC595 \u6570\u7801\u7ba1\u9a71\u52a8\u7c7b :param data_pin: \u6570\u636e\u5f15\u811a (DS) :param clock_pin: \u65f6\u949f\u5f15\u811a (SHCP) :param latch_pin: \u9501\u5b58\u5f15\u811a (STCP) :param common_cathode: \u6570\u7801\u7ba1\u7c7b\u578b (True\u4e3a\u5171\u9634\uff0cFalse\u4e3a\u5171\u9633) \"\"\" self.data = Pin(data_pin, Pin.OUT) self.clock = Pin(clock_pin, Pin.OUT) self.latch = Pin(latch_pin, Pin.OUT) self.common_cathode = common_cathode # \u5b9a\u4e49\u5171\u9634\u6570\u7801\u7ba1\u6bb5\u7801\u8868 (0-9, A-F, \u5c0f\u6570\u70b9) self.segment_codes = { '0': 0x3F, '1': 0x06, '2': 0x5B, '3': 0x4F, '4': 0x66, '5': 0x6D, '6': 0x7D, '7': 0x07, '8': 0x7F, '9': 0x6F, 'A': 0x77, 'B': 0x7C, 'C': 0x39, 'D': 0x5E, 'E': 0x79, 'F': 0x71, '.': 0x80, ' ': 0x00, '5.': 0x6D | 0x80 # \u6ce8\u610f\u5c0f\u6570\u70b9\u7684\u663e\u793a\u65b9\u6cd5 } # \u5982\u679c\u662f\u5171\u9633\u6570\u7801\u7ba1\uff0c\u6bb5\u7801\u53d6\u53cd if not self.common_cathode: for key in self.segment_codes: self.segment_codes[key] ^= 0xFF def _shift_out(self, value): \"\"\"\u541174HC595\u79fb\u4f4d\u5bc4\u5b58\u5668\u53d1\u9001\u4e00\u4e2a\u5b57\u8282\u6570\u636e\"\"\" for _ in range(8): self.data.value((value >> 7) & 0x01) # \u53d1\u9001\u6700\u9ad8\u4f4d self.clock.value(1) time.sleep_us(1) self.clock.value(0) time.sleep_us(1) value <<= 1 # \u5de6\u79fb\u51c6\u5907\u53d1\u9001\u4e0b\u4e00\u4f4d def display(self, char): \"\"\" \u663e\u793a\u6307\u5b9a\u5b57\u7b26 :param char: \u8981\u663e\u793a\u7684\u5b57\u7b26 (0-9, A-F, \u6216\u5c0f\u6570\u70b9 '.') \"\"\" # \u83b7\u53d6\u6bb5\u7801\uff0c\u9ed8\u8ba4\u663e\u793a\u7a7a\u683c\uff08\u5168\u706d\uff09 code = self.segment_codes.get(str(char).upper(), 0x00) # \u53d1\u9001\u6570\u636e\u5e76\u9501\u5b58\u8f93\u51fa self.latch.value(0) self._shift_out(code) self.latch.value(1) time.sleep_us(1) self.latch.value(0) def clear(self): \"\"\"\u5173\u95ed\u6240\u6709\u6bb5\"\"\" self.display(' ')","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E4%B8%80%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u4e00\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u201c0~9\u201d\u3001\u201cA~F\u201d\u548c\u5c0f\u6570\u70b9\u201c.\u201d ''' # # \u4ece\u6211\u4eec\u5b58\u653e\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6\u7684\u6587\u4ef6\u5939\uff08libs\uff09\u4e2d\u5bfc\u5165SegmentDisplay from libs.SegmentDisplay import SegmentDisplay import time # \u521d\u59cb\u5316\u6570\u7801\u7ba1 (DS=13, SHCP=14, STCP=15\uff0c\u5171\u9634\u6781)\uff0c\u914d\u7f6e\u5bf9\u5e94\u7684\u7ba1\u811a seg = SegmentDisplay(data_pin=23, clock_pin=5,latch_pin=18, common_cathode=True) # \u7b2c\u4e00\uff1a\u663e\u793a\u6570\u5b57 0-9 for num in range(10): seg.display(num) time.sleep(0.5) # \u7b2c\u4e8c\uff1a\u663e\u793a\u5b57\u6bcd A-F for char in ['A', 'B', 'C', 'D', 'E', 'F','.']: seg.display(char) time.sleep(1) # \u7b2c\u4e09\uff1a\u663e\u793a\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57 seg.display('5.') # \u9700\u5728\u6bb5\u7801\u8868\u4e2d\u5b9a\u4e49\u5bf9\u5e94\u7ec4\u5408 time.sleep(5) # \u7b2c\u56db\uff1a\u5173\u95ed\u663e\u793a seg.clear() \u901a\u8fc7\u8c03\u7528\u7b2c\u4e09\u65b9\u5e93\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u5e38\u89c1\u7684\u6570\u5b57\u5b57\u6bcd\u548c\u5c0f\u6570\u70b9\u7684\u663e\u793a \u6ce8\u610f\uff1a \u5982\u679c\u9700\u8981\u663e\u793a\u6570\u5b57\u6216\u5b57\u6bcd\u540c\u65f6\u663e\u793a\u201c.\u201d\uff0c\u5c31\u9700\u8981\u5728\u5e93\u6587\u4ef6\u4e2d\uff0c\u589e\u52a0\u5bf9\u5e94\u7684\u7ec4\u5408 \u793a\u4f8b\uff1a","title":"\u5b9e\u9a8c\u4e00\uff1a\u4e00\u4f4d\u6570\u7801\u7ba1\u7684\u663e\u793a"},{"location":"MicroPython/%E4%B8%80%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_4","text":"\u591a\u7ebf\u7a0b\u7684\u4ecb\u7ecd MicroPython \u901a\u8fc7 _thread \u6a21\u5757\u63d0\u4f9b \u8f7b\u91cf\u7ea7\u591a\u7ebf\u7a0b \u652f\u6301\uff0c\u9002\u7528\u4e8e\u5e76\u53d1\u6267\u884c\u7b80\u5355\u4efb\u52a1\u3002 _thread.start_new_thread(func, args) \u542f\u52a8\u65b0\u7ebf\u7a0b\uff0c args \u4e3a\u53c2\u6570\u5143\u7ec4\u3002 \u7a0b\u5e8f\u5982\u4e0b\uff1a from libs.SegmentDisplay import SegmentDisplay from machine import Pin import time import _thread # \u521d\u59cb\u5316\u6570\u7801\u7ba1 (DS=13, SHCP=14, STCP=15\uff0c\u5171\u9634\u6781)\uff0c\u914d\u7f6e\u5bf9\u5e94\u7684\u7ba1\u811a display1 = SegmentDisplay(data_pin=23, clock_pin=5,latch_pin=18, common_cathode=True) # \u5b9a\u4e49\u6570\u7801\u7ba1\u7ebf\u7a0b def display1_task(): while True : for num in range(9,-1,-1): display1.display(num) time.sleep(1) for num in range(3,0,-1): display1.display(num) time.sleep(1) for num in range(9,-1,-1): display1.display(num) time.sleep(1) for num in range(3,0,-1): display1.display(num) time.sleep(1) # \u521d\u59cb\u5316\u4ea4\u901a\u706f\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u63a5\u7ebf\u4fee\u6539\uff09 red = Pin(27, Pin.OUT) # \u7ea2\u706f yellow = Pin(26, Pin.OUT) # \u9ec4\u706f green = Pin(25, Pin.OUT) # \u7eff\u706f # \u521d\u59cb\u5316\u6240\u6709\u706f\u706d red.value(0) yellow.value(0) green.value(0) # \u4e3b\u7a0b\u5e8f def traffic_light_task(): while True: # \u7eff\u706f\u9636\u6bb5 green.value(1) # \u7eff\u706f\u4eae print(\"\u7eff\u706f\u901a\u884c\") time.sleep(10) green.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u9ec4\u706f\u7b49\u5f85\") yellow.value(0) time.sleep(0.5) # \u7ea2\u706f\u9636\u6bb5 red.value(1) # \u7ea2\u706f\u4eae print(\"\u7ea2\u706f\u7981\u6b62\") time.sleep(10) red.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21\uff08\u53cc\u5411\u4ea4\u901a\u9700\u8981\uff09 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u51c6\u5907\u901a\u884c\") yellow.value(0) time.sleep(0.5) # \u542f\u52a8\u4ea4\u901a\u706f\u63a7\u5236\u7ebf\u7a0b _thread.start_new_thread(traffic_light_task, ()) # \u542f\u52a8\u6570\u7801\u7ba1\u663e\u793a\u7ebf\u7a0b _thread.start_new_thread(display1_task, ())","title":"\u5b9e\u9a8c\u4e8c\uff1a\u5012\u8ba1\u65f6\u4ea4\u901a\u706f"},{"location":"MicroPython/%E4%B8%80%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_5","text":"","title":""},{"location":"MicroPython/%E4%BA%A4%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%81%AF/","text":"\u6d41\u6c34\u706f \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u4ea4\u901a\u4fe1\u53f7\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7ea2\u706f 27 2 \u9ec4\u706f 26 3 \u7eff\u706f 25 \u5b9e\u7269\u63a5\u7ebf \u4e0a\u624b\u5b9e\u9a8c \u5b9e\u9a8c\u4e00\uff1a\u4ea4\u901a\u706f \u8981\u6c42\uff1a \u7ea2\u706f\u4eae20\u79d2\u540e\uff0c\u9ec4\u706f\u95ea\u70c13\u6b21\uff0c\u7136\u540e\u7eff\u706f\u4eae\uff0c\u5982\u6b64\u5faa\u73af\u5f80\u590d \u6d41\u7a0b\u793a\u610f\uff1a \u7eff\u2192\u9ec4\u2192\u7ea2\u2192\u9ec4\u2192\u5faa\u73af \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u4ea4\u901a\u706f3\u8272\u706f\u8f6e\u6d41\u70b9\u4eae ''' from machine import Pin import time # \u521d\u59cb\u5316\u4ea4\u901a\u706f\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u63a5\u7ebf\u4fee\u6539\uff09 red = Pin(27, Pin.OUT) # \u7ea2\u706f yellow = Pin(26, Pin.OUT) # \u9ec4\u706f green = Pin(25, Pin.OUT) # \u7eff\u706f # \u521d\u59cb\u5316\u6240\u6709\u706f\u706d red.value(0) yellow.value(0) green.value(0) def traffic_light_cycle(): while True: # \u7eff\u706f\u9636\u6bb5 green.value(1) # \u7eff\u706f\u4eae print(\"\u7eff\u706f\u901a\u884c\") time.sleep(10) green.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u9ec4\u706f\u7b49\u5f85\") yellow.value(0) time.sleep(0.5) # \u7ea2\u706f\u9636\u6bb5 red.value(1) # \u7ea2\u706f\u4eae print(\"\u7ea2\u706f\u7981\u6b62\") time.sleep(10) red.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21\uff08\u53cc\u5411\u4ea4\u901a\u9700\u8981\uff09 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u51c6\u5907\u901a\u884c\") yellow.value(0) time.sleep(0.5) # \u542f\u52a8\u4ea4\u901a\u706f\u5faa\u73af traffic_light_cycle() \u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0\u4ea4\u901a\u706f \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aTrafficLight \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time class Trafficlight: def __init__(self, pins, durations): \"\"\" :param pins: \u5f15\u811a\u5b57\u5178 {'red':pin, 'yellow':pin, 'green':pin} :param durations: \u65f6\u95f4\u5b57\u5178 {'green':t, 'yellow':t, 'red':t} \"\"\" self.lights = { 'red': Pin(pins['red'], Pin.OUT), 'yellow': Pin(pins['yellow'], Pin.OUT), 'green': Pin(pins['green'], Pin.OUT) } self.durations = durations self._all_off() def _all_off(self): for led in self.lights.values(): led.off() def set_light(self, color): self._all_off() self.lights[color].on() def run(self): while True: self.set_light('green') time.sleep(self.durations['green']) self._all_off() for i in range(3): self.lights['yellow'].on() time.sleep(self.durations['yellow']) self.lights['yellow'].off() time.sleep(self.durations['yellow']) self._all_off() self.set_light('red') time.sleep(self.durations['red']) self._all_off() if __name__ == \"__main__\": # \u4f7f\u7528\u793a\u4f8b tl = Trafficlight( pins={'red':27, 'yellow':26, 'green':25}, durations={'green':10, 'yellow':0.5, 'red':10} ) tl.run() # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": # \u4f7f\u7528\u793a\u4f8b tl = Trafficlight( pins={'red':27, 'yellow':26, 'green':25}, durations={'green':10, 'yellow':0.5, 'red':10} ) tl.run() \u5bf9\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u6682\u65f6\u5927\u5bb6\u53ef\u4ee5\u4e0d\u8981\u6c42\u4f1a\u81ea\u5df1\u7f16\u5199\uff0c\u4f46\u662f\u8981\u786e\u4fdd\u53ef\u4ee5\u770b\u61c2\uff0c\u80fd\u7406\u89e3\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u601d\u60f3\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u5f15\u811a\u5bf9\u8c61\u5c01\u88c5\u4e3a\u4e00\u4e2a pins \u7684\u5b57\u5178\u3001\u5ef6\u65f6\u65f6\u95f4\u5c01\u88c5\u4e3a durati \u5b57\u5178\uff0c\u540e\u9762\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u76f4\u63a5\u4f20\u5165\u3002\u6211\u4eec\u5c06\u4ea4\u901a\u706f\u7684\u7a0b\u5e8f\u5c01\u88c5\u6574\u5408\u6210\u4e00\u4e2a run \u65b9\u6cd5\u3002 \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b ''' \u5c06\u8fc7\u7a0b\u5f0f\u7684\u4ee3\u7801\u4fee\u6539\u4e3a\u9762\u5411\u5bf9\u8c61\u7684\u5f62\u5f0f \u4ea4\u901a\u706f ''' from common.TrafficLight import Trafficlight # \u9996\u5148\u9700\u8981\u5bfc\u5165\u7c7b\u6587\u4ef6 # \u5b9e\u4f8b\u5316\u5bf9\u8c61 tl = Trafficlight( pins={'red':27, 'yellow':26, 'green':25}, durations={'green':10, 'yellow':0.5, 'red':10} ) # \u8c03\u7528\u7c7b\u65b9\u6cd5 tl.run()","title":"4.\u4ea4\u901a\u4fe1\u53f7\u706f"},{"location":"MicroPython/%E4%BA%A4%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%81%AF/#_1","text":"","title":"\u6d41\u6c34\u706f"},{"location":"MicroPython/%E4%BA%A4%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%81%AF/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u4ea4\u901a\u4fe1\u53f7\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7ea2\u706f 27 2 \u9ec4\u706f 26 3 \u7eff\u706f 25 \u5b9e\u7269\u63a5\u7ebf","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E4%BA%A4%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%81%AF/#_3","text":"","title":"\u4e0a\u624b\u5b9e\u9a8c"},{"location":"MicroPython/%E4%BA%A4%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%81%AF/#_4","text":"\u8981\u6c42\uff1a \u7ea2\u706f\u4eae20\u79d2\u540e\uff0c\u9ec4\u706f\u95ea\u70c13\u6b21\uff0c\u7136\u540e\u7eff\u706f\u4eae\uff0c\u5982\u6b64\u5faa\u73af\u5f80\u590d \u6d41\u7a0b\u793a\u610f\uff1a \u7eff\u2192\u9ec4\u2192\u7ea2\u2192\u9ec4\u2192\u5faa\u73af \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u4ea4\u901a\u706f3\u8272\u706f\u8f6e\u6d41\u70b9\u4eae ''' from machine import Pin import time # \u521d\u59cb\u5316\u4ea4\u901a\u706f\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u63a5\u7ebf\u4fee\u6539\uff09 red = Pin(27, Pin.OUT) # \u7ea2\u706f yellow = Pin(26, Pin.OUT) # \u9ec4\u706f green = Pin(25, Pin.OUT) # \u7eff\u706f # \u521d\u59cb\u5316\u6240\u6709\u706f\u706d red.value(0) yellow.value(0) green.value(0) def traffic_light_cycle(): while True: # \u7eff\u706f\u9636\u6bb5 green.value(1) # \u7eff\u706f\u4eae print(\"\u7eff\u706f\u901a\u884c\") time.sleep(10) green.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u9ec4\u706f\u7b49\u5f85\") yellow.value(0) time.sleep(0.5) # \u7ea2\u706f\u9636\u6bb5 red.value(1) # \u7ea2\u706f\u4eae print(\"\u7ea2\u706f\u7981\u6b62\") time.sleep(10) red.value(0) # \u9ec4\u706f\u8fc7\u6e21\uff0c\u95ea\u70c1\u4e09\u6b21\uff08\u53cc\u5411\u4ea4\u901a\u9700\u8981\uff09 for led in range(3): yellow.value(1) # \u9ec4\u706f\u4eae time.sleep(0.5) print(\"\u51c6\u5907\u901a\u884c\") yellow.value(0) time.sleep(0.5) # \u542f\u52a8\u4ea4\u901a\u706f\u5faa\u73af traffic_light_cycle()","title":"\u5b9e\u9a8c\u4e00\uff1a\u4ea4\u901a\u706f"},{"location":"MicroPython/%E4%BA%A4%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%81%AF/#_5","text":"\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aTrafficLight \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time class Trafficlight: def __init__(self, pins, durations): \"\"\" :param pins: \u5f15\u811a\u5b57\u5178 {'red':pin, 'yellow':pin, 'green':pin} :param durations: \u65f6\u95f4\u5b57\u5178 {'green':t, 'yellow':t, 'red':t} \"\"\" self.lights = { 'red': Pin(pins['red'], Pin.OUT), 'yellow': Pin(pins['yellow'], Pin.OUT), 'green': Pin(pins['green'], Pin.OUT) } self.durations = durations self._all_off() def _all_off(self): for led in self.lights.values(): led.off() def set_light(self, color): self._all_off() self.lights[color].on() def run(self): while True: self.set_light('green') time.sleep(self.durations['green']) self._all_off() for i in range(3): self.lights['yellow'].on() time.sleep(self.durations['yellow']) self.lights['yellow'].off() time.sleep(self.durations['yellow']) self._all_off() self.set_light('red') time.sleep(self.durations['red']) self._all_off() if __name__ == \"__main__\": # \u4f7f\u7528\u793a\u4f8b tl = Trafficlight( pins={'red':27, 'yellow':26, 'green':25}, durations={'green':10, 'yellow':0.5, 'red':10} ) tl.run() # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": # \u4f7f\u7528\u793a\u4f8b tl = Trafficlight( pins={'red':27, 'yellow':26, 'green':25}, durations={'green':10, 'yellow':0.5, 'red':10} ) tl.run() \u5bf9\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u6682\u65f6\u5927\u5bb6\u53ef\u4ee5\u4e0d\u8981\u6c42\u4f1a\u81ea\u5df1\u7f16\u5199\uff0c\u4f46\u662f\u8981\u786e\u4fdd\u53ef\u4ee5\u770b\u61c2\uff0c\u80fd\u7406\u89e3\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u601d\u60f3\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u5f15\u811a\u5bf9\u8c61\u5c01\u88c5\u4e3a\u4e00\u4e2a pins \u7684\u5b57\u5178\u3001\u5ef6\u65f6\u65f6\u95f4\u5c01\u88c5\u4e3a durati \u5b57\u5178\uff0c\u540e\u9762\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u76f4\u63a5\u4f20\u5165\u3002\u6211\u4eec\u5c06\u4ea4\u901a\u706f\u7684\u7a0b\u5e8f\u5c01\u88c5\u6574\u5408\u6210\u4e00\u4e2a run \u65b9\u6cd5\u3002 \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b ''' \u5c06\u8fc7\u7a0b\u5f0f\u7684\u4ee3\u7801\u4fee\u6539\u4e3a\u9762\u5411\u5bf9\u8c61\u7684\u5f62\u5f0f \u4ea4\u901a\u706f ''' from common.TrafficLight import Trafficlight # \u9996\u5148\u9700\u8981\u5bfc\u5165\u7c7b\u6587\u4ef6 # \u5b9e\u4f8b\u5316\u5bf9\u8c61 tl = Trafficlight( pins={'red':27, 'yellow':26, 'green':25}, durations={'green':10, 'yellow':0.5, 'red':10} ) # \u8c03\u7528\u7c7b\u65b9\u6cd5 tl.run()","title":"\u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0\u4ea4\u901a\u706f"},{"location":"MicroPython/%E4%BA%BA%E4%BD%93%E6%84%9F%E5%BA%94%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668 4 2 LED\u706f 2 \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668\u4ecb\u7ecd \u5c0f\u578b\u4eba\u4f53\u611f\u5e94\u6a21\u5757\u662f\u57fa\u4e8e\u7ea2\u5916\u7ebf\u6280\u672f\u7684\u81ea\u52a8\u63a7\u5236\u4ea7\u54c1,\u7075\u654f\u5ea6\u9ad8\uff0c\u53ef\u9760\u6027\u5f3a\uff0c\u8d85\u5c0f\u4f53\u79ef\uff0c\u8d85\u4f4e\u7535\u538b\u5de5\u4f5c\u6a21\u5f0f\u3002\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u7c7b\u81ea\u52a8\u611f\u5e94\u7535\u5668\u8bbe\u5907,\u5c24\u5176\u662f\u5e72\u7535\u6c60\u4f9b\u7535\u7684\u81ea\u52a8\u63a7\u5236\u4ea7\u54c1\u3002\u5168\u81ea\u52a8\u611f\u5e94:\u4eba\u8fdb\u5165\u5176\u611f\u5e94\u8303\u56f4\u5219\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u4eba\u79bb\u5f00\u611f\u5e94\u8303\u56f4\u5219\u81ea\u52a8\u5ef6\u65f6\u5173\u95ed\u9ad8\u7535\u5e73\uff0c\u8f93\u51fa\u4f4e\u7535\u5e73\u3002\u53ef\u91cd\u590d\u89e6\u53d1\u65b9\u5f0f\uff1a\u5373\u611f\u5e94\u8f93\u51fa\u9ad8\u7535\u5e73\u540e\uff0c\u5728\u5ef6\u65f6\u65f6\u95f4\u6bb5\u5185\uff0c\u5982\u679c\u6709\u4eba\u4f53\u5728\u5176\u611f\u5e94\u8303\u56f4\u6d3b\u52a8\uff0c\u5176\u8f93\u51fa\u5c06\u4e00\u76f4\u4fdd\u6301\u9ad8\u7535\u5e73\uff0c\u76f4\u5230\u4eba\u79bb\u5f00\u540e\u624d\u5ef6\u65f6\u5c06\u9ad8\u7535\u5e73\u53d8\u4e3a\u4f4e\u7535\u5e73\uff08\u611f\u5e94\u6a21\u5757\u68c0\u6d4b\u5230\u4eba\u4f53\u7684\u6bcf\u4e00\u6b21\u6d3b\u52a8\u540e\u4f1a\u81ea\u52a8\u987a\u5ef6\u4e00\u4e2a\u5ef6\u65f6\u65f6\u95f4\u6bb5\uff0c\u5e76\u4e14\u4ee5\u6700\u540e\u4e00\u6b21\u6d3b\u52a8\u7684\u65f6\u95f4\u4e3a\u5ef6\u65f6\u65f6\u95f4\u7684\u8d77\u59cb\u70b9)\u3002\u68c0\u67e5\u8ddd\u79bb\u4e3a0-5\u7c73\uff0c3\u7c73\u5185\u6548\u679c\u6700\u4f18\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin,ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 human = Pin(4, Pin.IN) while True: print(human.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a0\uff0c\u6709\u4eba\u4f53\u9760\u8fd1\u8fd4\u56de\uff1a1 \u5b9e\u9a8c\u4e8c\uff1a\u4eba\u4f53\u611f\u5e94\u706f \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u4eba\u4f53\u611f\u5e94\u611f\u5e94\u706f \u6709\u4eba\u9760\u8fd1\u65f6\u706f\u4eae\u3002\u79bb\u5f00\u65f6\u706f\u706d ''' from machine import Pin import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 human = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if human.value() == 1: led.value(1) else: led.value(0)","title":"28.\u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668"},{"location":"MicroPython/%E4%BA%BA%E4%BD%93%E6%84%9F%E5%BA%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668"},{"location":"MicroPython/%E4%BA%BA%E4%BD%93%E6%84%9F%E5%BA%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668 4 2 LED\u706f 2 \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668\u4ecb\u7ecd \u5c0f\u578b\u4eba\u4f53\u611f\u5e94\u6a21\u5757\u662f\u57fa\u4e8e\u7ea2\u5916\u7ebf\u6280\u672f\u7684\u81ea\u52a8\u63a7\u5236\u4ea7\u54c1,\u7075\u654f\u5ea6\u9ad8\uff0c\u53ef\u9760\u6027\u5f3a\uff0c\u8d85\u5c0f\u4f53\u79ef\uff0c\u8d85\u4f4e\u7535\u538b\u5de5\u4f5c\u6a21\u5f0f\u3002\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u7c7b\u81ea\u52a8\u611f\u5e94\u7535\u5668\u8bbe\u5907,\u5c24\u5176\u662f\u5e72\u7535\u6c60\u4f9b\u7535\u7684\u81ea\u52a8\u63a7\u5236\u4ea7\u54c1\u3002\u5168\u81ea\u52a8\u611f\u5e94:\u4eba\u8fdb\u5165\u5176\u611f\u5e94\u8303\u56f4\u5219\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u4eba\u79bb\u5f00\u611f\u5e94\u8303\u56f4\u5219\u81ea\u52a8\u5ef6\u65f6\u5173\u95ed\u9ad8\u7535\u5e73\uff0c\u8f93\u51fa\u4f4e\u7535\u5e73\u3002\u53ef\u91cd\u590d\u89e6\u53d1\u65b9\u5f0f\uff1a\u5373\u611f\u5e94\u8f93\u51fa\u9ad8\u7535\u5e73\u540e\uff0c\u5728\u5ef6\u65f6\u65f6\u95f4\u6bb5\u5185\uff0c\u5982\u679c\u6709\u4eba\u4f53\u5728\u5176\u611f\u5e94\u8303\u56f4\u6d3b\u52a8\uff0c\u5176\u8f93\u51fa\u5c06\u4e00\u76f4\u4fdd\u6301\u9ad8\u7535\u5e73\uff0c\u76f4\u5230\u4eba\u79bb\u5f00\u540e\u624d\u5ef6\u65f6\u5c06\u9ad8\u7535\u5e73\u53d8\u4e3a\u4f4e\u7535\u5e73\uff08\u611f\u5e94\u6a21\u5757\u68c0\u6d4b\u5230\u4eba\u4f53\u7684\u6bcf\u4e00\u6b21\u6d3b\u52a8\u540e\u4f1a\u81ea\u52a8\u987a\u5ef6\u4e00\u4e2a\u5ef6\u65f6\u65f6\u95f4\u6bb5\uff0c\u5e76\u4e14\u4ee5\u6700\u540e\u4e00\u6b21\u6d3b\u52a8\u7684\u65f6\u95f4\u4e3a\u5ef6\u65f6\u65f6\u95f4\u7684\u8d77\u59cb\u70b9)\u3002\u68c0\u67e5\u8ddd\u79bb\u4e3a0-5\u7c73\uff0c3\u7c73\u5185\u6548\u679c\u6700\u4f18\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E4%BA%BA%E4%BD%93%E6%84%9F%E5%BA%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u4eba\u4f53\u611f\u5e94\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin,ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 human = Pin(4, Pin.IN) while True: print(human.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a0\uff0c\u6709\u4eba\u4f53\u9760\u8fd1\u8fd4\u56de\uff1a1","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E4%BA%BA%E4%BD%93%E6%84%9F%E5%BA%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u4eba\u4f53\u611f\u5e94\u611f\u5e94\u706f \u6709\u4eba\u9760\u8fd1\u65f6\u706f\u4eae\u3002\u79bb\u5f00\u65f6\u706f\u706d ''' from machine import Pin import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 human = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if human.value() == 1: led.value(1) else: led.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u4eba\u4f53\u611f\u5e94\u706f"},{"location":"MicroPython/%E5%80%BE%E6%96%9C%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u503e\u659c\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u503e\u659c\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u503e\u659c\u4f20\u611f\u5668 4 2 LED\u706f 2 \u503e\u659c\u4f20\u611f\u5668\u4ecb\u7ecd \u503e\u659c\u5f00\u5173\u6a21\u5757\u4e5f\u79f0\u4e3a\u6eda\u73e0\u5f00\u5173\uff0c\u6eda\u73e0\u5f00\u5173\u4e5f\u53eb\u94a2\u73e0\u5f00\u5173\uff0c\u73e0\u5b50\u5f00\u5173\uff0c\u5176\u5b9e\u90fd\u662f\u9707\u52a8\u5f00\u5173\u7684\u4e00\u79cd\u53ea\u662f\u53eb\u6cd5\u4e0d\u4e00\u6837\uff0c\u90fd\u662f\u901a\u8fc7\u73e0\u5b50\u6eda\u52a8\u63a5\u89e6\u5bfc\u9488\u7684\u539f\u7406\u6765\u63a7\u5236\u7535\u8def\u7684\u63a5\u901a\u6216\u8005\u65ad\u5f00\u7684\u3002\u5f53\u503e\u659c\u4f20\u611f\u5668\u611f\u5e94\u5230\u503e\u659c\u65f6\uff0c\u89e6\u70b9\u5c06\u88ab\u8fde\u63a5\uff0c\u6a21\u5757\u4f1a\u8f93\u51fa\u4f4e\u7535\u5e73\u4fe1\u53f7\uff1b\u5c06\u5f00\u5173\u503e\u659c\u5230\u76f8\u53cd\u7684\u65b9\u5411\u4f1a\u5bfc\u81f4\u91d1\u5c5e\u7403\u8fdc\u79bb\u90a3\u7ec4\u89e6\u70b9\uff0c\u4ece\u800c\u65ad\u5f00\u8be5\u7535\u8def\uff0c\u8f93\u51fa\u9ad8\u7535\u5e73\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u503e\u659c\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 incline = Pin(4, Pin.IN) while True: print(incline.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u53d1\u751f\u503e\u659c\u65f6\u8fd4\u56de\uff1a0 \u5b9e\u9a8c\u4e8c\uff1a\u503e\u659c\u62a5\u8b66\u706f \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u503e\u659c\u62a5\u8b66\u706f \u53d1\u751f\u503e\u659c\u65f6\uff0c\u7ea2\u706f\u95ea\u70c1 ''' from machine import Pin import time incline = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if incline.value() == 0: led.value(1) time.sleep(0.2) led.value(0) time.sleep(0.2)","title":"30.\u503e\u659c\u4f20\u611f\u5668"},{"location":"MicroPython/%E5%80%BE%E6%96%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u503e\u659c\u4f20\u611f\u5668"},{"location":"MicroPython/%E5%80%BE%E6%96%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u503e\u659c\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u503e\u659c\u4f20\u611f\u5668 4 2 LED\u706f 2 \u503e\u659c\u4f20\u611f\u5668\u4ecb\u7ecd \u503e\u659c\u5f00\u5173\u6a21\u5757\u4e5f\u79f0\u4e3a\u6eda\u73e0\u5f00\u5173\uff0c\u6eda\u73e0\u5f00\u5173\u4e5f\u53eb\u94a2\u73e0\u5f00\u5173\uff0c\u73e0\u5b50\u5f00\u5173\uff0c\u5176\u5b9e\u90fd\u662f\u9707\u52a8\u5f00\u5173\u7684\u4e00\u79cd\u53ea\u662f\u53eb\u6cd5\u4e0d\u4e00\u6837\uff0c\u90fd\u662f\u901a\u8fc7\u73e0\u5b50\u6eda\u52a8\u63a5\u89e6\u5bfc\u9488\u7684\u539f\u7406\u6765\u63a7\u5236\u7535\u8def\u7684\u63a5\u901a\u6216\u8005\u65ad\u5f00\u7684\u3002\u5f53\u503e\u659c\u4f20\u611f\u5668\u611f\u5e94\u5230\u503e\u659c\u65f6\uff0c\u89e6\u70b9\u5c06\u88ab\u8fde\u63a5\uff0c\u6a21\u5757\u4f1a\u8f93\u51fa\u4f4e\u7535\u5e73\u4fe1\u53f7\uff1b\u5c06\u5f00\u5173\u503e\u659c\u5230\u76f8\u53cd\u7684\u65b9\u5411\u4f1a\u5bfc\u81f4\u91d1\u5c5e\u7403\u8fdc\u79bb\u90a3\u7ec4\u89e6\u70b9\uff0c\u4ece\u800c\u65ad\u5f00\u8be5\u7535\u8def\uff0c\u8f93\u51fa\u9ad8\u7535\u5e73\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E5%80%BE%E6%96%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u503e\u659c\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 incline = Pin(4, Pin.IN) while True: print(incline.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u53d1\u751f\u503e\u659c\u65f6\u8fd4\u56de\uff1a0","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E5%80%BE%E6%96%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u503e\u659c\u62a5\u8b66\u706f \u53d1\u751f\u503e\u659c\u65f6\uff0c\u7ea2\u706f\u95ea\u70c1 ''' from machine import Pin import time incline = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if incline.value() == 0: led.value(1) time.sleep(0.2) led.value(0) time.sleep(0.2)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u503e\u659c\u62a5\u8b66\u706f"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/","text":"\u56db\u4f4d\u6570\u7801\u7ba1 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u56db\u4f4d\u6570\u7801\u7ba1 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 2 \u56db\u4f4d\u6570\u7801\u7ba1-SDA 21 3 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 4 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u56db\u4f4d\u6570\u7801\u7ba1\u4ecb\u7ecd 4 \u4f4d 7 \u6bb5\u6570\u7801\u7ba1\u7531\u4e00\u4e2a 12 \u7ba1\u811a\u7684 4 \u4f4d 7 \u6bb5\u5171\u9633\u6781\u6570\u7801\u7ba1\u548c\u4e00\u4e2a\u63a7\u5236\u82af\u7247 TM1650 \u6784\u6210\u3002\u5171\u9633 \u6781\u6570\u7801\u7ba1\u662f\u4e00\u79cd\u663e\u793a\u5668\u4ef6\uff0c\u6bcf\u4e2a\u6570\u7801\u7ba1\u75317\u4e2a\u53d1\u5149\u4e8c\u6781\u7ba1(LED)\u7ec4\u6210\uff0c\u53ef\u4ee5\u663e\u793a0\u52309\u7684\u6570\u5b57\u4ee5\u53ca \u4e00\u4e9b\u5b57\u6bcd\u548c\u7b26\u53f7\u3002TM1650\u662f\u4e00\u4e2a\u96c6\u6210\u4e86\u6570\u7801\u7ba1\u63a7\u5236\u548c\u9a71\u52a8\u529f\u80fd\u7684\u82af\u7247\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u7ba1\u811a\u6765\u9009 \u62e9\u8981\u663e\u793a\u7684\u6570\u5b57\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u529f\u80fd\uff0c\u5982\u4eae\u5ea6\u8c03\u8282\u548c\u626b\u63cf\u63a7\u5236\u3002\u8fd9\u79cd\u7ec4\u5408\u53ef\u4ee5\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404 \u79cd\u9700\u8981\u663e\u793a\u6570\u5b57\u7684\u8bbe\u5907\uff0c\u5982\u8ba1\u65f6\u5668\u3001\u6e29\u5ea6\u8ba1\u3001\u7535\u5b50\u79e4\u7b49\u3002 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aTFourDigitDisplay.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a # \u5bfc\u5165MicroPython\u5e38\u91cf\u6a21\u5757\u548cI2C\u9a71\u52a8 from micropython import const from machine import I2C import time # \u5b9a\u4e49TM1650\u7684\u547d\u4ee4\u5730\u5740\uff08\u4eae\u5ea6\u63a7\u5236\u7b49\uff09\u548c\u663e\u793a\u6570\u636e\u5730\u5740 COMMAND_I2C_ADDRESS = const(0x24) # \u547d\u4ee4\u6a21\u5f0fI2C\u5730\u5740 DISPLAY_I2C_ADDRESS = const(0x34) # \u6570\u636e\u663e\u793a\u6a21\u5f0f\u57fa\u5730\u5740\uff08\u6bcf\u4f4d\u6570\u7801\u7ba1\u5730\u5740\u9012\u589e\uff09 # \u6570\u7801\u7ba1\u6bb5\u7801\u8868\uff080-9, A-F\u7684\u7f16\u7801\uff09\uff0c\u5bf9\u5e94\u5171\u9634\u6570\u7801\u7ba1\u6bb5\u9009\u4fe1\u53f7 # \u683c\u5f0f\uff1ag f e d c b a\uff087\u4f4d\u4e8c\u8fdb\u5236\uff0c\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff09 buf = (0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71) class FourDigitDisplay(): def __init__(self, i2c): \"\"\" \u521d\u59cb\u5316\u6570\u7801\u7ba1\u9a71\u52a8 :param i2c: \u5df2\u914d\u7f6e\u7684I2C\u5bf9\u8c61\uff08\u9700\u63d0\u524d\u8bbe\u7f6eSCL/SDA\u5f15\u811a\u548c\u9891\u7387\uff09 \"\"\" self.i2c = i2c # \u5b58\u50a8\u4f20\u5165\u7684I2C\u5bf9\u8c61 self._intensity = 3 # \u9ed8\u8ba4\u4eae\u5ea6\u7b49\u7ea7\uff080-8\uff09 self.dbuf = [0, 0, 0, 0] # \u6570\u7801\u7ba1\u663e\u793a\u7f13\u51b2\u533a\uff0c\u8bb0\u5f55\u5f53\u524d\u5404\u6bb5\u663e\u793a\u72b6\u6001 self.tbuf = bytearray(1) # \u5355\u5b57\u8282\u7f13\u51b2\u533a\uff0c\u7528\u4e8eI2C\u6570\u636e\u4f20\u8f93 self.on() # \u4e0a\u7535\u9ed8\u8ba4\u5f00\u542f\u663e\u793a def intensity(self, dat=-1): \"\"\" \u8bbe\u7f6e\u6216\u83b7\u53d6\u4eae\u5ea6\u7b49\u7ea7 :param dat: \u4eae\u5ea6\u503c\uff080-8\uff09\uff0c\u82e5\u7701\u7565\u5219\u8fd4\u56de\u5f53\u524d\u4eae\u5ea6 :return: \u5f53\u524d\u4eae\u5ea6\u503c\uff08\u5f53dat\u53c2\u6570\u7701\u7565\u65f6\uff09 \"\"\" if dat < 0 or dat > 8: # \u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u5f53\u524d\u4eae\u5ea6 return self._intensity if dat == 0: # \u4eae\u5ea6\u4e3a0\u65f6\u5173\u95ed\u663e\u793a self.off() else: self._intensity = dat self.cmd((dat << 4) | 0x01) # \u53d1\u9001\u4eae\u5ea6\u547d\u4ee4\uff08\u683c\u5f0f\uff1a0bLLLL1xxx\uff09 def cmd(self, c): \"\"\"\u5411\u547d\u4ee4\u5730\u5740\u53d1\u9001\u63a7\u5236\u547d\u4ee4\uff08\u4eae\u5ea6/\u5f00\u5173\uff09\"\"\" self.tbuf[0] = c # \u5c06\u547d\u4ee4\u503c\u5b58\u5165\u7f13\u51b2\u533a self.i2c.writeto(COMMAND_I2C_ADDRESS, self.tbuf) # \u53d1\u9001\u5230\u547d\u4ee4\u5730\u5740 def dat(self, bit, d): \"\"\"\u5411\u6307\u5b9a\u6570\u7801\u7ba1\u4f4d\u53d1\u9001\u663e\u793a\u6570\u636e\"\"\" self.tbuf[0] = d # \u5c06\u6bb5\u7801\u503c\u5b58\u5165\u7f13\u51b2\u533a # DISPLAY_I2C_ADDRESS + bit%4 \u8ba1\u7b97\u76ee\u6807\u4f4d\u7684\u5b9e\u9645\u5730\u5740\uff080x34~0x37\uff09 self.i2c.writeto(DISPLAY_I2C_ADDRESS + bit % 4, self.tbuf) def on(self): \"\"\"\u5f00\u542f\u663e\u793a\uff08\u4f7f\u7528\u5f53\u524d\u4eae\u5ea6\uff09\"\"\" self.cmd((self._intensity << 4) | 0x01) # \u547d\u4ee4\u683c\u5f0f\uff1a\u4eae\u5ea6\u7ea7\u522b + \u5f00\u542f\u4f4d def off(self): \"\"\"\u5173\u95ed\u663e\u793a\"\"\" self._intensity = 0 # \u5173\u95ed\u65f6\u91cd\u7f6e\u4eae\u5ea6\u8bb0\u5f55 self.cmd(0) # \u53d1\u9001\u5168\u96f6\u547d\u4ee4\uff08\u5173\u95ed\u663e\u793a\uff09 def clear(self): \"\"\"\u6e05\u9664\u6240\u6709\u6570\u7801\u7ba1\u663e\u793a\"\"\" for i in range(4): # \u904d\u53864\u4e2a\u6570\u7801\u7ba1\u4f4d self.dat(i, 0) # \u53d1\u9001\u96f6\u6bb5\u7801\uff08\u5168\u706d\uff09 self.dbuf = [0, 0, 0, 0] # \u91cd\u7f6e\u7f13\u51b2\u533a def showbit(self, num, bit=0): \"\"\" \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u5355\u4e2a\u6570\u5b57 :param num: \u8981\u663e\u793a\u7684\u6570\u5b57\uff080-15\uff0c\u8d85\u51fa\u53d6\u6a21\uff09 :param bit: \u6570\u7801\u7ba1\u4f4d\u7f6e\uff080-3\uff0c\u8d85\u51fa\u53d6\u6a21\uff09 \"\"\" self.dbuf[bit % 4] = buf[num % 16] # \u66f4\u65b0\u7f13\u51b2\u533a self.dat(bit, buf[num % 16]) # \u53d1\u9001\u6bb5\u7801\u6570\u636e def shownum(self, num): \"\"\" \u663e\u793a\u5341\u8fdb\u5236\u6574\u6570\uff08\u652f\u6301\u8d1f\u6570\uff0c\u8303\u56f4-999~9999\uff09 :param num: \u8981\u663e\u793a\u7684\u6574\u6570\uff08\u8d85\u51fa\u8303\u56f4\u53ef\u80fd\u663e\u793a\u5f02\u5e38\uff09 \"\"\" if num < 0: if -999 <= num < -100: self.dat(0, 0x40) self.showbit(abs(num) % 10, 3) # \u663e\u793a\u4e2a\u4f4d\uff08\u7b2c3\u4f4d\uff09 self.showbit((abs(num) // 10) % 10, 2) # \u663e\u793a\u5341\u4f4d\uff08\u7b2c2\u4f4d\uff09 self.showbit((abs(num) // 100) % 10, 1) # \u663e\u793a\u767e\u4f4d\uff08\u7b2c1\u4f4d\uff09 elif -99 <= num < -10: self.dat(1, 0x40) self.showbit((abs(num) // 10) % 10, 2) # \u663e\u793a\u5341\u4f4d\uff08\u7b2c2\u4f4d\uff09 self.showbit(abs(num) % 10, 3) # \u663e\u793a\u4e2a\u4f4d\uff08\u7b2c3\u4f4d\uff09 else : self.dat(2, 0x40) self.showbit(abs(num) % 10, 3) # \u663e\u793a\u4e2a\u4f4d\uff08\u7b2c3\u4f4d\uff09 else: str_num = \"{:4d}\".format(int(num)) # \u683c\u5f0f\u5316\u4e3a4\u4f4d\u5b57\u7b26\u4e32 for i in range(4): if str_num[i] == \" \": # \u7a7a\u683c\u8868\u793a\u9700\u8981\u5173\u95ed\u8be5\u4f4d self.hide_bit(i) else: self.showbit(int(str_num[i]), i) def showhex(self, num): \"\"\" \u663e\u793a\u5341\u516d\u8fdb\u5236\u6570\uff08\u652f\u6301\u8d1f\u6570\uff0c\u8303\u56f4-0xFFFF~0xFFFF\uff09 :param num: \u8981\u663e\u793a\u7684\u5341\u516d\u8fdb\u5236\u6570 \"\"\" if num < 0: self.dat(0, 0x40) # \u663e\u793a\u8d1f\u53f7 num = -num else: self.showbit((num >> 12) % 16, 0) # \u663e\u793a\u6700\u9ad84\u4f4d\uff08\u7b2c0\u4f4d\uff09 self.showbit(num % 16, 3) # \u663e\u793a\u6700\u4f4e4\u4f4d\uff08\u7b2c3\u4f4d\uff09 self.showbit((num >> 4) % 16, 2) # \u663e\u793a\u6b21\u4f4e4\u4f4d\uff08\u7b2c2\u4f4d\uff09 self.showbit((num >> 8) % 16, 1) # \u663e\u793a\u4e2d\u95f44\u4f4d\uff08\u7b2c1\u4f4d\uff09 def showDP(self, bit=1, show=True): \"\"\" \u63a7\u5236\u5c0f\u6570\u70b9\u663e\u793a :param bit: \u5c0f\u6570\u70b9\u4f4d\u7f6e\uff080-3\uff09\uff0c\u9ed8\u8ba4\u7b2c1\u4f4d\uff08\u7b2c\u4e8c\u4f4d\u663e\u793a\uff09 :param show: True\u663e\u793a\u5c0f\u6570\u70b9\uff0cFalse\u9690\u85cf \"\"\" bit = bit % 4 # \u786e\u4fdd\u4f4d\u7f6e\u57280-3\u8303\u56f4\u5185 if show: # \u901a\u8fc7\u6309\u4f4d\u6216\u64cd\u4f5c\u6dfb\u52a0\u5c0f\u6570\u70b9\uff08\u6bb5\u7801\u6700\u9ad8\u4f4d\u4e3a\u5c0f\u6570\u70b9\uff09 self.dat(bit, self.dbuf[bit] | 0x80) else: # \u901a\u8fc7\u6309\u4f4d\u4e0e\u64cd\u4f5c\u6e05\u9664\u5c0f\u6570\u70b9 self.dat(bit, self.dbuf[bit] & 0x7F) # \u4e00\u4e0b\u662f\u81ea\u5df1\u540e\u52a0\u8fdb\u53bb\u7684\u65b9\u6cd5 def hide_bit(self, bit): \"\"\"\u5173\u95ed\u6307\u5b9a\u6570\u7801\u7ba1\u4f4d\"\"\" self.dat(bit, 0x00) # \u53d1\u9001\u5168\u96f6\u6bb5\u7801 def show_dynamic(self, num): \"\"\"\u667a\u80fd\u663e\u793a\uff08\u81ea\u52a8\u5904\u7406\u4f4d\u6570\u548c\u5c0f\u6570\u70b9\uff09\"\"\" if num < 0: self.dat(1, 0x40) # self.showbit(0x40, 0) # \u663e\u793a\u8d1f\u53f7 num = abs(num) str_num = \"{:4d}\".format(int(num)) # \u683c\u5f0f\u5316\u4e3a4\u4f4d\u5b57\u7b26\u4e32 for i in range(4): if str_num[i] == \" \": # \u7a7a\u683c\u8868\u793a\u9700\u8981\u5173\u95ed\u8be5\u4f4d self.hide_bit(i) else: self.showbit(int(str_num[i]), i) def countdown(self,start=9999,interval=0.5,val=-1): ''' \u6570\u5b57\u589e/\u51cf\u65b9\u6cd5 start\uff1a\u8d77\u59cb\u6570\u5b57 interval\uff1a\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u8d8a\u77ed\uff0c\u6570\u5b57\u53d8\u5316\u8d8a\u5feb val\uff1a\u6570\u5b57\u8de8\u5ea6\uff0c+\u6570\u4e3a\u9012\u589e\uff0c-\u6570\u4e3a\u9012\u51cf ''' number = start while number >= 0: # \u5206\u89e3\u6570\u5b57\u5230\u5404\u4e2a\u4f4d\uff08\u5343\u4f4d -> \u4e2a\u4f4d\uff09 digits = [ (number // 1000) % 10, # \u5343\u4f4d (number // 100) % 10, # \u767e\u4f4d (number // 10) % 10, # \u5341\u4f4d number % 10 # \u4e2a\u4f4d ] # \u8ba1\u7b97\u5b9e\u9645\u6709\u6548\u4f4d\u6570\uff08\u81ea\u52a8\u4f4d\u6570\u68c0\u6d4b\uff09 if number == 0: valid_digits = 1 else: valid_digits = len(str(abs(number))) # \u66f4\u65b0\u663e\u793a\uff08\u81ea\u52a8\u5173\u95ed\u524d\u5bfc\u96f6\u4f4d\uff09 for i in range(4): if i < (4 - valid_digits): self.hide_bit(i) # \u5173\u95ed\u65e0\u6548\u7684\u524d\u5bfc\u4f4d else: self.showbit(digits[i], i) # \u663e\u793a\u6709\u6548\u4f4d time.sleep(interval) number += val \u5b9e\u9a8c\u4e00\uff1a\u56db\u4f4d\u6570\u7801\u7ba1\u7684\u663e\u793a \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u56db\u4f4d\u6570\u7801\u7ba1\u7684\u663e\u793a\uff0c\u4e0d\u8db34\u4f4d\u524d\u9762\u88650 ''' from machine import I2C, Pin import time from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) ''' \u5b9e\u9a8c\u4e00\u3001\u663e\u793a\u6570\u5b57(-999~9999) \u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u5c0f\u6570\u70b9 ''' display.shownum(1234) # \u663e\u793a\u6570\u5b571234 # display.showDP(bit=2, show=False) # \u5728\u7b2c\u4e09\u4f4d\u663e\u793a\u5c0f\u6570\u70b9\uff0cshow=Ture\u663e\u793a\uff0cFalse\u9690\u85cf time.sleep(2) ''' \u5b9e\u9a8c\u4e8c\u3001\u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6570\u5b57 num\uff1a\u663e\u793a\u7684\u4e00\u4e2a\u6570\u5b57\uff080~9\uff09 ''' display.clear() #\u6e05\u5c4f\u64cd\u4f5c\uff0c\u907f\u514d\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u7684\u5f71\u54cd display.showbit(num=1, bit=0) # \u5728\u7b2c\u4e00\u4f4d\u4e0a\u663e\u793a\u6570\u5b571 display.showbit(num=2, bit=1) # \u5728\u7b2c\u4e8c\u4f4d\u4e0a\u663e\u793a\u6570\u5b572 display.showDP(bit=1, show=True ) # \u6ce8\u610f\uff1a\u5c0f\u6570\u70b9\u7684\u663e\u793a\u8981\u653e\u5728\u6570\u5b57\u663e\u793a\u7684\u540e\u9762\uff0c\u5426\u5219\u4f1a\u88ab\u8986\u76d6 time.sleep(2) \u5b9e\u9a8c\u4e8c\uff1a\u56db\u4f4d\u6570\u7801\u7ba1\u6570\u5b57\u7684\u53d8\u5316 \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c\u4e8c\u3001\u56db\u4f4d\u6570\u7801\u7ba1\u5012\u8ba1\u65f6 \u4e0d\u8db34\u4f4d\u524d\u9762\u4e0d\u88650\uff0c\u663e\u793a\u7a7a start\uff1a\u8d77\u59cb\u6570\u5b57 interval\uff1a\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u8d8a\u77ed\uff0c\u6570\u5b57\u53d8\u5316\u8d8a\u5feb val\uff1a\u6570\u5b57\u8de8\u5ea6\uff0c+\u6570\u4e3a\u9012\u589e\uff0c-\u6570\u4e3a\u9012\u51cf ''' from machine import I2C, Pin from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93:cite[2] # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # \u542f\u52a8\u5012\u8ba1\u65f6\uff08\u4ece9999\u5f00\u59cb\uff09 display.countdown(start = 1002, interval = 1, val = -1) # \u53ef\u9009\uff1a\u8c03\u7528display.clear()\u5728\u7ed3\u675f\u540e\u6e05\u5c4f","title":"14.\u56db\u4f4d\u6570\u7801\u7ba1"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_1","text":"","title":"\u56db\u4f4d\u6570\u7801\u7ba1"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u56db\u4f4d\u6570\u7801\u7ba1 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 2 \u56db\u4f4d\u6570\u7801\u7ba1-SDA 21 3 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 4 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u56db\u4f4d\u6570\u7801\u7ba1\u4ecb\u7ecd 4 \u4f4d 7 \u6bb5\u6570\u7801\u7ba1\u7531\u4e00\u4e2a 12 \u7ba1\u811a\u7684 4 \u4f4d 7 \u6bb5\u5171\u9633\u6781\u6570\u7801\u7ba1\u548c\u4e00\u4e2a\u63a7\u5236\u82af\u7247 TM1650 \u6784\u6210\u3002\u5171\u9633 \u6781\u6570\u7801\u7ba1\u662f\u4e00\u79cd\u663e\u793a\u5668\u4ef6\uff0c\u6bcf\u4e2a\u6570\u7801\u7ba1\u75317\u4e2a\u53d1\u5149\u4e8c\u6781\u7ba1(LED)\u7ec4\u6210\uff0c\u53ef\u4ee5\u663e\u793a0\u52309\u7684\u6570\u5b57\u4ee5\u53ca \u4e00\u4e9b\u5b57\u6bcd\u548c\u7b26\u53f7\u3002TM1650\u662f\u4e00\u4e2a\u96c6\u6210\u4e86\u6570\u7801\u7ba1\u63a7\u5236\u548c\u9a71\u52a8\u529f\u80fd\u7684\u82af\u7247\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u7ba1\u811a\u6765\u9009 \u62e9\u8981\u663e\u793a\u7684\u6570\u5b57\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u529f\u80fd\uff0c\u5982\u4eae\u5ea6\u8c03\u8282\u548c\u626b\u63cf\u63a7\u5236\u3002\u8fd9\u79cd\u7ec4\u5408\u53ef\u4ee5\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404 \u79cd\u9700\u8981\u663e\u793a\u6570\u5b57\u7684\u8bbe\u5907\uff0c\u5982\u8ba1\u65f6\u5668\u3001\u6e29\u5ea6\u8ba1\u3001\u7535\u5b50\u79e4\u7b49\u3002 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aTFourDigitDisplay.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a # \u5bfc\u5165MicroPython\u5e38\u91cf\u6a21\u5757\u548cI2C\u9a71\u52a8 from micropython import const from machine import I2C import time # \u5b9a\u4e49TM1650\u7684\u547d\u4ee4\u5730\u5740\uff08\u4eae\u5ea6\u63a7\u5236\u7b49\uff09\u548c\u663e\u793a\u6570\u636e\u5730\u5740 COMMAND_I2C_ADDRESS = const(0x24) # \u547d\u4ee4\u6a21\u5f0fI2C\u5730\u5740 DISPLAY_I2C_ADDRESS = const(0x34) # \u6570\u636e\u663e\u793a\u6a21\u5f0f\u57fa\u5730\u5740\uff08\u6bcf\u4f4d\u6570\u7801\u7ba1\u5730\u5740\u9012\u589e\uff09 # \u6570\u7801\u7ba1\u6bb5\u7801\u8868\uff080-9, A-F\u7684\u7f16\u7801\uff09\uff0c\u5bf9\u5e94\u5171\u9634\u6570\u7801\u7ba1\u6bb5\u9009\u4fe1\u53f7 # \u683c\u5f0f\uff1ag f e d c b a\uff087\u4f4d\u4e8c\u8fdb\u5236\uff0c\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff09 buf = (0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71) class FourDigitDisplay(): def __init__(self, i2c): \"\"\" \u521d\u59cb\u5316\u6570\u7801\u7ba1\u9a71\u52a8 :param i2c: \u5df2\u914d\u7f6e\u7684I2C\u5bf9\u8c61\uff08\u9700\u63d0\u524d\u8bbe\u7f6eSCL/SDA\u5f15\u811a\u548c\u9891\u7387\uff09 \"\"\" self.i2c = i2c # \u5b58\u50a8\u4f20\u5165\u7684I2C\u5bf9\u8c61 self._intensity = 3 # \u9ed8\u8ba4\u4eae\u5ea6\u7b49\u7ea7\uff080-8\uff09 self.dbuf = [0, 0, 0, 0] # \u6570\u7801\u7ba1\u663e\u793a\u7f13\u51b2\u533a\uff0c\u8bb0\u5f55\u5f53\u524d\u5404\u6bb5\u663e\u793a\u72b6\u6001 self.tbuf = bytearray(1) # \u5355\u5b57\u8282\u7f13\u51b2\u533a\uff0c\u7528\u4e8eI2C\u6570\u636e\u4f20\u8f93 self.on() # \u4e0a\u7535\u9ed8\u8ba4\u5f00\u542f\u663e\u793a def intensity(self, dat=-1): \"\"\" \u8bbe\u7f6e\u6216\u83b7\u53d6\u4eae\u5ea6\u7b49\u7ea7 :param dat: \u4eae\u5ea6\u503c\uff080-8\uff09\uff0c\u82e5\u7701\u7565\u5219\u8fd4\u56de\u5f53\u524d\u4eae\u5ea6 :return: \u5f53\u524d\u4eae\u5ea6\u503c\uff08\u5f53dat\u53c2\u6570\u7701\u7565\u65f6\uff09 \"\"\" if dat < 0 or dat > 8: # \u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u5f53\u524d\u4eae\u5ea6 return self._intensity if dat == 0: # \u4eae\u5ea6\u4e3a0\u65f6\u5173\u95ed\u663e\u793a self.off() else: self._intensity = dat self.cmd((dat << 4) | 0x01) # \u53d1\u9001\u4eae\u5ea6\u547d\u4ee4\uff08\u683c\u5f0f\uff1a0bLLLL1xxx\uff09 def cmd(self, c): \"\"\"\u5411\u547d\u4ee4\u5730\u5740\u53d1\u9001\u63a7\u5236\u547d\u4ee4\uff08\u4eae\u5ea6/\u5f00\u5173\uff09\"\"\" self.tbuf[0] = c # \u5c06\u547d\u4ee4\u503c\u5b58\u5165\u7f13\u51b2\u533a self.i2c.writeto(COMMAND_I2C_ADDRESS, self.tbuf) # \u53d1\u9001\u5230\u547d\u4ee4\u5730\u5740 def dat(self, bit, d): \"\"\"\u5411\u6307\u5b9a\u6570\u7801\u7ba1\u4f4d\u53d1\u9001\u663e\u793a\u6570\u636e\"\"\" self.tbuf[0] = d # \u5c06\u6bb5\u7801\u503c\u5b58\u5165\u7f13\u51b2\u533a # DISPLAY_I2C_ADDRESS + bit%4 \u8ba1\u7b97\u76ee\u6807\u4f4d\u7684\u5b9e\u9645\u5730\u5740\uff080x34~0x37\uff09 self.i2c.writeto(DISPLAY_I2C_ADDRESS + bit % 4, self.tbuf) def on(self): \"\"\"\u5f00\u542f\u663e\u793a\uff08\u4f7f\u7528\u5f53\u524d\u4eae\u5ea6\uff09\"\"\" self.cmd((self._intensity << 4) | 0x01) # \u547d\u4ee4\u683c\u5f0f\uff1a\u4eae\u5ea6\u7ea7\u522b + \u5f00\u542f\u4f4d def off(self): \"\"\"\u5173\u95ed\u663e\u793a\"\"\" self._intensity = 0 # \u5173\u95ed\u65f6\u91cd\u7f6e\u4eae\u5ea6\u8bb0\u5f55 self.cmd(0) # \u53d1\u9001\u5168\u96f6\u547d\u4ee4\uff08\u5173\u95ed\u663e\u793a\uff09 def clear(self): \"\"\"\u6e05\u9664\u6240\u6709\u6570\u7801\u7ba1\u663e\u793a\"\"\" for i in range(4): # \u904d\u53864\u4e2a\u6570\u7801\u7ba1\u4f4d self.dat(i, 0) # \u53d1\u9001\u96f6\u6bb5\u7801\uff08\u5168\u706d\uff09 self.dbuf = [0, 0, 0, 0] # \u91cd\u7f6e\u7f13\u51b2\u533a def showbit(self, num, bit=0): \"\"\" \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u5355\u4e2a\u6570\u5b57 :param num: \u8981\u663e\u793a\u7684\u6570\u5b57\uff080-15\uff0c\u8d85\u51fa\u53d6\u6a21\uff09 :param bit: \u6570\u7801\u7ba1\u4f4d\u7f6e\uff080-3\uff0c\u8d85\u51fa\u53d6\u6a21\uff09 \"\"\" self.dbuf[bit % 4] = buf[num % 16] # \u66f4\u65b0\u7f13\u51b2\u533a self.dat(bit, buf[num % 16]) # \u53d1\u9001\u6bb5\u7801\u6570\u636e def shownum(self, num): \"\"\" \u663e\u793a\u5341\u8fdb\u5236\u6574\u6570\uff08\u652f\u6301\u8d1f\u6570\uff0c\u8303\u56f4-999~9999\uff09 :param num: \u8981\u663e\u793a\u7684\u6574\u6570\uff08\u8d85\u51fa\u8303\u56f4\u53ef\u80fd\u663e\u793a\u5f02\u5e38\uff09 \"\"\" if num < 0: if -999 <= num < -100: self.dat(0, 0x40) self.showbit(abs(num) % 10, 3) # \u663e\u793a\u4e2a\u4f4d\uff08\u7b2c3\u4f4d\uff09 self.showbit((abs(num) // 10) % 10, 2) # \u663e\u793a\u5341\u4f4d\uff08\u7b2c2\u4f4d\uff09 self.showbit((abs(num) // 100) % 10, 1) # \u663e\u793a\u767e\u4f4d\uff08\u7b2c1\u4f4d\uff09 elif -99 <= num < -10: self.dat(1, 0x40) self.showbit((abs(num) // 10) % 10, 2) # \u663e\u793a\u5341\u4f4d\uff08\u7b2c2\u4f4d\uff09 self.showbit(abs(num) % 10, 3) # \u663e\u793a\u4e2a\u4f4d\uff08\u7b2c3\u4f4d\uff09 else : self.dat(2, 0x40) self.showbit(abs(num) % 10, 3) # \u663e\u793a\u4e2a\u4f4d\uff08\u7b2c3\u4f4d\uff09 else: str_num = \"{:4d}\".format(int(num)) # \u683c\u5f0f\u5316\u4e3a4\u4f4d\u5b57\u7b26\u4e32 for i in range(4): if str_num[i] == \" \": # \u7a7a\u683c\u8868\u793a\u9700\u8981\u5173\u95ed\u8be5\u4f4d self.hide_bit(i) else: self.showbit(int(str_num[i]), i) def showhex(self, num): \"\"\" \u663e\u793a\u5341\u516d\u8fdb\u5236\u6570\uff08\u652f\u6301\u8d1f\u6570\uff0c\u8303\u56f4-0xFFFF~0xFFFF\uff09 :param num: \u8981\u663e\u793a\u7684\u5341\u516d\u8fdb\u5236\u6570 \"\"\" if num < 0: self.dat(0, 0x40) # \u663e\u793a\u8d1f\u53f7 num = -num else: self.showbit((num >> 12) % 16, 0) # \u663e\u793a\u6700\u9ad84\u4f4d\uff08\u7b2c0\u4f4d\uff09 self.showbit(num % 16, 3) # \u663e\u793a\u6700\u4f4e4\u4f4d\uff08\u7b2c3\u4f4d\uff09 self.showbit((num >> 4) % 16, 2) # \u663e\u793a\u6b21\u4f4e4\u4f4d\uff08\u7b2c2\u4f4d\uff09 self.showbit((num >> 8) % 16, 1) # \u663e\u793a\u4e2d\u95f44\u4f4d\uff08\u7b2c1\u4f4d\uff09 def showDP(self, bit=1, show=True): \"\"\" \u63a7\u5236\u5c0f\u6570\u70b9\u663e\u793a :param bit: \u5c0f\u6570\u70b9\u4f4d\u7f6e\uff080-3\uff09\uff0c\u9ed8\u8ba4\u7b2c1\u4f4d\uff08\u7b2c\u4e8c\u4f4d\u663e\u793a\uff09 :param show: True\u663e\u793a\u5c0f\u6570\u70b9\uff0cFalse\u9690\u85cf \"\"\" bit = bit % 4 # \u786e\u4fdd\u4f4d\u7f6e\u57280-3\u8303\u56f4\u5185 if show: # \u901a\u8fc7\u6309\u4f4d\u6216\u64cd\u4f5c\u6dfb\u52a0\u5c0f\u6570\u70b9\uff08\u6bb5\u7801\u6700\u9ad8\u4f4d\u4e3a\u5c0f\u6570\u70b9\uff09 self.dat(bit, self.dbuf[bit] | 0x80) else: # \u901a\u8fc7\u6309\u4f4d\u4e0e\u64cd\u4f5c\u6e05\u9664\u5c0f\u6570\u70b9 self.dat(bit, self.dbuf[bit] & 0x7F) # \u4e00\u4e0b\u662f\u81ea\u5df1\u540e\u52a0\u8fdb\u53bb\u7684\u65b9\u6cd5 def hide_bit(self, bit): \"\"\"\u5173\u95ed\u6307\u5b9a\u6570\u7801\u7ba1\u4f4d\"\"\" self.dat(bit, 0x00) # \u53d1\u9001\u5168\u96f6\u6bb5\u7801 def show_dynamic(self, num): \"\"\"\u667a\u80fd\u663e\u793a\uff08\u81ea\u52a8\u5904\u7406\u4f4d\u6570\u548c\u5c0f\u6570\u70b9\uff09\"\"\" if num < 0: self.dat(1, 0x40) # self.showbit(0x40, 0) # \u663e\u793a\u8d1f\u53f7 num = abs(num) str_num = \"{:4d}\".format(int(num)) # \u683c\u5f0f\u5316\u4e3a4\u4f4d\u5b57\u7b26\u4e32 for i in range(4): if str_num[i] == \" \": # \u7a7a\u683c\u8868\u793a\u9700\u8981\u5173\u95ed\u8be5\u4f4d self.hide_bit(i) else: self.showbit(int(str_num[i]), i) def countdown(self,start=9999,interval=0.5,val=-1): ''' \u6570\u5b57\u589e/\u51cf\u65b9\u6cd5 start\uff1a\u8d77\u59cb\u6570\u5b57 interval\uff1a\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u8d8a\u77ed\uff0c\u6570\u5b57\u53d8\u5316\u8d8a\u5feb val\uff1a\u6570\u5b57\u8de8\u5ea6\uff0c+\u6570\u4e3a\u9012\u589e\uff0c-\u6570\u4e3a\u9012\u51cf ''' number = start while number >= 0: # \u5206\u89e3\u6570\u5b57\u5230\u5404\u4e2a\u4f4d\uff08\u5343\u4f4d -> \u4e2a\u4f4d\uff09 digits = [ (number // 1000) % 10, # \u5343\u4f4d (number // 100) % 10, # \u767e\u4f4d (number // 10) % 10, # \u5341\u4f4d number % 10 # \u4e2a\u4f4d ] # \u8ba1\u7b97\u5b9e\u9645\u6709\u6548\u4f4d\u6570\uff08\u81ea\u52a8\u4f4d\u6570\u68c0\u6d4b\uff09 if number == 0: valid_digits = 1 else: valid_digits = len(str(abs(number))) # \u66f4\u65b0\u663e\u793a\uff08\u81ea\u52a8\u5173\u95ed\u524d\u5bfc\u96f6\u4f4d\uff09 for i in range(4): if i < (4 - valid_digits): self.hide_bit(i) # \u5173\u95ed\u65e0\u6548\u7684\u524d\u5bfc\u4f4d else: self.showbit(digits[i], i) # \u663e\u793a\u6709\u6548\u4f4d time.sleep(interval) number += val","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u56db\u4f4d\u6570\u7801\u7ba1\u7684\u663e\u793a\uff0c\u4e0d\u8db34\u4f4d\u524d\u9762\u88650 ''' from machine import I2C, Pin import time from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) ''' \u5b9e\u9a8c\u4e00\u3001\u663e\u793a\u6570\u5b57(-999~9999) \u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u5c0f\u6570\u70b9 ''' display.shownum(1234) # \u663e\u793a\u6570\u5b571234 # display.showDP(bit=2, show=False) # \u5728\u7b2c\u4e09\u4f4d\u663e\u793a\u5c0f\u6570\u70b9\uff0cshow=Ture\u663e\u793a\uff0cFalse\u9690\u85cf time.sleep(2) ''' \u5b9e\u9a8c\u4e8c\u3001\u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6570\u5b57 num\uff1a\u663e\u793a\u7684\u4e00\u4e2a\u6570\u5b57\uff080~9\uff09 ''' display.clear() #\u6e05\u5c4f\u64cd\u4f5c\uff0c\u907f\u514d\u4e4b\u524d\u7684\u663e\u793a\u5bf9\u540e\u9762\u7684\u5f71\u54cd display.showbit(num=1, bit=0) # \u5728\u7b2c\u4e00\u4f4d\u4e0a\u663e\u793a\u6570\u5b571 display.showbit(num=2, bit=1) # \u5728\u7b2c\u4e8c\u4f4d\u4e0a\u663e\u793a\u6570\u5b572 display.showDP(bit=1, show=True ) # \u6ce8\u610f\uff1a\u5c0f\u6570\u70b9\u7684\u663e\u793a\u8981\u653e\u5728\u6570\u5b57\u663e\u793a\u7684\u540e\u9762\uff0c\u5426\u5219\u4f1a\u88ab\u8986\u76d6 time.sleep(2)","title":"\u5b9e\u9a8c\u4e00\uff1a\u56db\u4f4d\u6570\u7801\u7ba1\u7684\u663e\u793a"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%95%B0%E7%A0%81%E7%AE%A1/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c\u4e8c\u3001\u56db\u4f4d\u6570\u7801\u7ba1\u5012\u8ba1\u65f6 \u4e0d\u8db34\u4f4d\u524d\u9762\u4e0d\u88650\uff0c\u663e\u793a\u7a7a start\uff1a\u8d77\u59cb\u6570\u5b57 interval\uff1a\u65f6\u95f4\u95f4\u9694\uff0c\u65f6\u95f4\u8d8a\u77ed\uff0c\u6570\u5b57\u53d8\u5316\u8d8a\u5feb val\uff1a\u6570\u5b57\u8de8\u5ea6\uff0c+\u6570\u4e3a\u9012\u589e\uff0c-\u6570\u4e3a\u9012\u51cf ''' from machine import I2C, Pin from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93:cite[2] # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # \u542f\u52a8\u5012\u8ba1\u65f6\uff08\u4ece9999\u5f00\u59cb\uff09 display.countdown(start = 1002, interval = 1, val = -1) # \u53ef\u9009\uff1a\u8c03\u7528display.clear()\u5728\u7ed3\u675f\u540e\u6e05\u5c4f","title":"\u5b9e\u9a8c\u4e8c\uff1a\u56db\u4f4d\u6570\u7801\u7ba1\u6570\u5b57\u7684\u53d8\u5316"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%97%B6%E9%92%9F%E6%95%B0%E7%A0%81%E7%AE%A1/","text":"\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-CLK 22 2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-DIO 21 3 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-VCC P2 4 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-GND P2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u4ecb\u7ecd \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u4ecb\u7ecd\u7531\u4e00\u4e2a12\u7ba1\u811a\u76844\u4f4d7\u6bb5\u5171\u9633\u6781\u6570\u7801\u7ba1\u548c\u4e00\u4e2a\u63a7\u5236\u82af\u7247TM1637\u6784\u6210\u3002\u53e6\u4e00\u8fb9\u662f\u6570\u7801\u7ba1\u7684\u56fe\u6807\u6807\u5fd7\u3002\u6b64\u4ea7\u54c1\u53ef\u4ee5\u5e94\u7528\u5728\u65f6\u95f4\u663e\u793a\uff0c\u79d2\u8868\u663e\u793a\u4ee5\u53ca\u5176\u4ed6\u9700\u8981\u663e\u793a\u6570\u5b57\u7684\u8bbe\u5907\u4e0a\u3002 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aTM1637.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a \"\"\" \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1TM1637\u7c7b \"\"\" from micropython import const from machine import Pin from time import sleep_us, sleep_ms TM1637_CMD1 = const(64) # 0x40 data command TM1637_CMD2 = const(192) # 0xC0 address command TM1637_CMD3 = const(128) # 0x80 display control command TM1637_DSP_ON = const(8) # 0x08 display on TM1637_DELAY = const(10) # 10us delay between clk/dio pulses TM1637_MSB = const(128) # msb is the decimal point or the colon depending on your display # 0-9, a-z, blank, dash, star _SEGMENTS = bytearray(b'\\x3F\\x06\\x5B\\x4F\\x66\\x6D\\x7D\\x07\\x7F\\x6F\\x77\\x7C\\x39\\x5E\\x79\\x71\\x3D\\x76\\x06\\x1E\\x76\\x38\\x55\\x54\\x3F\\x73\\x67\\x50\\x6D\\x78\\x3E\\x1C\\x2A\\x76\\x6E\\x5B\\x00\\x40\\x63') class TM1637(object): \"\"\"Library for quad 7-segment LED modules based on the TM1637 LED driver.\"\"\" def __init__(self, clk, dio, brightness=7): self.clk = clk self.dio = dio if not 0 <= brightness <= 7: raise ValueError(\"Brightness out of range\") self._brightness = brightness self.clk.init(Pin.OUT, value=0) self.dio.init(Pin.OUT, value=0) sleep_us(TM1637_DELAY) self._write_data_cmd() self._write_dsp_ctrl() def _start(self): self.dio(0) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) def _stop(self): self.dio(0) sleep_us(TM1637_DELAY) self.clk(1) sleep_us(TM1637_DELAY) self.dio(1) def _write_data_cmd(self): # automatic address increment, normal mode self._start() self._write_byte(TM1637_CMD1) self._stop() def _write_dsp_ctrl(self): # display on, set brightness self._start() self._write_byte(TM1637_CMD3 | TM1637_DSP_ON | self._brightness) self._stop() def _write_byte(self, b): for i in range(8): self.dio((b >> i) & 1) sleep_us(TM1637_DELAY) self.clk(1) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) self.clk(1) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) def brightness(self, val=None): \"\"\"Set the display brightness 0-7.\"\"\" # brightness 0 = 1/16th pulse width # brightness 7 = 14/16th pulse width if val is None: return self._brightness if not 0 <= val <= 7: raise ValueError(\"Brightness out of range\") self._brightness = val self._write_data_cmd() self._write_dsp_ctrl() def write(self, segments, pos=0): \"\"\"Display up to 6 segments moving right from a given position. The MSB in the 2nd segment controls the colon between the 2nd and 3rd segments.\"\"\" if not 0 <= pos <= 5: raise ValueError(\"Position out of range\") self._write_data_cmd() self._start() self._write_byte(TM1637_CMD2 | pos) for seg in segments: self._write_byte(seg) self._stop() self._write_dsp_ctrl() def encode_digit(self, digit): \"\"\"Convert a character 0-9, a-f to a segment.\"\"\" return _SEGMENTS[digit & 0x0f] def encode_string(self, string): \"\"\"Convert an up to 4 character length string containing 0-9, a-z, space, dash, star to an array of segments, matching the length of the source string.\"\"\" segments = bytearray(len(string)) for i in range(len(string)): segments[i] = self.encode_char(string[i]) return segments def encode_char(self, char): \"\"\"Convert a character 0-9, a-z, space, dash or star to a segment.\"\"\" o = ord(char) if o == 32: return _SEGMENTS[36] # space if o == 42: return _SEGMENTS[38] # star/degrees if o == 45: return _SEGMENTS[37] # dash if o >= 65 and o <= 90: return _SEGMENTS[o-55] # uppercase A-Z if o >= 97 and o <= 122: return _SEGMENTS[o-87] # lowercase a-z if o >= 48 and o <= 57: return _SEGMENTS[o-48] # 0-9 raise ValueError(\"Character out of range: {:d} '{:s}'\".format(o, chr(o))) def hex(self, val): \"\"\"Display a hex value 0x0000 through 0xffff, right aligned.\"\"\" string = '{:04x}'.format(val & 0xffff) self.write(self.encode_string(string)) def number(self, num): \"\"\"Display a numeric value -999 through 9999, right aligned.\"\"\" # limit to range -999 to 9999 num = max(-999, min(num, 9999)) string = '{0: >4d}'.format(num) self.write(self.encode_string(string)) def numbers(self, num1, num2, colon=True): \"\"\"Display two numeric values -9 through 99, with leading zeros and separated by a colon.\"\"\" num1 = max(-9, min(num1, 99)) num2 = max(-9, min(num2, 99)) segments = self.encode_string('{0:0>2d}{1:0>2d}'.format(num1, num2)) if colon: segments[1] |= 0x80 # colon on self.write(segments) def temperature(self, num): if num < -9: self.show('lo') # low elif num > 99: self.show('hi') # high else: string = '{0: >2d}'.format(num) self.write(self.encode_string(string)) self.write([_SEGMENTS[38], _SEGMENTS[12]], 2) # degrees C def show(self, string, colon=False): segments = self.encode_string(string) if len(segments) > 1 and colon: segments[1] |= 128 self.write(segments[:4]) def scroll(self, string, delay=250): segments = string if isinstance(string, list) else self.encode_string(string) data = [0] * 8 data[4:0] = list(segments) for i in range(len(segments) + 5): self.write(data[0+i:4+i]) sleep_ms(delay) class TM1637Decimal(TM1637): \"\"\"\u7528\u4e8e\u9a71\u52a8\u57fa\u4e8eTM1637\u82af\u7247\u7684\u56db\u4f4d\u6570\u7801\u7ba1\u6a21\u5757\uff08\u5e26\u5c0f\u6570\u70b9\u7248\u672c\uff09\"\"\" def encode_string(self, string): \"\"\" \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7801\u7ba1\u6bb5\u7801\u5e8f\u5217 \u53c2\u6570:string: \u8f93\u5165\u5b57\u7b26\u4e32\uff08\u652f\u63010-9\u3001a-z\u3001\u7a7a\u683c\u3001\u6a2a\u6760\u3001\u661f\u53f7\u53ca\u5c0f\u6570\u70b9\uff09 \u8fd4\u56de:bytearray: \u8f6c\u6362\u540e\u7684\u6bb5\u7801\u6570\u7ec4\uff0c\u957f\u5ea6\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u975e\u5c0f\u6570\u70b9\u5b57\u7b26\u6570\u76f8\u540c \"\"\" # \u79fb\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5c0f\u6570\u70b9\u540e\u8ba1\u7b97\u5b57\u7b26\u603b\u6570\uff0c\u521d\u59cb\u5316\u5bf9\u5e94\u957f\u5ea6\u7684\u6bb5\u7801\u6570\u7ec4 segments = bytearray(len(string.replace('.', ''))) # \u521b\u5efa\u5b58\u50a8\u6bb5\u7801\u7684\u7f13\u51b2\u533a:ml-citation{ref=\"4,5\" data=\"citationList\"} j = 0 # \u6bb5\u7801\u6570\u7ec4\u7684\u5f53\u524d\u5199\u5165\u4f4d\u7f6e for i in range(len(string)): # \u5f53\u9047\u5230\u5c0f\u6570\u70b9\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u5df2\u5904\u7406\u65f6\uff0c\u5c06\u5c0f\u6570\u70b9\u9644\u52a0\u5230\u524d\u4e00\u4e2a\u6bb5\u7801 if string[i] == '.' and j > 0: segments[j-1] |= TM1637_MSB # \u901a\u8fc7\u8bbe\u7f6e\u6700\u9ad8\u4f4d(MSB)\u6fc0\u6d3b\u5c0f\u6570\u70b9:ml-citation{ref=\"1,4\" data=\"citationList\"} continue # \u5c06\u5f53\u524d\u5b57\u7b26\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6bb5\u7801\u5e76\u5b58\u5165\u6570\u7ec4 segments[j] = self.encode_char(string[i]) # \u8c03\u7528\u57fa\u7c7b\u7f16\u7801\u65b9\u6cd5:ml-citation{ref=\"2,7\" data=\"citationList\"} j += 1 # \u79fb\u52a8\u5199\u5165\u4f4d\u7f6e\u6307\u9488 return segments \u5b9e\u9a8c\u4e00\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u7684\u663e\u793a \u7a0b\u5e8f\u5982\u4e0b\uff1a from libs.TM1637 import TM1637 from machine import Pin import time # \u521d\u59cb\u5316\uff08\u5047\u8bbeCLK=GPIO22, DIO=GPIO21\uff09 display = TM1637(clk=Pin(22),dio=Pin(21)) display.show(\" \") # \u56db\u4e2a\u7a7a\u683c\uff0c\u6e05\u5c4f time.sleep(1) display.hex(10) #\u5341\u516d\u8fdb\u5236A time.sleep(1) display.number(1234) # \u663e\u793a\u6570\u5b57\uff0c\u8303\u56f40-9999 time.sleep(1) display.numbers(1,51,1) # \u65f6\u95f4\u663e\u793a\uff0c\u4f20\u90122\u4e2a\u6570\u503c\uff0c\u6700\u540e\u4e00\u4f4d1\u662f\u70b9\u4eae0\u662f\u706d time.sleep(1) display.temperature(22) #\u6e29\u5ea6\u663e\u793a time.sleep(1) display.show(\"2 9\") # \u8f93\u5165\u7a7a\u683c\u5219\u4e0d\u663e\u793a\uff0c\u53ef\u7528\u4e8e\u6e05\u5c4f time.sleep(1) display.show(\"{} \".format(8)) time.sleep(1) display.show(\" %.2d\"%6) #\u663e\u793a06 time.sleep(1) \u5b9e\u9a8c\u4e8c\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u5b9e\u65f6\u663e\u793a\u7cfb\u7edf\u65f6\u95f4 \u5185\u90e8\u5b9e\u65f6\u65f6\u949f ESP32\u5355\u7247\u673a\u5185\u90e8\u7684RTC\u4f7f\u7528machine\u6a21\u5757\u4e2d\u7684RTC\u7c7b\u53ca\u5176\u5185\u90e8\u51fd\u6570\u6765\u914d\u7f6e \u5bfc\u5165RTC\u6a21\u5757\u5e76\u521d\u59cb\u5316 python from machine import RTC rtc = RTC() # \u521b\u5efaRTC\u5bf9\u8c61 \u8bbe\u7f6e\u65f6\u95f4 python # \u683c\u5f0f\uff1a(\u5e74, \u6708, \u65e5, \u661f\u671f, \u65f6, \u5206, \u79d2, \u5fae\u79d2) rtc.datetime((2025, 5, 14, 1, 12, 30, 0, 0)) # 2025\u5e745\u670814\u65e5 12:30:00\uff08\u5468\u4e00\uff09 \u8bfb\u53d6\u65f6\u95f4 python current_time = rtc.datetime() print(current_time) # \u8f93\u51fa\uff1a(2025, 5, 14, 2, 13, 58, 56, 69809 # \u683c\u5f0f\uff1a(\u5e74, \u6708, \u65e5, \u661f\u671f, \u65f6, \u5206, \u79d2, \u5fae\u79d2)3) \u8fd4\u56de\u7684\u5143\u7ec4\u7ed3\u6784\u4e3a\uff1a (year, month, day, weekday, hour, minute, second, microsecond) weekday : 0-6 \u5bf9\u5e94 \u5468\u4e00\u81f3\u5468\u65e5\uff08\u90e8\u5206\u786c\u4ef6\u4e3a1-7\uff09 rtc.datetime() \u6ca1\u6709\u4f20\u5165\u53c2\u6570\u65f6\uff0c\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\uff0c\u4e00\u5355\u88ab\u4f20\u53c2\u540e\uff0c\u5c06\u65e0\u6cd5\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4 \u4f20\u53c2\u7684\u65f6\u5019\u662f\u5143\u7ec4\u7684\u5f62\u5f0f\uff0c\u6ce8\u610f\u662f\u53cc\u5c42\uff08\uff09 \u4ee3\u7801\u5982\u4e0b ''' \u5b9e\u65f6\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\u5e76\u663e\u793a ''' from libs.TM1637 import TM1637 from machine import Pin,RTC import time # \u521d\u59cb\u5316\uff08\u5047\u8bbeCLK=GPIO22, DIO=GPIO21\uff09 display = TM1637(clk=Pin(22),dio=Pin(21)) rtc = RTC() # \u521b\u5efaRTC\u5bf9\u8c61 a = rtc.datetime() hour = a[4] minute = a[5] second = a[6] print(f\"\u65f6\uff1a{hour}:\u5206\uff1a{minute}:\u79d2\uff1a{second}\") while True: a = rtc.datetime() hour = a[4] minute = a[5] second = a[6] display.numbers(hour,minute,1) # \u65f6\u95f4\u663e\u793a\uff0c\u4f20\u90122\u4e2a\u6570\u503c\uff0c\u6700\u540e\u4e00\u4f4d1\u662f\u70b9\u4eae0\u662f\u706d time.sleep(0.5) display.numbers(hour,minute,0) time.sleep(0.5)#### \u5b9e\u9a8c\u4e09\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u5b9e\u65f6\u663e\u793a\u65f6\u95f4\uff08\u975e\u7cfb\u7edf\u83b7\u53d6\uff09 \u5b9e\u9a8c\u4e09\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u663e\u793a\u65f6\u95f4\uff08\u4e2d\u65ad\u65b9\u5f0f\uff09 \u7a0b\u5e8f\u5982\u4e0b # \u5bfc\u5165\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 from machine import Pin, RTC, Timer from libs.TM1637 import TM1637 import utime # \u786c\u4ef6\u8fde\u63a5\u914d\u7f6e CLK_PIN = 22 DIO_PIN = 21 # \u521d\u59cb\u5316\u786c\u4ef6 display = TM1637(clk=Pin(22),dio=Pin(21)) rtc = RTC() # \u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4 # \u5168\u5c40\u53d8\u91cf colon_state = True # \u5192\u53f7\u663e\u793a\u72b6\u6001 edit_mode = False # \u8bbe\u7f6e\u6a21\u5f0f\u6807\u5fd7 blink_counter = 0 # \u95ea\u70c1\u8ba1\u6570\u5668 current_time = [12, 0] # \u5f53\u524d\u65f6\u95f4[\u5c0f\u65f6, \u5206\u949f] def time_increment(): \"\"\"\u65f6\u95f4\u81ea\u52a8\u9012\u589e\"\"\" current_time[1] += 1 if current_time[1] >= 60: current_time[1] = 0 current_time[0] += 1 if current_time[0] >= 24: current_time[0] = 0 def update_display(h, m, show_colon=True): \"\"\"\u66f4\u65b0\u663e\u793a\u5185\u5bb9\"\"\" display.numbers(h,m,show_colon) # \u663e\u793a\u65f6\u95f4\u5e76\u5728\u7b2c\u4e8c\u4f4d\u663e\u793a\u5192\u53f7 def clock_tick(timer): \"\"\"\u5b9a\u65f6\u5668\u4e2d\u65ad\u5904\u7406\"\"\" global colon_state, blink_counter colon_state = not colon_state # \u5192\u53f7\u95ea\u70c1 if not edit_mode: time_increment() # \u6b63\u5e38\u6a21\u5f0f\u81ea\u52a8\u8d70\u65f6 else: blink_counter = (blink_counter + 1) % 6 # \u8bbe\u7f6e\u6a21\u5f0f\u95ea\u70c1\u5468\u671f # \u8bbe\u7f6e\u6a21\u5f0f\u4e0b\u7684\u95ea\u70c1\u6548\u679c show_colon = colon_state if edit_mode: if blink_counter < 3: # \u95ea\u70c1\u5f53\u524d\u7f16\u8f91\u4f4d if blink_counter < 4: show_colon = False # \u83b7\u53d6RTC\u65f6\u95f4\uff08\u5b9e\u9645\u4f7f\u7528\u65f6\u53d6\u6d88\u6ce8\u91ca\uff09 t = utime.localtime() current_time = [t[3], t[4]] update_display(*current_time, show_colon) # \u914d\u7f6e\u786c\u4ef6\u5b9a\u65f6\u5668\uff08\u6bcf\u79d2\u89e6\u53d1\uff09 timer = Timer(0) timer.init(period=500, mode=Timer.PERIODIC, callback=clock_tick) # \u4e3b\u7a0b\u5e8f\u4fdd\u6301\u8fd0\u884c while True: utime.sleep(1)","title":"15.\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%97%B6%E9%92%9F%E6%95%B0%E7%A0%81%E7%AE%A1/#_1","text":"","title":"\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%97%B6%E9%92%9F%E6%95%B0%E7%A0%81%E7%AE%A1/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-CLK 22 2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-DIO 21 3 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-VCC P2 4 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1-GND P2 \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u4ecb\u7ecd \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u4ecb\u7ecd\u7531\u4e00\u4e2a12\u7ba1\u811a\u76844\u4f4d7\u6bb5\u5171\u9633\u6781\u6570\u7801\u7ba1\u548c\u4e00\u4e2a\u63a7\u5236\u82af\u7247TM1637\u6784\u6210\u3002\u53e6\u4e00\u8fb9\u662f\u6570\u7801\u7ba1\u7684\u56fe\u6807\u6807\u5fd7\u3002\u6b64\u4ea7\u54c1\u53ef\u4ee5\u5e94\u7528\u5728\u65f6\u95f4\u663e\u793a\uff0c\u79d2\u8868\u663e\u793a\u4ee5\u53ca\u5176\u4ed6\u9700\u8981\u663e\u793a\u6570\u5b57\u7684\u8bbe\u5907\u4e0a\u3002 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aTM1637.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a \"\"\" \u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1TM1637\u7c7b \"\"\" from micropython import const from machine import Pin from time import sleep_us, sleep_ms TM1637_CMD1 = const(64) # 0x40 data command TM1637_CMD2 = const(192) # 0xC0 address command TM1637_CMD3 = const(128) # 0x80 display control command TM1637_DSP_ON = const(8) # 0x08 display on TM1637_DELAY = const(10) # 10us delay between clk/dio pulses TM1637_MSB = const(128) # msb is the decimal point or the colon depending on your display # 0-9, a-z, blank, dash, star _SEGMENTS = bytearray(b'\\x3F\\x06\\x5B\\x4F\\x66\\x6D\\x7D\\x07\\x7F\\x6F\\x77\\x7C\\x39\\x5E\\x79\\x71\\x3D\\x76\\x06\\x1E\\x76\\x38\\x55\\x54\\x3F\\x73\\x67\\x50\\x6D\\x78\\x3E\\x1C\\x2A\\x76\\x6E\\x5B\\x00\\x40\\x63') class TM1637(object): \"\"\"Library for quad 7-segment LED modules based on the TM1637 LED driver.\"\"\" def __init__(self, clk, dio, brightness=7): self.clk = clk self.dio = dio if not 0 <= brightness <= 7: raise ValueError(\"Brightness out of range\") self._brightness = brightness self.clk.init(Pin.OUT, value=0) self.dio.init(Pin.OUT, value=0) sleep_us(TM1637_DELAY) self._write_data_cmd() self._write_dsp_ctrl() def _start(self): self.dio(0) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) def _stop(self): self.dio(0) sleep_us(TM1637_DELAY) self.clk(1) sleep_us(TM1637_DELAY) self.dio(1) def _write_data_cmd(self): # automatic address increment, normal mode self._start() self._write_byte(TM1637_CMD1) self._stop() def _write_dsp_ctrl(self): # display on, set brightness self._start() self._write_byte(TM1637_CMD3 | TM1637_DSP_ON | self._brightness) self._stop() def _write_byte(self, b): for i in range(8): self.dio((b >> i) & 1) sleep_us(TM1637_DELAY) self.clk(1) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) self.clk(1) sleep_us(TM1637_DELAY) self.clk(0) sleep_us(TM1637_DELAY) def brightness(self, val=None): \"\"\"Set the display brightness 0-7.\"\"\" # brightness 0 = 1/16th pulse width # brightness 7 = 14/16th pulse width if val is None: return self._brightness if not 0 <= val <= 7: raise ValueError(\"Brightness out of range\") self._brightness = val self._write_data_cmd() self._write_dsp_ctrl() def write(self, segments, pos=0): \"\"\"Display up to 6 segments moving right from a given position. The MSB in the 2nd segment controls the colon between the 2nd and 3rd segments.\"\"\" if not 0 <= pos <= 5: raise ValueError(\"Position out of range\") self._write_data_cmd() self._start() self._write_byte(TM1637_CMD2 | pos) for seg in segments: self._write_byte(seg) self._stop() self._write_dsp_ctrl() def encode_digit(self, digit): \"\"\"Convert a character 0-9, a-f to a segment.\"\"\" return _SEGMENTS[digit & 0x0f] def encode_string(self, string): \"\"\"Convert an up to 4 character length string containing 0-9, a-z, space, dash, star to an array of segments, matching the length of the source string.\"\"\" segments = bytearray(len(string)) for i in range(len(string)): segments[i] = self.encode_char(string[i]) return segments def encode_char(self, char): \"\"\"Convert a character 0-9, a-z, space, dash or star to a segment.\"\"\" o = ord(char) if o == 32: return _SEGMENTS[36] # space if o == 42: return _SEGMENTS[38] # star/degrees if o == 45: return _SEGMENTS[37] # dash if o >= 65 and o <= 90: return _SEGMENTS[o-55] # uppercase A-Z if o >= 97 and o <= 122: return _SEGMENTS[o-87] # lowercase a-z if o >= 48 and o <= 57: return _SEGMENTS[o-48] # 0-9 raise ValueError(\"Character out of range: {:d} '{:s}'\".format(o, chr(o))) def hex(self, val): \"\"\"Display a hex value 0x0000 through 0xffff, right aligned.\"\"\" string = '{:04x}'.format(val & 0xffff) self.write(self.encode_string(string)) def number(self, num): \"\"\"Display a numeric value -999 through 9999, right aligned.\"\"\" # limit to range -999 to 9999 num = max(-999, min(num, 9999)) string = '{0: >4d}'.format(num) self.write(self.encode_string(string)) def numbers(self, num1, num2, colon=True): \"\"\"Display two numeric values -9 through 99, with leading zeros and separated by a colon.\"\"\" num1 = max(-9, min(num1, 99)) num2 = max(-9, min(num2, 99)) segments = self.encode_string('{0:0>2d}{1:0>2d}'.format(num1, num2)) if colon: segments[1] |= 0x80 # colon on self.write(segments) def temperature(self, num): if num < -9: self.show('lo') # low elif num > 99: self.show('hi') # high else: string = '{0: >2d}'.format(num) self.write(self.encode_string(string)) self.write([_SEGMENTS[38], _SEGMENTS[12]], 2) # degrees C def show(self, string, colon=False): segments = self.encode_string(string) if len(segments) > 1 and colon: segments[1] |= 128 self.write(segments[:4]) def scroll(self, string, delay=250): segments = string if isinstance(string, list) else self.encode_string(string) data = [0] * 8 data[4:0] = list(segments) for i in range(len(segments) + 5): self.write(data[0+i:4+i]) sleep_ms(delay) class TM1637Decimal(TM1637): \"\"\"\u7528\u4e8e\u9a71\u52a8\u57fa\u4e8eTM1637\u82af\u7247\u7684\u56db\u4f4d\u6570\u7801\u7ba1\u6a21\u5757\uff08\u5e26\u5c0f\u6570\u70b9\u7248\u672c\uff09\"\"\" def encode_string(self, string): \"\"\" \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u7801\u7ba1\u6bb5\u7801\u5e8f\u5217 \u53c2\u6570:string: \u8f93\u5165\u5b57\u7b26\u4e32\uff08\u652f\u63010-9\u3001a-z\u3001\u7a7a\u683c\u3001\u6a2a\u6760\u3001\u661f\u53f7\u53ca\u5c0f\u6570\u70b9\uff09 \u8fd4\u56de:bytearray: \u8f6c\u6362\u540e\u7684\u6bb5\u7801\u6570\u7ec4\uff0c\u957f\u5ea6\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u975e\u5c0f\u6570\u70b9\u5b57\u7b26\u6570\u76f8\u540c \"\"\" # \u79fb\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5c0f\u6570\u70b9\u540e\u8ba1\u7b97\u5b57\u7b26\u603b\u6570\uff0c\u521d\u59cb\u5316\u5bf9\u5e94\u957f\u5ea6\u7684\u6bb5\u7801\u6570\u7ec4 segments = bytearray(len(string.replace('.', ''))) # \u521b\u5efa\u5b58\u50a8\u6bb5\u7801\u7684\u7f13\u51b2\u533a:ml-citation{ref=\"4,5\" data=\"citationList\"} j = 0 # \u6bb5\u7801\u6570\u7ec4\u7684\u5f53\u524d\u5199\u5165\u4f4d\u7f6e for i in range(len(string)): # \u5f53\u9047\u5230\u5c0f\u6570\u70b9\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u5df2\u5904\u7406\u65f6\uff0c\u5c06\u5c0f\u6570\u70b9\u9644\u52a0\u5230\u524d\u4e00\u4e2a\u6bb5\u7801 if string[i] == '.' and j > 0: segments[j-1] |= TM1637_MSB # \u901a\u8fc7\u8bbe\u7f6e\u6700\u9ad8\u4f4d(MSB)\u6fc0\u6d3b\u5c0f\u6570\u70b9:ml-citation{ref=\"1,4\" data=\"citationList\"} continue # \u5c06\u5f53\u524d\u5b57\u7b26\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6bb5\u7801\u5e76\u5b58\u5165\u6570\u7ec4 segments[j] = self.encode_char(string[i]) # \u8c03\u7528\u57fa\u7c7b\u7f16\u7801\u65b9\u6cd5:ml-citation{ref=\"2,7\" data=\"citationList\"} j += 1 # \u79fb\u52a8\u5199\u5165\u4f4d\u7f6e\u6307\u9488 return segments","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%97%B6%E9%92%9F%E6%95%B0%E7%A0%81%E7%AE%A1/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a from libs.TM1637 import TM1637 from machine import Pin import time # \u521d\u59cb\u5316\uff08\u5047\u8bbeCLK=GPIO22, DIO=GPIO21\uff09 display = TM1637(clk=Pin(22),dio=Pin(21)) display.show(\" \") # \u56db\u4e2a\u7a7a\u683c\uff0c\u6e05\u5c4f time.sleep(1) display.hex(10) #\u5341\u516d\u8fdb\u5236A time.sleep(1) display.number(1234) # \u663e\u793a\u6570\u5b57\uff0c\u8303\u56f40-9999 time.sleep(1) display.numbers(1,51,1) # \u65f6\u95f4\u663e\u793a\uff0c\u4f20\u90122\u4e2a\u6570\u503c\uff0c\u6700\u540e\u4e00\u4f4d1\u662f\u70b9\u4eae0\u662f\u706d time.sleep(1) display.temperature(22) #\u6e29\u5ea6\u663e\u793a time.sleep(1) display.show(\"2 9\") # \u8f93\u5165\u7a7a\u683c\u5219\u4e0d\u663e\u793a\uff0c\u53ef\u7528\u4e8e\u6e05\u5c4f time.sleep(1) display.show(\"{} \".format(8)) time.sleep(1) display.show(\" %.2d\"%6) #\u663e\u793a06 time.sleep(1)","title":"\u5b9e\u9a8c\u4e00\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u7684\u663e\u793a"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%97%B6%E9%92%9F%E6%95%B0%E7%A0%81%E7%AE%A1/#_4","text":"\u5185\u90e8\u5b9e\u65f6\u65f6\u949f ESP32\u5355\u7247\u673a\u5185\u90e8\u7684RTC\u4f7f\u7528machine\u6a21\u5757\u4e2d\u7684RTC\u7c7b\u53ca\u5176\u5185\u90e8\u51fd\u6570\u6765\u914d\u7f6e \u5bfc\u5165RTC\u6a21\u5757\u5e76\u521d\u59cb\u5316 python from machine import RTC rtc = RTC() # \u521b\u5efaRTC\u5bf9\u8c61 \u8bbe\u7f6e\u65f6\u95f4 python # \u683c\u5f0f\uff1a(\u5e74, \u6708, \u65e5, \u661f\u671f, \u65f6, \u5206, \u79d2, \u5fae\u79d2) rtc.datetime((2025, 5, 14, 1, 12, 30, 0, 0)) # 2025\u5e745\u670814\u65e5 12:30:00\uff08\u5468\u4e00\uff09 \u8bfb\u53d6\u65f6\u95f4 python current_time = rtc.datetime() print(current_time) # \u8f93\u51fa\uff1a(2025, 5, 14, 2, 13, 58, 56, 69809 # \u683c\u5f0f\uff1a(\u5e74, \u6708, \u65e5, \u661f\u671f, \u65f6, \u5206, \u79d2, \u5fae\u79d2)3) \u8fd4\u56de\u7684\u5143\u7ec4\u7ed3\u6784\u4e3a\uff1a (year, month, day, weekday, hour, minute, second, microsecond) weekday : 0-6 \u5bf9\u5e94 \u5468\u4e00\u81f3\u5468\u65e5\uff08\u90e8\u5206\u786c\u4ef6\u4e3a1-7\uff09 rtc.datetime() \u6ca1\u6709\u4f20\u5165\u53c2\u6570\u65f6\uff0c\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\uff0c\u4e00\u5355\u88ab\u4f20\u53c2\u540e\uff0c\u5c06\u65e0\u6cd5\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4 \u4f20\u53c2\u7684\u65f6\u5019\u662f\u5143\u7ec4\u7684\u5f62\u5f0f\uff0c\u6ce8\u610f\u662f\u53cc\u5c42\uff08\uff09 \u4ee3\u7801\u5982\u4e0b ''' \u5b9e\u65f6\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\u5e76\u663e\u793a ''' from libs.TM1637 import TM1637 from machine import Pin,RTC import time # \u521d\u59cb\u5316\uff08\u5047\u8bbeCLK=GPIO22, DIO=GPIO21\uff09 display = TM1637(clk=Pin(22),dio=Pin(21)) rtc = RTC() # \u521b\u5efaRTC\u5bf9\u8c61 a = rtc.datetime() hour = a[4] minute = a[5] second = a[6] print(f\"\u65f6\uff1a{hour}:\u5206\uff1a{minute}:\u79d2\uff1a{second}\") while True: a = rtc.datetime() hour = a[4] minute = a[5] second = a[6] display.numbers(hour,minute,1) # \u65f6\u95f4\u663e\u793a\uff0c\u4f20\u90122\u4e2a\u6570\u503c\uff0c\u6700\u540e\u4e00\u4f4d1\u662f\u70b9\u4eae0\u662f\u706d time.sleep(0.5) display.numbers(hour,minute,0) time.sleep(0.5)#### \u5b9e\u9a8c\u4e09\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u5b9e\u65f6\u663e\u793a\u65f6\u95f4\uff08\u975e\u7cfb\u7edf\u83b7\u53d6\uff09","title":"\u5b9e\u9a8c\u4e8c\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u5b9e\u65f6\u663e\u793a\u7cfb\u7edf\u65f6\u95f4"},{"location":"MicroPython/%E5%9B%9B%E4%BD%8D%E6%97%B6%E9%92%9F%E6%95%B0%E7%A0%81%E7%AE%A1/#_5","text":"\u7a0b\u5e8f\u5982\u4e0b # \u5bfc\u5165\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 from machine import Pin, RTC, Timer from libs.TM1637 import TM1637 import utime # \u786c\u4ef6\u8fde\u63a5\u914d\u7f6e CLK_PIN = 22 DIO_PIN = 21 # \u521d\u59cb\u5316\u786c\u4ef6 display = TM1637(clk=Pin(22),dio=Pin(21)) rtc = RTC() # \u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4 # \u5168\u5c40\u53d8\u91cf colon_state = True # \u5192\u53f7\u663e\u793a\u72b6\u6001 edit_mode = False # \u8bbe\u7f6e\u6a21\u5f0f\u6807\u5fd7 blink_counter = 0 # \u95ea\u70c1\u8ba1\u6570\u5668 current_time = [12, 0] # \u5f53\u524d\u65f6\u95f4[\u5c0f\u65f6, \u5206\u949f] def time_increment(): \"\"\"\u65f6\u95f4\u81ea\u52a8\u9012\u589e\"\"\" current_time[1] += 1 if current_time[1] >= 60: current_time[1] = 0 current_time[0] += 1 if current_time[0] >= 24: current_time[0] = 0 def update_display(h, m, show_colon=True): \"\"\"\u66f4\u65b0\u663e\u793a\u5185\u5bb9\"\"\" display.numbers(h,m,show_colon) # \u663e\u793a\u65f6\u95f4\u5e76\u5728\u7b2c\u4e8c\u4f4d\u663e\u793a\u5192\u53f7 def clock_tick(timer): \"\"\"\u5b9a\u65f6\u5668\u4e2d\u65ad\u5904\u7406\"\"\" global colon_state, blink_counter colon_state = not colon_state # \u5192\u53f7\u95ea\u70c1 if not edit_mode: time_increment() # \u6b63\u5e38\u6a21\u5f0f\u81ea\u52a8\u8d70\u65f6 else: blink_counter = (blink_counter + 1) % 6 # \u8bbe\u7f6e\u6a21\u5f0f\u95ea\u70c1\u5468\u671f # \u8bbe\u7f6e\u6a21\u5f0f\u4e0b\u7684\u95ea\u70c1\u6548\u679c show_colon = colon_state if edit_mode: if blink_counter < 3: # \u95ea\u70c1\u5f53\u524d\u7f16\u8f91\u4f4d if blink_counter < 4: show_colon = False # \u83b7\u53d6RTC\u65f6\u95f4\uff08\u5b9e\u9645\u4f7f\u7528\u65f6\u53d6\u6d88\u6ce8\u91ca\uff09 t = utime.localtime() current_time = [t[3], t[4]] update_display(*current_time, show_colon) # \u914d\u7f6e\u786c\u4ef6\u5b9a\u65f6\u5668\uff08\u6bcf\u79d2\u89e6\u53d1\uff09 timer = Timer(0) timer.init(period=500, mode=Timer.PERIODIC, callback=clock_tick) # \u4e3b\u7a0b\u5e8f\u4fdd\u6301\u8fd0\u884c while True: utime.sleep(1)","title":"\u5b9e\u9a8c\u4e09\uff1a\u56db\u4f4d\u65f6\u949f\u6570\u7801\u7ba1\u663e\u793a\u65f6\u95f4\uff08\u4e2d\u65ad\u65b9\u5f0f\uff09"},{"location":"MicroPython/%E5%9C%9F%E5%A3%A4%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668 1 4 LED\u706f 1 5 \u7535\u673a\u9a71\u52a8+\u6c34\u6cf5 1 6 PH2.0\u53cc\u5934\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED 2 2 \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668 4 3 \u7535\u673a\u9a71\u52a8- A 17 4 \u7535\u673a\u9a71\u52a8-B 16 \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u6a21\u5757\u6709\u4e24\u4e2a\u94dc\u6761\u662f\u4f20\u611f\u5668\u63a2\u5934\u3002 \u5c06\u5b83\u4eec\u63d2\u5165\u571f\u58e4\u65f6\uff0c\u5b83\u4eec\u53ef\u4ee5\u68c0\u6d4b\u5230\u571f\u58e4\u7684\u6c34\u5206\u3002 \u571f\u58e4\u6e7f\u6da6\uff0c\u5bfc\u7535\u6027\u8d8a\u597d\uff0c\u53cd\u6620\u51fa\u5b83\u4eec\u4e4b\u95f4\u7684\u7535\u963b\u8d8a\u4f4e\u3002\u571f\u58e4\u5e72\u71e5,\u5bfc\u7535\u6027\u5c31\u76f8\u5bf9\u5dee\u4e00\u70b9,\u56e0\u6b64\u4ed6\u4eec\u4e4b\u95f4\u7684\u7535\u963b\u8d8a\u9ad8\u3002 \u5b83\u662f\u6a21\u62df\u4f20\u611f\u5668\uff0c\u56e0\u6b64\u6211\u4eec\u901a\u8fc7\u6a21\u62df\u8f93\u5165\u83b7\u5f97\u7535\u538b\u503c\u3002\u56e0\u4e3a\u571f\u58e4\u7684\u6e7f\u5ea6\u53ef\u4ee5\u5206\u4e3a\u51e0\u4e2a\u7b49\u7ea7\uff0c\u5f53\u6211\u4eec\u4f7f\u7528\u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u505a\u4e00\u4e2a\u81ea\u52a8\u6d47\u82b1\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5c06\u65b9\u4fbf\u7684\u4f7f\u7528\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u7a0b\u5e8f\u5982\u4e0b ```python ''' \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 soil = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: print(soil.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u571f\u58e4\u5e72\u71e5\u7684\u65f6\u5019\u503c\u504f\u5c0f\uff0c\u6e7f\u5ea6\u8d8a\u5927\u503c\u5c31\u8d8a\u5927 2. \u7ecf\u8fc7\u5b9e\u9a8c\uff0c\u503c<48000\u7684\u65f6\u5019\u7a81\u7136\u5c31\u504f\u5e72\u71e5\uff0c\u9700\u8981\u6d47\u6c34 \u5b9e\u9a8c\u4e8c\uff1a\u81ea\u52a8\u6d47\u82b1\u7cfb\u7edf \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c\u4e00\uff1a\u81ea\u52a8\u6d47\u82b1\u7cfb\u7edf ''' from machine import Pin, ADC import time # \u5b9a\u4e49\u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u5bf9\u8c61 soil = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) # \u5b9a\u4e49led\u706f\u5bf9\u8c61 led = Pin(2,Pin.OUT) # \u5b9a\u4e49\u7535\u673a\u5bf9\u8c61 machinery_A = Pin(16,Pin.OUT) machinery_B = Pin(17,Pin.OUT) # \u521d\u59cb\u5316\u7535\u673a\u5f15\u811a\u503c\u90fd\u4e3a\u9ad8 machinery_A.value(1) machinery_B.value(1) while True : if soil.read_u16() < 48000: machinery_A.value(0) # \u542f\u52a8\u7535\u673a time.sleep(2) machinery_A.value(1) # \u5173\u95ed\u7535\u673a else : machinery_A.value(1) # \u4fdd\u6301\u5173\u95ed","title":"35.\u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E5%9C%9F%E5%A3%A4%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E5%9C%9F%E5%A3%A4%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668 1 4 LED\u706f 1 5 \u7535\u673a\u9a71\u52a8+\u6c34\u6cf5 1 6 PH2.0\u53cc\u5934\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED 2 2 \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668 4 3 \u7535\u673a\u9a71\u52a8- A 17 4 \u7535\u673a\u9a71\u52a8-B 16 \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u6a21\u5757\u6709\u4e24\u4e2a\u94dc\u6761\u662f\u4f20\u611f\u5668\u63a2\u5934\u3002 \u5c06\u5b83\u4eec\u63d2\u5165\u571f\u58e4\u65f6\uff0c\u5b83\u4eec\u53ef\u4ee5\u68c0\u6d4b\u5230\u571f\u58e4\u7684\u6c34\u5206\u3002 \u571f\u58e4\u6e7f\u6da6\uff0c\u5bfc\u7535\u6027\u8d8a\u597d\uff0c\u53cd\u6620\u51fa\u5b83\u4eec\u4e4b\u95f4\u7684\u7535\u963b\u8d8a\u4f4e\u3002\u571f\u58e4\u5e72\u71e5,\u5bfc\u7535\u6027\u5c31\u76f8\u5bf9\u5dee\u4e00\u70b9,\u56e0\u6b64\u4ed6\u4eec\u4e4b\u95f4\u7684\u7535\u963b\u8d8a\u9ad8\u3002 \u5b83\u662f\u6a21\u62df\u4f20\u611f\u5668\uff0c\u56e0\u6b64\u6211\u4eec\u901a\u8fc7\u6a21\u62df\u8f93\u5165\u83b7\u5f97\u7535\u538b\u503c\u3002\u56e0\u4e3a\u571f\u58e4\u7684\u6e7f\u5ea6\u53ef\u4ee5\u5206\u4e3a\u51e0\u4e2a\u7b49\u7ea7\uff0c\u5f53\u6211\u4eec\u4f7f\u7528\u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u505a\u4e00\u4e2a\u81ea\u52a8\u6d47\u82b1\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u5c06\u65b9\u4fbf\u7684\u4f7f\u7528\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E5%9C%9F%E5%A3%A4%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u7a0b\u5e8f\u5982\u4e0b ```python ''' \u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 soil = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: print(soil.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u571f\u58e4\u5e72\u71e5\u7684\u65f6\u5019\u503c\u504f\u5c0f\uff0c\u6e7f\u5ea6\u8d8a\u5927\u503c\u5c31\u8d8a\u5927 2. \u7ecf\u8fc7\u5b9e\u9a8c\uff0c\u503c<48000\u7684\u65f6\u5019\u7a81\u7136\u5c31\u504f\u5e72\u71e5\uff0c\u9700\u8981\u6d47\u6c34","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E5%9C%9F%E5%A3%A4%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c\u4e00\uff1a\u81ea\u52a8\u6d47\u82b1\u7cfb\u7edf ''' from machine import Pin, ADC import time # \u5b9a\u4e49\u571f\u58e4\u6e7f\u5ea6\u4f20\u611f\u5668\u5bf9\u8c61 soil = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) # \u5b9a\u4e49led\u706f\u5bf9\u8c61 led = Pin(2,Pin.OUT) # \u5b9a\u4e49\u7535\u673a\u5bf9\u8c61 machinery_A = Pin(16,Pin.OUT) machinery_B = Pin(17,Pin.OUT) # \u521d\u59cb\u5316\u7535\u673a\u5f15\u811a\u503c\u90fd\u4e3a\u9ad8 machinery_A.value(1) machinery_B.value(1) while True : if soil.read_u16() < 48000: machinery_A.value(0) # \u542f\u52a8\u7535\u673a time.sleep(2) machinery_A.value(1) # \u5173\u95ed\u7535\u673a else : machinery_A.value(1) # \u4fdd\u6301\u5173\u95ed","title":"\u5b9e\u9a8c\u4e8c\uff1a\u81ea\u52a8\u6d47\u82b1\u7cfb\u7edf"},{"location":"MicroPython/%E5%A3%B0%E9%9F%B3%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u58f0\u97f3\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u58f0\u97f3\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u58f0\u97f3\u4f20\u611f\u5668 32 \u58f0\u97f3\u4f20\u611f\u5668\u4ecb\u7ecd \u58f0\u97f3\u4f20\u611f\u5668\u6a21\u5757\u7684\u4f5c\u7528\u76f8\u5f53\u4e8e\u4e00\u4e2a\u8bdd\u7b52(\u9ea6\u514b\u98ce)\u3002\u5b83\u7528\u6765\u63a5\u6536\u58f0\u6ce2\uff0c\u663e\u793a\u58f0\u97f3\u7684\u632f\u52a8\u56fe\u8c61\uff0c\u4f46\u4e0d\u80fd\u5bf9\u566a\u58f0\u7684\u5f3a\u5ea6\u8fdb\u884c\u6d4b\u91cf\u3002\u8be5\u4f20\u611f\u5668\u5185\u7f6e\u4e00\u4e2a\u5bf9\u58f0\u97f3\u654f\u611f\u7684\u7535\u5bb9\u5f0f\u9a7b\u6781\u4f53\u8bdd\u7b52\u3002\u58f0\u6ce2\u4f7f\u8bdd\u7b52\u5185\u7684\u9a7b\u6781\u4f53\u8584\u819c\u632f\u52a8\uff0c\u5bfc\u81f4\u7535\u5bb9\u7684\u53d8\u5316\uff0c\u800c\u4ea7\u751f\u4e0e\u4e4b\u5bf9\u5e94\u53d8\u5316\u7684\u5fae\u5c0f\u7535\u538b\u3002\u8fd9\u4e00\u7535\u538b\u968f\u540e\u88ab\u8f6c\u5316\u62100-5V\u7684\u7535\u538b\uff0c\u7ecf\u8fc7A/D\u8f6c\u6362\u88ab\u6570\u636e\u91c7\u96c6\u5668\u63a5\u53d7\uff0c\u5e76\u4f20\u9001\u7ed9\u4e3b\u63a7\u82af\u7247\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u58f0\u97f3\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vol = Pin(32, Pin.IN) while True: print(vol.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u5b89\u9759\u72b6\u6001\u4e0b\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u5f53\u5728\u6709\u7a81\u53d1\u58f0\u97f3\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u503c\u4e3a\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u5b89\u9759\u65f6\u5019\u7684\u6570\u5b57\u8303\u56f4\u5927\u6982\u4e3a\uff1a10000~12000 2. \u6709\u7a81\u53d1\u58f0\u54cd\u7684\u65f6\u5019\u6570\u503c\u4f1a\u4f4e\u4e8e10000 \u5b9e\u9a8c\u4e8c\uff1a\u58f0\u63a7\u706f \u58f0\u63a7\u706f\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u58f0\u63a7\u706f\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if vol.read_u16() < 10000: led.value(1) time.sleep(5) led.value(0) \u58f0\u63a7\u706f\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u58f0\u63a7\u706f\uff08\u6570\u5b57\u4fe1\u53f7\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = Pin(32, Pin.IN) while True: if vol.value() == 0: led.value(1) time.sleep(5) led.value(0)","title":"22.\u58f0\u97f3\u4f20\u611f\u5668"},{"location":"MicroPython/%E5%A3%B0%E9%9F%B3%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u58f0\u97f3\u4f20\u611f\u5668"},{"location":"MicroPython/%E5%A3%B0%E9%9F%B3%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u58f0\u97f3\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u58f0\u97f3\u4f20\u611f\u5668 32 \u58f0\u97f3\u4f20\u611f\u5668\u4ecb\u7ecd \u58f0\u97f3\u4f20\u611f\u5668\u6a21\u5757\u7684\u4f5c\u7528\u76f8\u5f53\u4e8e\u4e00\u4e2a\u8bdd\u7b52(\u9ea6\u514b\u98ce)\u3002\u5b83\u7528\u6765\u63a5\u6536\u58f0\u6ce2\uff0c\u663e\u793a\u58f0\u97f3\u7684\u632f\u52a8\u56fe\u8c61\uff0c\u4f46\u4e0d\u80fd\u5bf9\u566a\u58f0\u7684\u5f3a\u5ea6\u8fdb\u884c\u6d4b\u91cf\u3002\u8be5\u4f20\u611f\u5668\u5185\u7f6e\u4e00\u4e2a\u5bf9\u58f0\u97f3\u654f\u611f\u7684\u7535\u5bb9\u5f0f\u9a7b\u6781\u4f53\u8bdd\u7b52\u3002\u58f0\u6ce2\u4f7f\u8bdd\u7b52\u5185\u7684\u9a7b\u6781\u4f53\u8584\u819c\u632f\u52a8\uff0c\u5bfc\u81f4\u7535\u5bb9\u7684\u53d8\u5316\uff0c\u800c\u4ea7\u751f\u4e0e\u4e4b\u5bf9\u5e94\u53d8\u5316\u7684\u5fae\u5c0f\u7535\u538b\u3002\u8fd9\u4e00\u7535\u538b\u968f\u540e\u88ab\u8f6c\u5316\u62100-5V\u7684\u7535\u538b\uff0c\u7ecf\u8fc7A/D\u8f6c\u6362\u88ab\u6570\u636e\u91c7\u96c6\u5668\u63a5\u53d7\uff0c\u5e76\u4f20\u9001\u7ed9\u4e3b\u63a7\u82af\u7247\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u58f0\u97f3\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E5%A3%B0%E9%9F%B3%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vol = Pin(32, Pin.IN) while True: print(vol.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u5b89\u9759\u72b6\u6001\u4e0b\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u5f53\u5728\u6709\u7a81\u53d1\u58f0\u97f3\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u503c\u4e3a\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u5b89\u9759\u65f6\u5019\u7684\u6570\u5b57\u8303\u56f4\u5927\u6982\u4e3a\uff1a10000~12000 2. \u6709\u7a81\u53d1\u58f0\u54cd\u7684\u65f6\u5019\u6570\u503c\u4f1a\u4f4e\u4e8e10000","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E5%A3%B0%E9%9F%B3%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u58f0\u63a7\u706f\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u58f0\u63a7\u706f\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if vol.read_u16() < 10000: led.value(1) time.sleep(5) led.value(0) \u58f0\u63a7\u706f\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u58f0\u63a7\u706f\uff08\u6570\u5b57\u4fe1\u53f7\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = Pin(32, Pin.IN) while True: if vol.value() == 0: led.value(1) time.sleep(5) led.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u58f0\u63a7\u706f"},{"location":"MicroPython/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/","text":"\u5b9a\u65f6\u5668\u4e2d\u65ad \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 4 4 PH2.0\u53cc\u5934\u7ebf 4 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 LED\u706f 4 3 LED\u706f 12 4 LED\u706f 13 \u5b9a\u65f6\u5668\u7684\u7c7b\u548c\u51fd\u6570\u8bb2\u89e3 ESP32\u5355\u7247\u673a\u5b9a\u65f6\u5668\u7684\u529f\u80fd\u5728\u8bbe\u5b9a\u7684\u65f6\u95f4\u540e\u53d1\u751f\u4e2d\u65ad\uff0c\u89e6\u53d1\u6267\u884c\u6307\u5b9a\u7684\u7a0b\u5e8f\uff0c\u5b9a\u65f6\u5668\u4f7f\u7528machine\u6a21\u5757\u4e2dTimer\u7c7b\u53ca\u5176\u5185\u90e8\u51fd\u6570\uff1a \u6784\u9020\u5b9a\u65f6\u5668\u5bf9\u8c61 \u5728\u4f7f\u7528\u5b9a\u65f6\u5668\u524d\uff0c\u5148\u8981\u901a\u8fc7Timer\u7c7b\u6784\u4ef6\u5b9a\u65f6\u5668\u5bf9\u8c61\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a machine.Timer(id) *id* \u4e3a\u5b9a\u65f6\u5668\u7684\u7f16\u53f7\uff0c\u7f16\u53f7\u4e3a0~3\uff0c\u76ee\u524dESP32\u4ec5\u652f\u6301\u540c\u65f64\u4e2a\u5b9a\u5236\u5668\uff0c\u5f53\u7f16\u53f7\u5927\u4e8e3\u65f6\uff0c\u4f1a\u5bf9\u7f16\u53f7\u8fdb\u884c\u53d6\u4f59\uff0c\u5e76\u8986\u76d6\u4e4b\u524d\u76f8\u540c\u7f16\u53f7\u7684\u5b9a\u65f6\u5668\u3002 \u5b9a\u65f6\u5668\u7684\u51fd\u6570\u4f53 \u5b9a\u65f6\u5668\u5bf9\u8c61.init(period, mode,callvback) \u53c2\u6570 \u7c7b\u578b \u5fc5\u586b \u8bf4\u660e \u200c id \u200c int \u2713 \u5b9a\u65f6\u5668\u7f16\u53f7\uff08\u4e0d\u540c\u786c\u4ef6\u652f\u6301\u8303\u56f4\u4e0d\u540c\uff0c\u901a\u5e38\u4ece0\u5f00\u59cb\uff09 \u200c mode \u200c Timer.\u5e38\u91cf \u2715 \u5b9a\u65f6\u5668\u6a21\u5f0f\uff1a PERIODIC \uff08\u5468\u671f\uff09\u6216 ONE_SHOT \uff08\u5355\u6b21\uff09\uff0c\u9ed8\u8ba4\u5468\u671f \u200c period \u200c int \u2715 \u5468\u671f\u65f6\u957f\uff08\u6beb\u79d2\uff09 \u200c callback \u200c function \u2715 \u4e2d\u65ad\u56de\u8c03\u51fd\u6570\uff0c\u683c\u5f0f\uff1a callback(timer) \u5b9e\u9a8c\u4e00\uff1a\u4f7f\u7528\u4e2d\u65ad\u5b9e\u73b01\u4e2aLED\u706f\u7684\u95ea\u70c1 \u793a\u4f8b\uff1a from machine import Timer, Pin import time led = Pin(2, Pin.OUT) # ESP32 \u677f\u8f7d LED\uff08GPIO2\uff09 # \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 def toggle_led(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.5\u79d2\u4e00\u6b21\") led.value(not led.value()) # \u7ffb\u8f6c LED \u72b6\u6001 # \u521d\u59cb\u5316\u5b9a\u65f6\u5668\uff08\u5468\u671f 500ms\uff09 tim = Timer(0) tim.init(period=500, mode=Timer.PERIODIC, callback=toggle_led) # \u4e3b\u5faa\u73af\u53ef\u6267\u884c\u5176\u4ed6\u4efb\u52a1 while True: print(\"1\u79d2\u4e00\u6b21\") time.sleep(1) \u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u5b9a\u65f6\u5668\u5b9e\u73b04\u76cfLED\u706f\u7684\u4e0d\u540c\u9891\u7387\u7684\u95ea\u70c1 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Timer, Pin import time led1 = Pin(2, Pin.OUT) led2 = Pin(4, Pin.OUT) led3 = Pin(12, Pin.OUT) led4 = Pin(13, Pin.OUT) # \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 def toggle_led1(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.25\u79d2\u4e00\u6b21\") led1.value(not led1.value()) # \u7ffb\u8f6c LED \u72b6\u6001 def toggle_led2(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.5\u79d2\u4e00\u6b21\") led2.value(not led2.value()) # \u7ffb\u8f6c LED \u72b6\u6001 def toggle_led3(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.75\u79d2\u4e00\u6b21\") led3.value(not led3.value()) # \u7ffb\u8f6c LED \u72b6\u6001 def toggle_led4(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56681\u79d2\u4e00\u6b21\") led4.value(not led4.value()) # \u7ffb\u8f6c LED \u72b6\u6001 # \u521d\u59cb\u5316\u5b9a\u65f6\u5668\uff08\u5468\u671f 500ms\uff09 tim1 = Timer(0) tim1.init(period=250, mode=Timer.PERIODIC, callback=toggle_led1) tim2 = Timer(1) tim2.init(period=500, mode=Timer.PERIODIC, callback=toggle_led2) tim3 = Timer(2) tim3.init(period=750, mode=Timer.PERIODIC, callback=toggle_led3) tim4 = Timer(3) tim4.init(period=1000, mode=Timer.PERIODIC, callback=toggle_led4) # \u4e3b\u5faa\u73af\u53ef\u6267\u884c\u5176\u4ed6\u4efb\u52a1 while True: pass \u5b9e\u9a8c\u4e09\uff1a\u5bf9\u5b9e\u9a8c\u4e8c\u7a0b\u5e8f\u8fdb\u884c\u7b80\u5316 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin,ADC,PWM import time # \u521d\u59cb\u5316\u5f15\u811a encoder = ADC(Pin(32)) # \u65cb\u94ae\u63a532\u53f7\u5f15\u811a # \u5c06ADC\u8870\u51cf\u91cf\u8bbe\u7f6e\u4e3a11DB\uff0c\u8f6c\u6362\u62100~3.6v\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b encoder.atten(ADC.ATTN_11DB) motor_a = PWM(Pin(17), freq=1000) # \u7535\u673a\u5f15\u811aA motor_b = PWM(Pin(16), freq=1000) # \u7535\u673a\u5f15\u811aB value = 0 # \u521d\u59cb\u503c\u4e3a0 speed = 0 # \u521d\u59cb\u901f\u5ea6\u4e3a0 # \u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min while True: value = encoder.read() # \u503c\u7684\u8303\u56f4\u4e3a0~4095 speed = int(math_map(value,0,4095,0,1023)) print(speed) motor_a.duty(speed) motor_b.duty(0)","title":"12.\u5b9a\u65f6\u5668\u4e2d\u65ad"},{"location":"MicroPython/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/#_1","text":"","title":"\u5b9a\u65f6\u5668\u4e2d\u65ad"},{"location":"MicroPython/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 4 4 PH2.0\u53cc\u5934\u7ebf 4 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 LED\u706f 4 3 LED\u706f 12 4 LED\u706f 13 \u5b9a\u65f6\u5668\u7684\u7c7b\u548c\u51fd\u6570\u8bb2\u89e3 ESP32\u5355\u7247\u673a\u5b9a\u65f6\u5668\u7684\u529f\u80fd\u5728\u8bbe\u5b9a\u7684\u65f6\u95f4\u540e\u53d1\u751f\u4e2d\u65ad\uff0c\u89e6\u53d1\u6267\u884c\u6307\u5b9a\u7684\u7a0b\u5e8f\uff0c\u5b9a\u65f6\u5668\u4f7f\u7528machine\u6a21\u5757\u4e2dTimer\u7c7b\u53ca\u5176\u5185\u90e8\u51fd\u6570\uff1a \u6784\u9020\u5b9a\u65f6\u5668\u5bf9\u8c61 \u5728\u4f7f\u7528\u5b9a\u65f6\u5668\u524d\uff0c\u5148\u8981\u901a\u8fc7Timer\u7c7b\u6784\u4ef6\u5b9a\u65f6\u5668\u5bf9\u8c61\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a machine.Timer(id) *id* \u4e3a\u5b9a\u65f6\u5668\u7684\u7f16\u53f7\uff0c\u7f16\u53f7\u4e3a0~3\uff0c\u76ee\u524dESP32\u4ec5\u652f\u6301\u540c\u65f64\u4e2a\u5b9a\u5236\u5668\uff0c\u5f53\u7f16\u53f7\u5927\u4e8e3\u65f6\uff0c\u4f1a\u5bf9\u7f16\u53f7\u8fdb\u884c\u53d6\u4f59\uff0c\u5e76\u8986\u76d6\u4e4b\u524d\u76f8\u540c\u7f16\u53f7\u7684\u5b9a\u65f6\u5668\u3002 \u5b9a\u65f6\u5668\u7684\u51fd\u6570\u4f53 \u5b9a\u65f6\u5668\u5bf9\u8c61.init(period, mode,callvback) \u53c2\u6570 \u7c7b\u578b \u5fc5\u586b \u8bf4\u660e \u200c id \u200c int \u2713 \u5b9a\u65f6\u5668\u7f16\u53f7\uff08\u4e0d\u540c\u786c\u4ef6\u652f\u6301\u8303\u56f4\u4e0d\u540c\uff0c\u901a\u5e38\u4ece0\u5f00\u59cb\uff09 \u200c mode \u200c Timer.\u5e38\u91cf \u2715 \u5b9a\u65f6\u5668\u6a21\u5f0f\uff1a PERIODIC \uff08\u5468\u671f\uff09\u6216 ONE_SHOT \uff08\u5355\u6b21\uff09\uff0c\u9ed8\u8ba4\u5468\u671f \u200c period \u200c int \u2715 \u5468\u671f\u65f6\u957f\uff08\u6beb\u79d2\uff09 \u200c callback \u200c function \u2715 \u4e2d\u65ad\u56de\u8c03\u51fd\u6570\uff0c\u683c\u5f0f\uff1a callback(timer)","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/#1led","text":"\u793a\u4f8b\uff1a from machine import Timer, Pin import time led = Pin(2, Pin.OUT) # ESP32 \u677f\u8f7d LED\uff08GPIO2\uff09 # \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 def toggle_led(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.5\u79d2\u4e00\u6b21\") led.value(not led.value()) # \u7ffb\u8f6c LED \u72b6\u6001 # \u521d\u59cb\u5316\u5b9a\u65f6\u5668\uff08\u5468\u671f 500ms\uff09 tim = Timer(0) tim.init(period=500, mode=Timer.PERIODIC, callback=toggle_led) # \u4e3b\u5faa\u73af\u53ef\u6267\u884c\u5176\u4ed6\u4efb\u52a1 while True: print(\"1\u79d2\u4e00\u6b21\") time.sleep(1)","title":"\u5b9e\u9a8c\u4e00\uff1a\u4f7f\u7528\u4e2d\u65ad\u5b9e\u73b01\u4e2aLED\u706f\u7684\u95ea\u70c1"},{"location":"MicroPython/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/#4led","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Timer, Pin import time led1 = Pin(2, Pin.OUT) led2 = Pin(4, Pin.OUT) led3 = Pin(12, Pin.OUT) led4 = Pin(13, Pin.OUT) # \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 def toggle_led1(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.25\u79d2\u4e00\u6b21\") led1.value(not led1.value()) # \u7ffb\u8f6c LED \u72b6\u6001 def toggle_led2(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.5\u79d2\u4e00\u6b21\") led2.value(not led2.value()) # \u7ffb\u8f6c LED \u72b6\u6001 def toggle_led3(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56680.75\u79d2\u4e00\u6b21\") led3.value(not led3.value()) # \u7ffb\u8f6c LED \u72b6\u6001 def toggle_led4(timer): print(\"\u89e6\u53d1\u5b9a\u65f6\u56681\u79d2\u4e00\u6b21\") led4.value(not led4.value()) # \u7ffb\u8f6c LED \u72b6\u6001 # \u521d\u59cb\u5316\u5b9a\u65f6\u5668\uff08\u5468\u671f 500ms\uff09 tim1 = Timer(0) tim1.init(period=250, mode=Timer.PERIODIC, callback=toggle_led1) tim2 = Timer(1) tim2.init(period=500, mode=Timer.PERIODIC, callback=toggle_led2) tim3 = Timer(2) tim3.init(period=750, mode=Timer.PERIODIC, callback=toggle_led3) tim4 = Timer(3) tim4.init(period=1000, mode=Timer.PERIODIC, callback=toggle_led4) # \u4e3b\u5faa\u73af\u53ef\u6267\u884c\u5176\u4ed6\u4efb\u52a1 while True: pass","title":"\u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u5b9a\u65f6\u5668\u5b9e\u73b04\u76cfLED\u706f\u7684\u4e0d\u540c\u9891\u7387\u7684\u95ea\u70c1"},{"location":"MicroPython/%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin,ADC,PWM import time # \u521d\u59cb\u5316\u5f15\u811a encoder = ADC(Pin(32)) # \u65cb\u94ae\u63a532\u53f7\u5f15\u811a # \u5c06ADC\u8870\u51cf\u91cf\u8bbe\u7f6e\u4e3a11DB\uff0c\u8f6c\u6362\u62100~3.6v\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b encoder.atten(ADC.ATTN_11DB) motor_a = PWM(Pin(17), freq=1000) # \u7535\u673a\u5f15\u811aA motor_b = PWM(Pin(16), freq=1000) # \u7535\u673a\u5f15\u811aB value = 0 # \u521d\u59cb\u503c\u4e3a0 speed = 0 # \u521d\u59cb\u901f\u5ea6\u4e3a0 # \u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min while True: value = encoder.read() # \u503c\u7684\u8303\u56f4\u4e3a0~4095 speed = int(math_map(value,0,4095,0,1023)) print(speed) motor_a.duty(speed) motor_b.duty(0)","title":"\u5b9e\u9a8c\u4e09\uff1a\u5bf9\u5b9e\u9a8c\u4e8c\u7a0b\u5e8f\u8fdb\u884c\u7b80\u5316"},{"location":"MicroPython/%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E6%A8%A1%E5%9D%97/","text":"\u5b9e\u65f6\u65f6\u949f\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 1 4 OLED\u663e\u793a\u5c4f 1 5 PH2.0\u6570\u636e\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 OLED\u6db2\u6676\u663e\u793a\u5c4f-SCL 16 2 OLED\u6db2\u6676\u663e\u793a\u5c4f-SDA 17 3 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 - SCL 22 4 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 - SDA 22 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 DS1307\u65f6\u949f\u6a21\u5757\u662f\u4e00\u6b3e\u4f4e\u529f\u8017\uff0c\u5177\u670956\u5b57\u8282\u975e\u5931\u6027RAM\u7684\u5168BCD\u7801\u65f6\u949f\u65e5\u5386\u5b9e\u65f6\u65f6\u949f\u82af\u7247\uff0c\u5730\u5740\u548c\u6570\u636e\u901a\u8fc7\u4e24\u7ebf\u53cc\u5411\u7684\u4e32\u884c\u603b\u7ebf\u7684\u4f20\u8f93\uff0c\u82af\u7247\u53ef\u4ee5\u63d0\u4f9b\u79d2\uff0c\u5206\uff0c\u5c0f\u65f6\u7b49\u4fe1\u606f\uff0c\u6bcf\u4e00\u4e2a\u6708\u7684\u5929\u6570\u80fd\u81ea\u52a8\u8c03\u6574\u3002AM/PM \u6807\u5fd7\u4f4d\u51b3\u5b9a\u65f6\u949f\u5de5\u4f5c\u4e8e24\u5c0f\u65f6\u621612\u5c0f\u65f6\u6a21\u5f0f\uff0c\u82af\u7247\u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u7535\u6e90\u611f\u5e94\u7535\u8def\uff0c\u5177\u6709\u6389\u7535\u68c0\u6d4b\u548c\u7535\u6c60\u5207\u6362\u529f\u80fd\u3002DS1307\u65f6\u949f\u6a21\u5757\u662f\u4e00\u4e2a\u96c6\u6210\u4e86\u6570\u5b57\u65f6\u949f\u7684\u4f20\u611f\u5668\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u53bb\u7f16\u5199\u7a0b\u5e8f\uff0c\u505a\u6210\u4e00\u4e2a\u7535\u5b50\u65f6\u949f\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2ads1307.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import I2C, Pin import utime class DS1307: def __init__(self, i2c_bus=0, sda_pin=21, scl_pin=22): self.i2c = I2C(i2c_bus, sda=Pin(sda_pin), scl=Pin(scl_pin)) self.address = 0x68 # DS1307\u9ed8\u8ba4I2C\u5730\u5740 def _bcd_to_dec(self, bcd): return (bcd // 16) * 10 + (bcd % 16) def _dec_to_bcd(self, dec): return (dec // 10) * 16 + (dec % 10) def set_time(self, year, month, day, hour, minute, second, weekday=0): data = bytearray(7) data[0] = self._dec_to_bcd(second) & 0x7F # \u79d2\uff08\u6700\u9ad8\u4f4d\u4e3a\u65f6\u949f\u505c\u6b62\u4f4d\uff09 data[1] = self._dec_to_bcd(minute) data[2] = self._dec_to_bcd(hour) # 24\u5c0f\u65f6\u5236 data[3] = self._dec_to_bcd(weekday + 1) # DS1307\u7684\u661f\u671f\u8303\u56f41-7 data[4] = self._dec_to_bcd(day) data[5] = self._dec_to_bcd(month) data[6] = self._dec_to_bcd(year - 2000) # \u5e74\u4efd\u504f\u79fb\u91cf self.i2c.writeto_mem(self.address, 0x00, data) def get_time(self): data = self.i2c.readfrom_mem(self.address, 0x00, 7) return { 'year': self._bcd_to_dec(data[6]) + 2000, 'month': self._bcd_to_dec(data[5]), 'day': self._bcd_to_dec(data[4]), 'weekday': self._bcd_to_dec(data[3]) - 1, 'hour': self._bcd_to_dec(data[2] & 0x3F), # \u5c4f\u853d24/12\u5c0f\u65f6\u6807\u5fd7\u4f4d 'minute': self._bcd_to_dec(data[1]), 'second': self._bcd_to_dec(data[0] & 0x7F) # \u5c4f\u853d\u65f6\u949f\u505c\u6b62\u4f4d } def enable_oscillator(self, enable=True): \"\"\"\u63a7\u5236\u65f6\u949f\u632f\u8361\u5668\u542f\u505c\"\"\" second_reg = self.i2c.readfrom_mem(self.address, 0x00, 1)[0] second_reg = second_reg & 0x7F if enable else second_reg | 0x80 self.i2c.writeto_mem(self.address, 0x00, bytearray([second_reg])) \u5b9e\u9a8c\u4e00\uff1a\u5728OLED\u6db2\u6676\u5c4f\u73b0\u5b9e\u5b9e\u65f6 \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c1\u3001\u5b9e\u65f6\u663e\u793a\u65f6\u95f4 \u5728OLED\u4e0a\u5b9e\u65f6\u663e\u793a\u65f6\u95f4 ''' # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, RTC, I2C import utime from libs.ds1307 import DS1307 from libs.ssd1306 import SSD1306_I2C import time # ==========\u521d\u59cb\u5316OLED\u5bf9\u8c61================= i2c = I2C(0, scl=Pin(16), sda=Pin(17), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 # ==========\u521d\u59cb\u5316DS1307\u5b9e\u65f6\u65f6\u949f\u6a21\u5757================= rtc = DS1307(i2c_bus=1, sda_pin=21, scl_pin=22) # =======\u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4====== rtc1 =RTC() datetime = rtc1.datetime() print(datetime) #=======\u521d\u59cb\u5316\u65f6\u95f4\u8bbe\u7f6e\uff08\u4ece\u672c\u5730RTC\u4e2d\u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4\uff09=== rtc.set_time(datetime[0],datetime[1],datetime[2], datetime[4], datetime[5], datetime[6], datetime[3]) while True : current = rtc.get_time() print(current) weekday =f\"{['Mon','Tue','Wed','Thu','Fri','Sat','Sun'][current['weekday']]}\" str1 = f\"{current['year']}-{current['month']:02d}-{current['day']:02d}\" my_time = f\"{current['hour']:02d}:{current['minute']:02d}:{current['second']:02d}\" oled.text(str1, 0, 24) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6587\u672c oled.text(weekday, 96, 24) oled.text(my_time, 0, 40) oled.show() time.sleep(1) oled.fill(0)","title":"47.\u5b9e\u65f6\u65f6\u949f\u6a21\u5757"},{"location":"MicroPython/%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u5b9e\u65f6\u65f6\u949f\u6a21\u5757"},{"location":"MicroPython/%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E6%A8%A1%E5%9D%97/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 1 4 OLED\u663e\u793a\u5c4f 1 5 PH2.0\u6570\u636e\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 OLED\u6db2\u6676\u663e\u793a\u5c4f-SCL 16 2 OLED\u6db2\u6676\u663e\u793a\u5c4f-SDA 17 3 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 - SCL 22 4 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 - SDA 22 \u5b9e\u65f6\u65f6\u949f\u6a21\u5757 DS1307\u65f6\u949f\u6a21\u5757\u662f\u4e00\u6b3e\u4f4e\u529f\u8017\uff0c\u5177\u670956\u5b57\u8282\u975e\u5931\u6027RAM\u7684\u5168BCD\u7801\u65f6\u949f\u65e5\u5386\u5b9e\u65f6\u65f6\u949f\u82af\u7247\uff0c\u5730\u5740\u548c\u6570\u636e\u901a\u8fc7\u4e24\u7ebf\u53cc\u5411\u7684\u4e32\u884c\u603b\u7ebf\u7684\u4f20\u8f93\uff0c\u82af\u7247\u53ef\u4ee5\u63d0\u4f9b\u79d2\uff0c\u5206\uff0c\u5c0f\u65f6\u7b49\u4fe1\u606f\uff0c\u6bcf\u4e00\u4e2a\u6708\u7684\u5929\u6570\u80fd\u81ea\u52a8\u8c03\u6574\u3002AM/PM \u6807\u5fd7\u4f4d\u51b3\u5b9a\u65f6\u949f\u5de5\u4f5c\u4e8e24\u5c0f\u65f6\u621612\u5c0f\u65f6\u6a21\u5f0f\uff0c\u82af\u7247\u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u7535\u6e90\u611f\u5e94\u7535\u8def\uff0c\u5177\u6709\u6389\u7535\u68c0\u6d4b\u548c\u7535\u6c60\u5207\u6362\u529f\u80fd\u3002DS1307\u65f6\u949f\u6a21\u5757\u662f\u4e00\u4e2a\u96c6\u6210\u4e86\u6570\u5b57\u65f6\u949f\u7684\u4f20\u611f\u5668\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u53bb\u7f16\u5199\u7a0b\u5e8f\uff0c\u505a\u6210\u4e00\u4e2a\u7535\u5b50\u65f6\u949f\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2ads1307.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import I2C, Pin import utime class DS1307: def __init__(self, i2c_bus=0, sda_pin=21, scl_pin=22): self.i2c = I2C(i2c_bus, sda=Pin(sda_pin), scl=Pin(scl_pin)) self.address = 0x68 # DS1307\u9ed8\u8ba4I2C\u5730\u5740 def _bcd_to_dec(self, bcd): return (bcd // 16) * 10 + (bcd % 16) def _dec_to_bcd(self, dec): return (dec // 10) * 16 + (dec % 10) def set_time(self, year, month, day, hour, minute, second, weekday=0): data = bytearray(7) data[0] = self._dec_to_bcd(second) & 0x7F # \u79d2\uff08\u6700\u9ad8\u4f4d\u4e3a\u65f6\u949f\u505c\u6b62\u4f4d\uff09 data[1] = self._dec_to_bcd(minute) data[2] = self._dec_to_bcd(hour) # 24\u5c0f\u65f6\u5236 data[3] = self._dec_to_bcd(weekday + 1) # DS1307\u7684\u661f\u671f\u8303\u56f41-7 data[4] = self._dec_to_bcd(day) data[5] = self._dec_to_bcd(month) data[6] = self._dec_to_bcd(year - 2000) # \u5e74\u4efd\u504f\u79fb\u91cf self.i2c.writeto_mem(self.address, 0x00, data) def get_time(self): data = self.i2c.readfrom_mem(self.address, 0x00, 7) return { 'year': self._bcd_to_dec(data[6]) + 2000, 'month': self._bcd_to_dec(data[5]), 'day': self._bcd_to_dec(data[4]), 'weekday': self._bcd_to_dec(data[3]) - 1, 'hour': self._bcd_to_dec(data[2] & 0x3F), # \u5c4f\u853d24/12\u5c0f\u65f6\u6807\u5fd7\u4f4d 'minute': self._bcd_to_dec(data[1]), 'second': self._bcd_to_dec(data[0] & 0x7F) # \u5c4f\u853d\u65f6\u949f\u505c\u6b62\u4f4d } def enable_oscillator(self, enable=True): \"\"\"\u63a7\u5236\u65f6\u949f\u632f\u8361\u5668\u542f\u505c\"\"\" second_reg = self.i2c.readfrom_mem(self.address, 0x00, 1)[0] second_reg = second_reg & 0x7F if enable else second_reg | 0x80 self.i2c.writeto_mem(self.address, 0x00, bytearray([second_reg]))","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E6%A8%A1%E5%9D%97/#oled","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c1\u3001\u5b9e\u65f6\u663e\u793a\u65f6\u95f4 \u5728OLED\u4e0a\u5b9e\u65f6\u663e\u793a\u65f6\u95f4 ''' # \u5bfc\u5165\u5e93\u6587\u4ef6 from machine import Pin, RTC, I2C import utime from libs.ds1307 import DS1307 from libs.ssd1306 import SSD1306_I2C import time # ==========\u521d\u59cb\u5316OLED\u5bf9\u8c61================= i2c = I2C(0, scl=Pin(16), sda=Pin(17), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 # ==========\u521d\u59cb\u5316DS1307\u5b9e\u65f6\u65f6\u949f\u6a21\u5757================= rtc = DS1307(i2c_bus=1, sda_pin=21, scl_pin=22) # =======\u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4====== rtc1 =RTC() datetime = rtc1.datetime() print(datetime) #=======\u521d\u59cb\u5316\u65f6\u95f4\u8bbe\u7f6e\uff08\u4ece\u672c\u5730RTC\u4e2d\u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4\uff09=== rtc.set_time(datetime[0],datetime[1],datetime[2], datetime[4], datetime[5], datetime[6], datetime[3]) while True : current = rtc.get_time() print(current) weekday =f\"{['Mon','Tue','Wed','Thu','Fri','Sat','Sun'][current['weekday']]}\" str1 = f\"{current['year']}-{current['month']:02d}-{current['day']:02d}\" my_time = f\"{current['hour']:02d}:{current['minute']:02d}:{current['second']:02d}\" oled.text(str1, 0, 24) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6587\u672c oled.text(weekday, 96, 24) oled.text(my_time, 0, 40) oled.show() time.sleep(1) oled.fill(0)","title":"\u5b9e\u9a8c\u4e00\uff1a\u5728OLED\u6db2\u6676\u5c4f\u73b0\u5b9e\u5b9e\u65f6"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/","text":"\u6309\u952e\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 180\u00b0\u8235\u673a 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6309\u952e 2 2 LED\u706f 4 \u6309\u952e\u6a21\u5757\u4ecb\u7ecd \u6309\u952e\u6a21\u5757\u662f\u7535\u5b50\u7cfb\u7edf\u4e2d\u7528\u4e8e\u5b9e\u73b0\u4eba\u673a\u4ea4\u4e92\u7684\u57fa\u7840\u8f93\u5165\u7ec4\u4ef6\uff0c\u7528\u4e8e\u68c0\u6d4b\u7528\u6237\u6309\u538b\u52a8\u4f5c\u5e76\u5c06\u673a\u68b0\u4fe1\u53f7\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7\u3002 \u5b9e\u9a8c\u4e00\uff1a\u6309\u952e\u63a7\u5236LED\u706f\u7684\u4eae\u706d \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u6309\u952e\u6309\u4e0b\u706f\u4eae\uff0c\u677e\u5f00\u706f\u706d \u6309\u952e\u6a21\u5757GPIO 2\u53f7\u5f15\u811a LED\u6a21\u5757 GPIO 4\u53f7\u5f15\u811a ''' from machine import Pin import time led = Pin(4, Pin.OUT) # LED\u706f\u63a5 GPIO 4 button = Pin(2, Pin.IN) # \u6309\u952e\u63a5 GPIO 2 while True: # \u6d4b\u8bd5\u6309\u952e\u7684\u8fd4\u56de\u503c print(button.value()) time.sleep(0.1) # \u9ed8\u8ba4\u72b6\u6001\u4e3a\uff1a1 \u6309\u4e0b\u503c\u4e3a\uff1a0 if not button.value(): # \u6309\u952e\u53d1\u4e0b\u65f6 time.sleep_ms(10) # \u6309\u952e\u9632\u6296 led.value(1) # \u6309\u952e\u6309\u4e0b\u540e\uff0c\u706f\u4eae else : led.value(0) # \u6309\u952e\u677e\u5f00\u540e\uff0c\u706f\u706d \u5b9e\u9a8c\u4e8c\uff1a\u6bcf\u6309\u4e00\u6b21\u6309\u952eLED\u706f\u72b6\u6001\u6539\u53d8\u4e00\u6b21 \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u6309\u952e\u63a7\u5236LED\u706f\uff0c\u6bcf\u6309\u4e00\u6b21LED\u706f\u6539\u53d8 \u6b21\u6309\u952e\u6a21\u5757GPIO 2\u53f7\u5f15\u811a LED\u6a21\u5757 GPIO 4\u53f7\u5f15\u811aIO4 ''' from machine import Pin import time led = Pin(4, Pin.OUT) # LED\u706f\u63a5 GPIO 4 button = Pin(2, Pin.IN) # \u6309\u952e\u63a5 GPIO 2 num = True # \u63a7\u5236\u706f\u4eae\u706d\u7684\u903b\u8f91 while True : if not button.value(): # \u6309\u952e\u53d1\u4e0b\u65f6 time.sleep_ms(10) # \u6309\u952e\u9632\u6296 while button.value() == 0: # \u6309\u952e\u6309\u4e0b\u672a\u91ca\u653e pass num = not num # \u68c0\u6d4b\u5230\u6309\u952e\u52a8\u4f5c\u540e\uff0c\u706f\u4eae\u6a21\u5f0f\u53d1\u751f\u6539\u53d8 if num: led.value(1) # \u6309\u952e\u6309\u4e0b\u540e\uff0c\u706f\u4eae else : led.value(0) # \u6309\u952e\u677e\u5f00\u540e\uff0c\u706f\u706d \u5b9e\u9a8c\u4e09\uff1a\u901a\u8fc7\u5916\u90e8\u4e2d\u65ad\u5b9e\u73b0\u6309\u952e\u63a7\u5236LED\u706f \u4ec0\u4e48\u662f\u4e2d\u65ad \u5f53\u5355\u7247\u673a\u6b63\u5728\u6267\u884c\u67d0\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u5982\u679c\u7a81\u7136\u51fa\u73b0\u610f\u5916\u60c5\u51b5\u9700\u8981\u505c\u6b62\u5f53\u524d\u7684\u5de5\u4f5c\u53bb\u6267\u884c\u5176\u4ed6\u6307\u5b9a\u7684\u7a0b\u5e8f\uff08\u4e2d\u65ad\u7a0b\u5e8f\u6216\u4e2d\u65ad\u51fd\u6570\uff09\uff0c\u6267\u884c\u5b8c\u6210\u540e\uff0c\u518d\u56de\u6765\u7ee7\u7eed\u6267\u884c\u539f\u6765\u7684\u7a0b\u5e8f\uff0c\u8fd9\u5c31\u53eb\u4e2d\u65ad\u3002 \u4e2d\u65ad\u51fd\u6570 ESP32\u4f7f\u7528\u4e86Pin\u7c7b\u4e2d Pin.irq() \u51fd\u6570\u6765\u5b9e\u73b0\u5916\u90e8\u4e2d\u65ad\u7a0b\u5e8f\uff1a pin.irq(handler=None, trigger=(Pin.IRQ_FALLING | Pin.IRQ_RISING)) \u53c2\u6570\u540d \u8bf4\u660e \u53ef\u9009\u503c/\u793a\u4f8b \u6ce8\u610f\u4e8b\u9879 handler \u4e2d\u65ad\u5904\u7406\u51fd\u6570 def isr(pin): ... \u5e94\u4fdd\u6301\u7b80\u77ed\uff0c\u907f\u514d\u963b\u585e\u64cd\u4f5c trigger \u89e6\u53d1\u6761\u4ef6 Pin.IRQ_FALLING \uff08\u4e0b\u964d\u6cbf\uff09 Pin.IRQ_RISING \uff08\u4e0a\u5347\u6cbf\uff09 \u7ec4\u5408\u4f7f\u7528 \\| \u8fd0\u7b97\u7b26 \u7535\u5e73\u89e6\u53d1\u6a21\u5f0f\uff08LOW/HIGH\uff09\u53ef\u80fd\u5bfc\u81f4\u6301\u7eed\u4e2d\u65ad \u89e6\u53d1\u7c7b\u578b\u5bf9\u7167\u8868 \u89e6\u53d1\u7c7b\u578b\u5e38\u91cf \u89e6\u53d1\u6761\u4ef6\u63cf\u8ff0 \u9002\u7528\u573a\u666f Pin.IRQ_FALLING \u4e0b\u964d\u6cbf\u89e6\u53d1\uff08\u9ad8\u7535\u5e73\u2192\u4f4e\u7535\u5e73\uff09 \u5e38\u89c4\u6309\u952e\u68c0\u6d4b Pin.IRQ_RISING \u4e0a\u5347\u6cbf\u89e6\u53d1\uff08\u4f4e\u7535\u5e73\u2192\u9ad8\u7535\u5e73\uff09 \u91ca\u653e\u68c0\u6d4b Pin.IRQ_LOW_LEVEL \u4f4e\u7535\u5e73\u6301\u7eed\u89e6\u53d1 \u957f\u6309\u68c0\u6d4b Pin.IRQ_HIGH_LEVEL \u9ad8\u7535\u5e73\u6301\u7eed\u89e6\u53d1 \u7279\u6b8a\u4f20\u611f\u5668\u4fe1\u53f7 IRQ_FALLING\u4e28IRQ_RISING \u53cc\u8fb9\u6cbf\u89e6\u53d1 \u9700\u8981\u540c\u65f6\u68c0\u6d4b\u6309\u4e0b/\u91ca\u653e\u7684\u573a\u666f \u5982\u4f55\u5224\u65ad\u662f\u4e0a\u62c9\u8fd8\u662f\u4e0b\u62c9 Pin.PULL_UP \u9009\u62e9\u4e0a\u62c9\uff1a\u5f53\u9700\u8981\u5f15\u811a\u60ac\u7a7a\u65f6\u4fdd\u6301\u200c \u9ad8\u7535\u5e73\uff08\u5982\u6309\u952e\u672a\u6309\u4e0b\u72b6\u6001\uff09 Pin.PULL_DOWN \u9009\u62e9\u4e0b\u62c9\uff1a\u5f53\u9700\u8981\u5f15\u811a\u60ac\u7a7a\u65f6\u4fdd\u6301\u200c \u4f4e\u7535\u5e73\uff08\u5982\u4f20\u611f\u5668\u672a\u89e6\u53d1\u72b6\u6001\uff09 \u6211\u4eec\u901a\u8fc7\u4e00\u4e0b\u7a0b\u5e8f\u67e5\u770b\u6309\u952e\u7684\u7535\u4f4d\u53d8\u5316\u6765\u5224\u65ad: from machine import Pin import time button = Pin(2, Pin.IN) # \u5f00\u5173\u94fe\u63a52\u53f7\u5f15\u811a while True : print(button.value()) time.sleep(0.5) \u8fd0\u884c\u7ed3\u679c\uff1a \u7531\u6b64\u53ef\u4ee5\u5224\u65ad\u6b64\u6309\u952e\u6309\u4e0b\u65f6\u4e3a\u4e0a\u62c9\uff0c\u677e\u5f00\u4e3a\u4e0b\u62c9\uff1a \u5b9e\u9a8c\u4e09\uff0c\u677e\u5f00\u6309\u94ae\u662f\u6539\u53d8LED\u706f\u72b6\u6001 \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u677e\u5f00\u6309\u94ae\u662f\u89e6\u53d1\u4e2d\u65ad\u7a0b\u5e8f ''' import time from machine import Pin # \u6211\u7684\u6309\u94ae\u9ed8\u8ba4\u662f\u9ad8\u7535\u9891\uff0c\u6240\u4ee5\u4f7f\u7528Pin.PULL_UP button = Pin(2, Pin.IN, Pin.PULL_UP) led = Pin(4, Pin.OUT) led.value(0) # \u9ed8\u8ba4\u6211\u706f\u706d\u72b6\u6001 #\u5b9a\u4e49 button \u7684\u5916\u90e8\u4e2d\u65ad\u51fd\u6570 def button_irq(button): time.sleep_ms(80) if button.value() == 1: # \u6ce8\u610f\u6b64\u65f6\u677e\u5f00\u65f6\u5019\u503c\u4e3a1 led.value(not led.value()) # \u677e\u5f00\u6309\u952e\u662f\u8ba9\u7535\u9891\u4ece\u4f4e\u81f3\u9ad8\uff0c\u6240\u4ee5\u662f\u4e0a\u5347\u6cbf button.irq(button_irq, Pin.IRQ_RISING) \u5b9e\u9a8c\u56db\uff1a\u6309\u4e0b\u6309\u94ae\u65f6\u6539\u53d8LED\u706f\u7684\u72b6\u6001 \u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u6309\u4e0b\u6309\u94ae\u65f6\u6539\u53d8LED\u706f\u72b6\u6001 ''' import time from machine import Pin # \u6211\u7684\u6309\u94ae\u9ed8\u8ba4\u662f\u9ad8\u7535\u9891\uff0c\u6240\u4ee5\u4f7f\u7528Pin.PULL_UP buton = Pin(2, Pin.IN, Pin.PULL_UP) led = Pin(12, Pin.OUT) led.value(0) def button_irq(button): time.sleep_ms(80) if button.value() == 0: # \u6ce8\u610f\u6309\u4e0b\u65f6\u5019\u503c\u4e3a0 led.value(not led.value()) button.irq(button_irq, Pin # a\u4e0b\u6309\u94ae\u662f\u8ba9\u7535\u9891\u4ece\u9ad8\u81f3\u4f4e\uff0c\u6240\u4ee5\u662f\u4e0b\u964d\u6cbf.IRQ_FALLING) # \u6309 \u6ce8 \u610f ESP32\u4e0d\u652f\u6301\u540c\u65f6\u4e2d\u65ad\u5d4c\u5957\uff0c\u591a\u4e2a\u4e2d\u65ad\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u6267\u884c\u903b\u8f91\uff0cESP32\u4e0d\u652f\u6301\u4e2d\u65ad\u4f18\u5148\uff01 \u5b9e\u9a8c\u4e94\uff1a\u4e24\u4e2a\u6309\u952e\u63a7\u5236LED\u706f \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6309\u952e 2 4 LED\u706f 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6309\u952e1 2 2 \u6309\u952e2 4 3 LED\u706f1 12 4 LED\u706f1 13 5 LED\u706f1 14 \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u4e24\u4e2a\u6309\u952e\u63a7\u5236LED\u706f\u6548\u679c ''' from machine import Pin import time k1 = Pin(2, Pin.IN, Pin.PULL_UP) k2 = Pin(4, Pin.IN, Pin.PULL_UP) led1 = Pin(12, Pin.OUT) led2 = Pin(13, Pin.OUT) led3 = Pin(14, Pin.OUT) led1_state, led2_state, led3_state = 0, 0, 0 def k1_irq(K1): global led1_state time.sleep_ms(10) if k1.value() == 0: led1_state = not led1_state led1.value(led1_state) def k2_irq(K2): global led2_state time.sleep_ms(10) if k2.value() == 0: led2_state = not led2_state led2.value(led2_state) if __name__ == \"__main__\": led1.value(0) led2.value(0) k1.irq(k1_irq, Pin.IRQ_FALLING) k2.irq(k2_irq, Pin.IRQ_FALLING) while True : led3.value(0) time.sleep(0.5) led3.value(1) time.sleep(0.5) --- \u5b9e\u9a8c\u516d\uff1a4P\u6309\u952e\u63a7\u52364\u76cfLED\u706f \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 4P\u6309\u952e 1 4 LED\u706f 4 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 4P\u6309\u952e 34 2 4P\u6309\u952e 35 3 4P\u6309\u952e 36 4 4P\u6309\u952e 39 5 LED\u706f 2 6 LED\u706f 4 7 LED\u706f 12 8 LED\u706f 13 \u7a0b\u5e8f\u5982\u4e0b\uff1a \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff1a ''' 4P\u6309\u952e\u5206\u522b\u63a7\u52364\u76cfled\u706f ''' from machine import Pin import time # \u521d\u59cb\u5316\u6309\u952e\uff08\u8f93\u5165\u6a21\u5f0f\uff0c\u65e0\u5185\u90e8\u4e0a\u62c9\uff0c\u9700\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff09 buttons = [ Pin(34, Pin.IN), # \u6309\u952e1 -> GPIO34 Pin(35, Pin.IN), # \u6309\u952e2 -> GPIO35 Pin(36, Pin.IN), # \u6309\u952e3 -> GPIO36 Pin(39, Pin.IN) # \u6309\u952e4 -> GPIO39 ] # \u521d\u59cb\u5316LED\uff08\u8f93\u51fa\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u9ad8\u7535\u5e73\u7184\u706d\uff09 leds = [ Pin(2, Pin.OUT), # LED1 -> GPIO2 Pin(4, Pin.OUT), # LED2 -> GPIO4 Pin(12, Pin.OUT), # LED3 -> GPIO12 Pin(13, Pin.OUT) # LED4 -> GPIO13 ] # \u5173\u95ed\u6240\u6709LED\uff08\u53ef\u9009\uff09 for led in leds: led.value(0) # \u4e3b\u5faa\u73af\uff1a\u68c0\u6d4b\u6309\u952e\u5e76\u63a7\u5236LED while True: for i in range(4): # \u6309\u952e\u6309\u4e0b\u65f6\u503c\u4e3a0 if buttons[i].value() == 0: # \u6d88\u6296\u5904\u7406\uff1a\u68c0\u6d4b\u5230\u6309\u4e0b\u540e\u5ef6\u65f6\u518d\u786e\u8ba4 time.sleep_ms(20) if buttons[i].value() == 0: leds[i].value(1) # \u70b9\u4eaeLED\uff08\u9ad8\u7535\u5e73\u6709\u6548\uff09 else: leds[i].value(0) # \u7184\u706dLED time.sleep_ms(50) # \u4e3b\u5faa\u73af\u5ef6\u65f6\uff0c\u964d\u4f4eCPU\u5360\u7528 \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff1a ''' 4P\u6309\u952e\u5206\u522b\u63a7\u52364\u76cfled\u706f\uff08\u6309\u4e00\u6b21\u4eae\uff0c\u518d\u6309\u4e00\u6b21\u706d\uff09 ''' from machine import Pin import time # \u521d\u59cb\u5316\u6309\u952e\uff08\u8f93\u5165\u6a21\u5f0f\uff0c\u65e0\u5185\u90e8\u4e0a\u62c9\uff0c\u9700\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff09 buttons = [ Pin(34, Pin.IN), # \u6309\u952e1 -> GPIO34 Pin(35, Pin.IN), # \u6309\u952e2 -> GPIO35 Pin(36, Pin.IN), # \u6309\u952e3 -> GPIO36 Pin(39, Pin.IN) # \u6309\u952e4 -> GPIO39 ] # \u521d\u59cb\u5316LED\uff08\u8f93\u51fa\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u9ad8\u7535\u5e73\u7184\u706d\uff09 leds = [ Pin(2, Pin.OUT), # LED1 -> GPIO2 Pin(4, Pin.OUT), # LED2 -> GPIO4 Pin(12, Pin.OUT), # LED3 -> GPIO12 Pin(13, Pin.OUT) # LED4 -> GPIO13 ] # \u5173\u95ed\u6240\u6709LED\uff08\u53ef\u9009\uff09 for led in leds: led.value(0) # \u4fdd\u5b58LED\u72b6\u6001 led_states = [False] * 4 while True: for i in range(4): if buttons[i].value() == 0: time.sleep_ms(20) if buttons[i].value() == 0: led_states[i] = not led_states[i] # \u7ffb\u8f6c\u72b6\u6001 if led_states[i] == True : leds[i].value(1) else : leds[i].value(0) # leds[i].value(0 if led_states[i] else 1) # \u4e0a\u9762\u7684\u5224\u65ad\u8bed\u53e5\u53ef\u7b80\u5316\u4e3a\u8fd9\u4e00\u884c while buttons[i].value() == 0: # \u7b49\u5f85\u6309\u952e\u91ca\u653e time.sleep_ms(10) time.sleep_ms(50) \u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a ''' 4P\u6309\u952e\u5206\u522b\u63a7\u52364\u76cfled\u706f\uff0c\u4f7f\u7528\u6309\u952e\u4e2d\u65ad\u7684\u65b9\u5f0f\u5b9e\u73b0\uff08\u6309\u4e00\u6b21\u4eae\uff0c\u518d\u6309\u4e00\u6b21\u706d\uff09 ''' from machine import Pin import time # \u521d\u59cb\u5316\u6309\u952e\uff08\u8f93\u5165\u6a21\u5f0f\uff0c\u65e0\u5185\u90e8\u4e0a\u62c9\uff0c\u9700\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff09 buttons = [ Pin(34, Pin.IN), # \u6309\u952e1 -> GPIO34 Pin(35, Pin.IN), # \u6309\u952e2 -> GPIO35 Pin(36, Pin.IN), # \u6309\u952e3 -> GPIO36 Pin(39, Pin.IN) # \u6309\u952e4 -> GPIO39 ] # \u521d\u59cb\u5316LED\uff08\u8f93\u51fa\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u9ad8\u7535\u5e73\u7184\u706d\uff09 leds = [ Pin(2, Pin.OUT), # LED1 -> GPIO2 Pin(4, Pin.OUT), # LED2 -> GPIO4 Pin(12, Pin.OUT), # LED3 -> GPIO12 Pin(13, Pin.OUT) # LED4 -> GPIO13 ] # \u5173\u95ed\u6240\u6709LED\uff08\u53ef\u9009\uff09 for led in l# \u5b9a\u4e49\u4e2d\u65ad\u56de\u8c03\u51fd\u6570 def toggle_led(pin): for i in range(4): if pin == buttons[i]: leds[i].value(not leds[i].value()) # \u914d\u7f6e\u4e2d\u65ad\uff08\u68c0\u6d4b\u4e0b\u964d\u6cbf\uff09 for button in buttons: button.irq(trigger=Pin.IRQ_FALLING, handler=toggle_led) time.sleep_ms(10) time.sleep_ms(50)","title":"11.\u6309\u952e\u6a21\u5757"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u6309\u952e\u6a21\u5757"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 180\u00b0\u8235\u673a 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6309\u952e 2 2 LED\u706f 4 \u6309\u952e\u6a21\u5757\u4ecb\u7ecd \u6309\u952e\u6a21\u5757\u662f\u7535\u5b50\u7cfb\u7edf\u4e2d\u7528\u4e8e\u5b9e\u73b0\u4eba\u673a\u4ea4\u4e92\u7684\u57fa\u7840\u8f93\u5165\u7ec4\u4ef6\uff0c\u7528\u4e8e\u68c0\u6d4b\u7528\u6237\u6309\u538b\u52a8\u4f5c\u5e76\u5c06\u673a\u68b0\u4fe1\u53f7\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#led","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' \u6309\u952e\u6309\u4e0b\u706f\u4eae\uff0c\u677e\u5f00\u706f\u706d \u6309\u952e\u6a21\u5757GPIO 2\u53f7\u5f15\u811a LED\u6a21\u5757 GPIO 4\u53f7\u5f15\u811a ''' from machine import Pin import time led = Pin(4, Pin.OUT) # LED\u706f\u63a5 GPIO 4 button = Pin(2, Pin.IN) # \u6309\u952e\u63a5 GPIO 2 while True: # \u6d4b\u8bd5\u6309\u952e\u7684\u8fd4\u56de\u503c print(button.value()) time.sleep(0.1) # \u9ed8\u8ba4\u72b6\u6001\u4e3a\uff1a1 \u6309\u4e0b\u503c\u4e3a\uff1a0 if not button.value(): # \u6309\u952e\u53d1\u4e0b\u65f6 time.sleep_ms(10) # \u6309\u952e\u9632\u6296 led.value(1) # \u6309\u952e\u6309\u4e0b\u540e\uff0c\u706f\u4eae else : led.value(0) # \u6309\u952e\u677e\u5f00\u540e\uff0c\u706f\u706d","title":"\u5b9e\u9a8c\u4e00\uff1a\u6309\u952e\u63a7\u5236LED\u706f\u7684\u4eae\u706d"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#led_1","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' \u6309\u952e\u63a7\u5236LED\u706f\uff0c\u6bcf\u6309\u4e00\u6b21LED\u706f\u6539\u53d8 \u6b21\u6309\u952e\u6a21\u5757GPIO 2\u53f7\u5f15\u811a LED\u6a21\u5757 GPIO 4\u53f7\u5f15\u811aIO4 ''' from machine import Pin import time led = Pin(4, Pin.OUT) # LED\u706f\u63a5 GPIO 4 button = Pin(2, Pin.IN) # \u6309\u952e\u63a5 GPIO 2 num = True # \u63a7\u5236\u706f\u4eae\u706d\u7684\u903b\u8f91 while True : if not button.value(): # \u6309\u952e\u53d1\u4e0b\u65f6 time.sleep_ms(10) # \u6309\u952e\u9632\u6296 while button.value() == 0: # \u6309\u952e\u6309\u4e0b\u672a\u91ca\u653e pass num = not num # \u68c0\u6d4b\u5230\u6309\u952e\u52a8\u4f5c\u540e\uff0c\u706f\u4eae\u6a21\u5f0f\u53d1\u751f\u6539\u53d8 if num: led.value(1) # \u6309\u952e\u6309\u4e0b\u540e\uff0c\u706f\u4eae else : led.value(0) # \u6309\u952e\u677e\u5f00\u540e\uff0c\u706f\u706d","title":"\u5b9e\u9a8c\u4e8c\uff1a\u6bcf\u6309\u4e00\u6b21\u6309\u952eLED\u706f\u72b6\u6001\u6539\u53d8\u4e00\u6b21"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#led_2","text":"\u4ec0\u4e48\u662f\u4e2d\u65ad \u5f53\u5355\u7247\u673a\u6b63\u5728\u6267\u884c\u67d0\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u5982\u679c\u7a81\u7136\u51fa\u73b0\u610f\u5916\u60c5\u51b5\u9700\u8981\u505c\u6b62\u5f53\u524d\u7684\u5de5\u4f5c\u53bb\u6267\u884c\u5176\u4ed6\u6307\u5b9a\u7684\u7a0b\u5e8f\uff08\u4e2d\u65ad\u7a0b\u5e8f\u6216\u4e2d\u65ad\u51fd\u6570\uff09\uff0c\u6267\u884c\u5b8c\u6210\u540e\uff0c\u518d\u56de\u6765\u7ee7\u7eed\u6267\u884c\u539f\u6765\u7684\u7a0b\u5e8f\uff0c\u8fd9\u5c31\u53eb\u4e2d\u65ad\u3002 \u4e2d\u65ad\u51fd\u6570 ESP32\u4f7f\u7528\u4e86Pin\u7c7b\u4e2d Pin.irq() \u51fd\u6570\u6765\u5b9e\u73b0\u5916\u90e8\u4e2d\u65ad\u7a0b\u5e8f\uff1a pin.irq(handler=None, trigger=(Pin.IRQ_FALLING | Pin.IRQ_RISING)) \u53c2\u6570\u540d \u8bf4\u660e \u53ef\u9009\u503c/\u793a\u4f8b \u6ce8\u610f\u4e8b\u9879 handler \u4e2d\u65ad\u5904\u7406\u51fd\u6570 def isr(pin): ... \u5e94\u4fdd\u6301\u7b80\u77ed\uff0c\u907f\u514d\u963b\u585e\u64cd\u4f5c trigger \u89e6\u53d1\u6761\u4ef6 Pin.IRQ_FALLING \uff08\u4e0b\u964d\u6cbf\uff09 Pin.IRQ_RISING \uff08\u4e0a\u5347\u6cbf\uff09 \u7ec4\u5408\u4f7f\u7528 \\| \u8fd0\u7b97\u7b26 \u7535\u5e73\u89e6\u53d1\u6a21\u5f0f\uff08LOW/HIGH\uff09\u53ef\u80fd\u5bfc\u81f4\u6301\u7eed\u4e2d\u65ad \u89e6\u53d1\u7c7b\u578b\u5bf9\u7167\u8868 \u89e6\u53d1\u7c7b\u578b\u5e38\u91cf \u89e6\u53d1\u6761\u4ef6\u63cf\u8ff0 \u9002\u7528\u573a\u666f Pin.IRQ_FALLING \u4e0b\u964d\u6cbf\u89e6\u53d1\uff08\u9ad8\u7535\u5e73\u2192\u4f4e\u7535\u5e73\uff09 \u5e38\u89c4\u6309\u952e\u68c0\u6d4b Pin.IRQ_RISING \u4e0a\u5347\u6cbf\u89e6\u53d1\uff08\u4f4e\u7535\u5e73\u2192\u9ad8\u7535\u5e73\uff09 \u91ca\u653e\u68c0\u6d4b Pin.IRQ_LOW_LEVEL \u4f4e\u7535\u5e73\u6301\u7eed\u89e6\u53d1 \u957f\u6309\u68c0\u6d4b Pin.IRQ_HIGH_LEVEL \u9ad8\u7535\u5e73\u6301\u7eed\u89e6\u53d1 \u7279\u6b8a\u4f20\u611f\u5668\u4fe1\u53f7 IRQ_FALLING\u4e28IRQ_RISING \u53cc\u8fb9\u6cbf\u89e6\u53d1 \u9700\u8981\u540c\u65f6\u68c0\u6d4b\u6309\u4e0b/\u91ca\u653e\u7684\u573a\u666f \u5982\u4f55\u5224\u65ad\u662f\u4e0a\u62c9\u8fd8\u662f\u4e0b\u62c9 Pin.PULL_UP \u9009\u62e9\u4e0a\u62c9\uff1a\u5f53\u9700\u8981\u5f15\u811a\u60ac\u7a7a\u65f6\u4fdd\u6301\u200c \u9ad8\u7535\u5e73\uff08\u5982\u6309\u952e\u672a\u6309\u4e0b\u72b6\u6001\uff09 Pin.PULL_DOWN \u9009\u62e9\u4e0b\u62c9\uff1a\u5f53\u9700\u8981\u5f15\u811a\u60ac\u7a7a\u65f6\u4fdd\u6301\u200c \u4f4e\u7535\u5e73\uff08\u5982\u4f20\u611f\u5668\u672a\u89e6\u53d1\u72b6\u6001\uff09 \u6211\u4eec\u901a\u8fc7\u4e00\u4e0b\u7a0b\u5e8f\u67e5\u770b\u6309\u952e\u7684\u7535\u4f4d\u53d8\u5316\u6765\u5224\u65ad: from machine import Pin import time button = Pin(2, Pin.IN) # \u5f00\u5173\u94fe\u63a52\u53f7\u5f15\u811a while True : print(button.value()) time.sleep(0.5) \u8fd0\u884c\u7ed3\u679c\uff1a \u7531\u6b64\u53ef\u4ee5\u5224\u65ad\u6b64\u6309\u952e\u6309\u4e0b\u65f6\u4e3a\u4e0a\u62c9\uff0c\u677e\u5f00\u4e3a\u4e0b\u62c9\uff1a","title":"\u5b9e\u9a8c\u4e09\uff1a\u901a\u8fc7\u5916\u90e8\u4e2d\u65ad\u5b9e\u73b0\u6309\u952e\u63a7\u5236LED\u706f"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#led_3","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u677e\u5f00\u6309\u94ae\u662f\u89e6\u53d1\u4e2d\u65ad\u7a0b\u5e8f ''' import time from machine import Pin # \u6211\u7684\u6309\u94ae\u9ed8\u8ba4\u662f\u9ad8\u7535\u9891\uff0c\u6240\u4ee5\u4f7f\u7528Pin.PULL_UP button = Pin(2, Pin.IN, Pin.PULL_UP) led = Pin(4, Pin.OUT) led.value(0) # \u9ed8\u8ba4\u6211\u706f\u706d\u72b6\u6001 #\u5b9a\u4e49 button \u7684\u5916\u90e8\u4e2d\u65ad\u51fd\u6570 def button_irq(button): time.sleep_ms(80) if button.value() == 1: # \u6ce8\u610f\u6b64\u65f6\u677e\u5f00\u65f6\u5019\u503c\u4e3a1 led.value(not led.value()) # \u677e\u5f00\u6309\u952e\u662f\u8ba9\u7535\u9891\u4ece\u4f4e\u81f3\u9ad8\uff0c\u6240\u4ee5\u662f\u4e0a\u5347\u6cbf button.irq(button_irq, Pin.IRQ_RISING)","title":"\u5b9e\u9a8c\u4e09\uff0c\u677e\u5f00\u6309\u94ae\u662f\u6539\u53d8LED\u706f\u72b6\u6001"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#led_4","text":"\u7a0b\u5e8f\u5982\u4e0b\uff1a ''' \u6309\u4e0b\u6309\u94ae\u65f6\u6539\u53d8LED\u706f\u72b6\u6001 ''' import time from machine import Pin # \u6211\u7684\u6309\u94ae\u9ed8\u8ba4\u662f\u9ad8\u7535\u9891\uff0c\u6240\u4ee5\u4f7f\u7528Pin.PULL_UP buton = Pin(2, Pin.IN, Pin.PULL_UP) led = Pin(12, Pin.OUT) led.value(0) def button_irq(button): time.sleep_ms(80) if button.value() == 0: # \u6ce8\u610f\u6309\u4e0b\u65f6\u5019\u503c\u4e3a0 led.value(not led.value()) button.irq(button_irq, Pin # a\u4e0b\u6309\u94ae\u662f\u8ba9\u7535\u9891\u4ece\u9ad8\u81f3\u4f4e\uff0c\u6240\u4ee5\u662f\u4e0b\u964d\u6cbf.IRQ_FALLING) # \u6309 \u6ce8 \u610f ESP32\u4e0d\u652f\u6301\u540c\u65f6\u4e2d\u65ad\u5d4c\u5957\uff0c\u591a\u4e2a\u4e2d\u65ad\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u6267\u884c\u903b\u8f91\uff0cESP32\u4e0d\u652f\u6301\u4e2d\u65ad\u4f18\u5148\uff01","title":"\u5b9e\u9a8c\u56db\uff1a\u6309\u4e0b\u6309\u94ae\u65f6\u6539\u53d8LED\u706f\u7684\u72b6\u6001"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#led_5","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6309\u952e 2 4 LED\u706f 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6309\u952e1 2 2 \u6309\u952e2 4 3 LED\u706f1 12 4 LED\u706f1 13 5 LED\u706f1 14 \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u4e24\u4e2a\u6309\u952e\u63a7\u5236LED\u706f\u6548\u679c ''' from machine import Pin import time k1 = Pin(2, Pin.IN, Pin.PULL_UP) k2 = Pin(4, Pin.IN, Pin.PULL_UP) led1 = Pin(12, Pin.OUT) led2 = Pin(13, Pin.OUT) led3 = Pin(14, Pin.OUT) led1_state, led2_state, led3_state = 0, 0, 0 def k1_irq(K1): global led1_state time.sleep_ms(10) if k1.value() == 0: led1_state = not led1_state led1.value(led1_state) def k2_irq(K2): global led2_state time.sleep_ms(10) if k2.value() == 0: led2_state = not led2_state led2.value(led2_state) if __name__ == \"__main__\": led1.value(0) led2.value(0) k1.irq(k1_irq, Pin.IRQ_FALLING) k2.irq(k2_irq, Pin.IRQ_FALLING) while True : led3.value(0) time.sleep(0.5) led3.value(1) time.sleep(0.5)","title":"\u5b9e\u9a8c\u4e94\uff1a\u4e24\u4e2a\u6309\u952e\u63a7\u5236LED\u706f"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#-","text":"","title":"---"},{"location":"MicroPython/%E6%8C%89%E9%94%AE%E6%A8%A1%E5%9D%97/#4p4led","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 4P\u6309\u952e 1 4 LED\u706f 4 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 4P\u6309\u952e 34 2 4P\u6309\u952e 35 3 4P\u6309\u952e 36 4 4P\u6309\u952e 39 5 LED\u706f 2 6 LED\u706f 4 7 LED\u706f 12 8 LED\u706f 13 \u7a0b\u5e8f\u5982\u4e0b\uff1a \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff1a ''' 4P\u6309\u952e\u5206\u522b\u63a7\u52364\u76cfled\u706f ''' from machine import Pin import time # \u521d\u59cb\u5316\u6309\u952e\uff08\u8f93\u5165\u6a21\u5f0f\uff0c\u65e0\u5185\u90e8\u4e0a\u62c9\uff0c\u9700\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff09 buttons = [ Pin(34, Pin.IN), # \u6309\u952e1 -> GPIO34 Pin(35, Pin.IN), # \u6309\u952e2 -> GPIO35 Pin(36, Pin.IN), # \u6309\u952e3 -> GPIO36 Pin(39, Pin.IN) # \u6309\u952e4 -> GPIO39 ] # \u521d\u59cb\u5316LED\uff08\u8f93\u51fa\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u9ad8\u7535\u5e73\u7184\u706d\uff09 leds = [ Pin(2, Pin.OUT), # LED1 -> GPIO2 Pin(4, Pin.OUT), # LED2 -> GPIO4 Pin(12, Pin.OUT), # LED3 -> GPIO12 Pin(13, Pin.OUT) # LED4 -> GPIO13 ] # \u5173\u95ed\u6240\u6709LED\uff08\u53ef\u9009\uff09 for led in leds: led.value(0) # \u4e3b\u5faa\u73af\uff1a\u68c0\u6d4b\u6309\u952e\u5e76\u63a7\u5236LED while True: for i in range(4): # \u6309\u952e\u6309\u4e0b\u65f6\u503c\u4e3a0 if buttons[i].value() == 0: # \u6d88\u6296\u5904\u7406\uff1a\u68c0\u6d4b\u5230\u6309\u4e0b\u540e\u5ef6\u65f6\u518d\u786e\u8ba4 time.sleep_ms(20) if buttons[i].value() == 0: leds[i].value(1) # \u70b9\u4eaeLED\uff08\u9ad8\u7535\u5e73\u6709\u6548\uff09 else: leds[i].value(0) # \u7184\u706dLED time.sleep_ms(50) # \u4e3b\u5faa\u73af\u5ef6\u65f6\uff0c\u964d\u4f4eCPU\u5360\u7528 \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff1a ''' 4P\u6309\u952e\u5206\u522b\u63a7\u52364\u76cfled\u706f\uff08\u6309\u4e00\u6b21\u4eae\uff0c\u518d\u6309\u4e00\u6b21\u706d\uff09 ''' from machine import Pin import time # \u521d\u59cb\u5316\u6309\u952e\uff08\u8f93\u5165\u6a21\u5f0f\uff0c\u65e0\u5185\u90e8\u4e0a\u62c9\uff0c\u9700\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff09 buttons = [ Pin(34, Pin.IN), # \u6309\u952e1 -> GPIO34 Pin(35, Pin.IN), # \u6309\u952e2 -> GPIO35 Pin(36, Pin.IN), # \u6309\u952e3 -> GPIO36 Pin(39, Pin.IN) # \u6309\u952e4 -> GPIO39 ] # \u521d\u59cb\u5316LED\uff08\u8f93\u51fa\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u9ad8\u7535\u5e73\u7184\u706d\uff09 leds = [ Pin(2, Pin.OUT), # LED1 -> GPIO2 Pin(4, Pin.OUT), # LED2 -> GPIO4 Pin(12, Pin.OUT), # LED3 -> GPIO12 Pin(13, Pin.OUT) # LED4 -> GPIO13 ] # \u5173\u95ed\u6240\u6709LED\uff08\u53ef\u9009\uff09 for led in leds: led.value(0) # \u4fdd\u5b58LED\u72b6\u6001 led_states = [False] * 4 while True: for i in range(4): if buttons[i].value() == 0: time.sleep_ms(20) if buttons[i].value() == 0: led_states[i] = not led_states[i] # \u7ffb\u8f6c\u72b6\u6001 if led_states[i] == True : leds[i].value(1) else : leds[i].value(0) # leds[i].value(0 if led_states[i] else 1) # \u4e0a\u9762\u7684\u5224\u65ad\u8bed\u53e5\u53ef\u7b80\u5316\u4e3a\u8fd9\u4e00\u884c while buttons[i].value() == 0: # \u7b49\u5f85\u6309\u952e\u91ca\u653e time.sleep_ms(10) time.sleep_ms(50) \u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a ''' 4P\u6309\u952e\u5206\u522b\u63a7\u52364\u76cfled\u706f\uff0c\u4f7f\u7528\u6309\u952e\u4e2d\u65ad\u7684\u65b9\u5f0f\u5b9e\u73b0\uff08\u6309\u4e00\u6b21\u4eae\uff0c\u518d\u6309\u4e00\u6b21\u706d\uff09 ''' from machine import Pin import time # \u521d\u59cb\u5316\u6309\u952e\uff08\u8f93\u5165\u6a21\u5f0f\uff0c\u65e0\u5185\u90e8\u4e0a\u62c9\uff0c\u9700\u5916\u63a5\u4e0a\u62c9\u7535\u963b\uff09 buttons = [ Pin(34, Pin.IN), # \u6309\u952e1 -> GPIO34 Pin(35, Pin.IN), # \u6309\u952e2 -> GPIO35 Pin(36, Pin.IN), # \u6309\u952e3 -> GPIO36 Pin(39, Pin.IN) # \u6309\u952e4 -> GPIO39 ] # \u521d\u59cb\u5316LED\uff08\u8f93\u51fa\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u9ad8\u7535\u5e73\u7184\u706d\uff09 leds = [ Pin(2, Pin.OUT), # LED1 -> GPIO2 Pin(4, Pin.OUT), # LED2 -> GPIO4 Pin(12, Pin.OUT), # LED3 -> GPIO12 Pin(13, Pin.OUT) # LED4 -> GPIO13 ] # \u5173\u95ed\u6240\u6709LED\uff08\u53ef\u9009\uff09 for led in l# \u5b9a\u4e49\u4e2d\u65ad\u56de\u8c03\u51fd\u6570 def toggle_led(pin): for i in range(4): if pin == buttons[i]: leds[i].value(not leds[i].value()) # \u914d\u7f6e\u4e2d\u65ad\uff08\u68c0\u6d4b\u4e0b\u964d\u6cbf\uff09 for button in buttons: button.irq(trigger=Pin.IRQ_FALLING, handler=toggle_led) time.sleep_ms(10) time.sleep_ms(50)","title":"\u5b9e\u9a8c\u516d\uff1a4P\u6309\u952e\u63a7\u52364\u76cfLED\u706f"},{"location":"MicroPython/%E6%91%87%E6%9D%86%E6%8E%A7%E5%88%B6%E7%82%B9%E9%98%B5%E5%B1%8F%E4%B8%8A%E7%82%B9/","text":"\u6447\u6746\u63a7\u5236\u70b9\u9635\u5c4f\u4e0a\u70b9\u7684\u79fb\u52a8 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 8\u00d78\u70b9\u9635\u5c4f 1 4 PS2\u6447\u6746 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 8\u00d78\u70b9\u9635\u5c4f-GND P5 2 8\u00d78\u70b9\u9635\u5c4f-VCC P5 3 8\u00d78\u70b9\u9635\u5c4f-DIN 23 4 8\u00d78\u70b9\u9635\u5c4f-CS 5 5 8\u00d78\u70b9\u9635\u5c4f-CLK 18 6 PS2\u6447\u6746-X 35 7 PS2\u6447\u6746-Y 34 8 PS2\u6447\u6746-K 15 PS2\u6447\u6746\u7684\u4ecb\u7ecd PS2\u6447\u6746\u7531X\uff0cY\u8f74\u4e24\u4e2a\u7535\u4f4d\u5668\u548c\u4e00\u4e2a\u6309\u94ae\u7ec4\u6210\u3002\u53ef\u8fdb\u884c\u5de6\u53f3\u6446\u52a8\uff0c\u4e0a\u4e0b\u6309\u538b\u64cd\u4f5c\uff0c \u5b9e\u9a8c\u4e00\uff1a\u8bfb\u53d6\u6447\u6746\u4e0a\u7684\u6570\u503c from machine import Pin, ADC import time # \u5b9a\u4e49\u6447\u6746\u7684\u5f15\u811a ps2_x = ADC(Pin(35), atten=ADC.ATTN_11DB) ps2_y = ADC(Pin(34), atten=ADC.ATTN_11DB) ps2_button = Pin(15, Pin.IN) while True: print(f'x:{ps2_x.read()} y:{ps2_y.read()} z:{ps2_button.value()}') time.sleep(0.1) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' x:1875 y:1835 z:1 x:1879 y:1840 z:1 x:1879 y:1838 z:1 x:1873 y:1836 z:1 ''' \u5b9e\u9a8c\u4e8c\uff1a\u6447\u6746\u63a7\u5236\u70b9\u9635\u5c4f\u4e0a\u70b9\u7684\u79fb\u52a8 \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u9065\u63a7\u63a7\u5236\u70b9\u9635\u5c4f\u4e0a\u4eae\u70b9\u7684\u79fb\u52a8\uff0c\u5f53\u6309\u4e0b\u6309\u94ae\u65f6\u5019\uff0c\u4eae\u70b9\u56de\u5230\u521d\u59cb\u4f4d\u7f6e ''' from machine import Pin, ADC,SPI import time from libs.MAX7219 import MAX7219 # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67092\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=1) # \u5b9a\u4e49\u6447\u6746\u7684\u5f15\u811a ps2_x = ADC(Pin(35), atten=ADC.ATTN_11DB) ps2_y = ADC(Pin(34), atten=ADC.ATTN_11DB) ps2_button = Pin(15, Pin.IN) matrix.clear() # \u6e05\u5c4f # \u70b9\u4eae\u4e00\u4e2a\u70b9 pixel_X = 4 pixel_Y = 4 matrix.set_pixel(pixel_X, pixel_Y, state=1, device=0) while True: matrix.clear() matrix.set_pixel(pixel_X, pixel_Y, state=1, device=0) # \u5f53\u6309\u4e0b\u6309\u94ae\u662f\uff0c\u4eae\u70b9\u56de\u5230\u521d\u4f4d\u7f6e if ps2_button.value() == 0: pixel_X = 4 pixel_Y = 4 if ps2_x.read() > 4095/2 + 300 and pixel_X < 7: pixel_X += 1 elif ps2_x.read() < 4095/2 - 300 and pixel_X > 0: pixel_X -= 1 if ps2_y.read() > 4095/2 + 300 and pixel_Y > 0: pixel_Y -= 1 elif ps2_y.read() < 4095/2 - 300 and pixel_Y < 7: pixel_Y += 1 time.sleep(0.05)","title":"20.\u6447\u6746\u63a7\u5236\u70b9\u9635\u5c4f\u4e0a\u70b9"},{"location":"MicroPython/%E6%91%87%E6%9D%86%E6%8E%A7%E5%88%B6%E7%82%B9%E9%98%B5%E5%B1%8F%E4%B8%8A%E7%82%B9/#_1","text":"","title":"\u6447\u6746\u63a7\u5236\u70b9\u9635\u5c4f\u4e0a\u70b9\u7684\u79fb\u52a8"},{"location":"MicroPython/%E6%91%87%E6%9D%86%E6%8E%A7%E5%88%B6%E7%82%B9%E9%98%B5%E5%B1%8F%E4%B8%8A%E7%82%B9/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 8\u00d78\u70b9\u9635\u5c4f 1 4 PS2\u6447\u6746 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 8\u00d78\u70b9\u9635\u5c4f-GND P5 2 8\u00d78\u70b9\u9635\u5c4f-VCC P5 3 8\u00d78\u70b9\u9635\u5c4f-DIN 23 4 8\u00d78\u70b9\u9635\u5c4f-CS 5 5 8\u00d78\u70b9\u9635\u5c4f-CLK 18 6 PS2\u6447\u6746-X 35 7 PS2\u6447\u6746-Y 34 8 PS2\u6447\u6746-K 15 PS2\u6447\u6746\u7684\u4ecb\u7ecd PS2\u6447\u6746\u7531X\uff0cY\u8f74\u4e24\u4e2a\u7535\u4f4d\u5668\u548c\u4e00\u4e2a\u6309\u94ae\u7ec4\u6210\u3002\u53ef\u8fdb\u884c\u5de6\u53f3\u6446\u52a8\uff0c\u4e0a\u4e0b\u6309\u538b\u64cd\u4f5c\uff0c","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%91%87%E6%9D%86%E6%8E%A7%E5%88%B6%E7%82%B9%E9%98%B5%E5%B1%8F%E4%B8%8A%E7%82%B9/#_3","text":"from machine import Pin, ADC import time # \u5b9a\u4e49\u6447\u6746\u7684\u5f15\u811a ps2_x = ADC(Pin(35), atten=ADC.ATTN_11DB) ps2_y = ADC(Pin(34), atten=ADC.ATTN_11DB) ps2_button = Pin(15, Pin.IN) while True: print(f'x:{ps2_x.read()} y:{ps2_y.read()} z:{ps2_button.value()}') time.sleep(0.1) # \u8f93\u51fa\u7ed3\u679c\uff1a ''' x:1875 y:1835 z:1 x:1879 y:1840 z:1 x:1879 y:1838 z:1 x:1873 y:1836 z:1 '''","title":"\u5b9e\u9a8c\u4e00\uff1a\u8bfb\u53d6\u6447\u6746\u4e0a\u7684\u6570\u503c"},{"location":"MicroPython/%E6%91%87%E6%9D%86%E6%8E%A7%E5%88%B6%E7%82%B9%E9%98%B5%E5%B1%8F%E4%B8%8A%E7%82%B9/#_4","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' \u9065\u63a7\u63a7\u5236\u70b9\u9635\u5c4f\u4e0a\u4eae\u70b9\u7684\u79fb\u52a8\uff0c\u5f53\u6309\u4e0b\u6309\u94ae\u65f6\u5019\uff0c\u4eae\u70b9\u56de\u5230\u521d\u59cb\u4f4d\u7f6e ''' from machine import Pin, ADC,SPI import time from libs.MAX7219 import MAX7219 # \u521d\u59cb\u5316\uff1a\u4f7f\u7528VSPI\uff08\u9ed8\u8ba4\u5f15\u811a\uff09\uff0cCS=GPIO5\uff0c\u7ea7\u80541\u4e2a\u6a21\u5757(\u5c31\u662f\u53ea\u67092\u4e2a\u5c4f) matrix = MAX7219(spi_bus=2, cs_pin=5, num_devices=1) # \u5b9a\u4e49\u6447\u6746\u7684\u5f15\u811a ps2_x = ADC(Pin(35), atten=ADC.ATTN_11DB) ps2_y = ADC(Pin(34), atten=ADC.ATTN_11DB) ps2_button = Pin(15, Pin.IN) matrix.clear() # \u6e05\u5c4f # \u70b9\u4eae\u4e00\u4e2a\u70b9 pixel_X = 4 pixel_Y = 4 matrix.set_pixel(pixel_X, pixel_Y, state=1, device=0) while True: matrix.clear() matrix.set_pixel(pixel_X, pixel_Y, state=1, device=0) # \u5f53\u6309\u4e0b\u6309\u94ae\u662f\uff0c\u4eae\u70b9\u56de\u5230\u521d\u4f4d\u7f6e if ps2_button.value() == 0: pixel_X = 4 pixel_Y = 4 if ps2_x.read() > 4095/2 + 300 and pixel_X < 7: pixel_X += 1 elif ps2_x.read() < 4095/2 - 300 and pixel_X > 0: pixel_X -= 1 if ps2_y.read() > 4095/2 + 300 and pixel_Y > 0: pixel_Y -= 1 elif ps2_y.read() < 4095/2 - 300 and pixel_Y < 7: pixel_Y += 1 time.sleep(0.05)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u6447\u6746\u63a7\u5236\u70b9\u9635\u5c4f\u4e0a\u70b9\u7684\u79fb\u52a8"},{"location":"MicroPython/%E6%95%B0%E5%AD%97%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Echo 33 2 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Tring 32 3 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 4 \u56db\u4f4d\u6570\u7801\u7ba1--SDA 21 5 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 6 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd DS18B20\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\u662f\u5e38\u7528\u7684\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\uff0c\u5176\u8f93\u51fa\u7684\u662f\u6570\u5b57\u4fe1\u53f7\uff0c\u5177\u6709\u4f53\u79ef\u5c0f\uff0c\u6297\u5e72\u6270\u80fd\u529b\u5f3a\uff0c\u7cbe\u5ea6\u9ad8\u7684\u7279\u70b9\u3002\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\u63a5\u7ebf\u65b9\u4fbf\uff0c \u5c01\u88c5\u540e\u7684\u53ef\u7528\u4e8e\u7535\u7f06\u6c9f\u6d4b\u6e29\uff0c\u9ad8\u7089\u6c34\u5faa\u73af\u6d4b\u6e29\uff0c\u9505\u7089\u6d4b\u6e29\uff0c\u673a\u623f\u6d4b\u6e29\uff0c\u519c\u4e1a\u5927\u68da\u6d4b\u6e29\uff0c\u6d01\u51c0\u5ba4\u6d4b\u6e29\uff0c\u5f39\u836f\u5e93\u6d4b\u6e29\u7b49\u5404\u79cd\u975e\u6781\u9650\u6e29\u5ea6\u573a\u5408\u3002\u8010\u78e8\u8010\u78b0\uff0c\u4f53\u79ef\u5c0f\uff0c\u4f7f\u7528\u65b9\u4fbf\uff0c\u5c01\u88c5\u5f62\u5f0f\u591a\u6837\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u72ed\u5c0f\u7a7a\u95f4\u8bbe\u5907\u6570\u5b57\u6d4b\u6e29\u548c\u63a7\u5236\u9886\u57df\u3002 \u5355\u7ebf\u901a\u8baf\uff08OneWire\uff09 ESP32\u5355\u7247\u673a\u4f7f\u7528\u5355\u603b\u7ebf\uff08\u4e00\u6839\u7ebf\uff0cOneWire\uff09\u4e0eDS18B20\u6e29\u5ea6\u4f20\u611f\u5668\u8fde\u63a5\u901a\u4fe1\u6765\u8bfb\u5199\u6570\u636e\uff0c\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\uff0c\u8981\u5148\u7528\u5355\u603b\u7ebf\u7684\u7c7b\u6765\u5c06\u5355\u7247\u673a\u6478\u4e2a\u7aef\u53e3\u914d\u7f6e\u6210\u5355\u603b\u7ebf\u7aef\u53e3\uff0c\u518d\u4f7f\u7528DS18B20\u7c7b\u548c\u51fd\u6570\u7f16\u7a0b\u8bfb\u5199\u8be5\u7aef\u53e3\u8fde\u63a5\u7684DS18B20\u6e29\u5ea6\u4f20\u611f\u5668 \u6784\u5efa\u5355\u603b\u7ebf\u5bf9\u8c61 ow = onewire.OneWire(Pin(id, Pin.IN, Pin.PULL_UP)) id \u4e3a\u5355\u7247\u673a\u4f7f\u7528\u8fde\u63a5DS18B20\u5355\u603b\u7ebf\u7684\u5f15\u811a\u7f16\u53f7 \u6784\u5efaDS18B20\u5bf9\u8c61 ds = ds18x20.DS18X20(ow) ow \u4e3a\u521a\u624d\u6784\u5efa\u7684\u5355\u603b\u7ebf\u5bf9\u8c61 \u626b\u63cf\u5355\u603b\u7ebf\u8bbe\u5907 roms = ow.scan() \u626b\u63cf\u5355\u603b\u7ebf\u4e0a\u94fe\u63a5\u7684DS18B20\u8bbe\u5907\uff0c\u8fd4\u56de\u8bbe\u5907\u5730\u5740 \u542f\u52a8\u6e29\u5ea6\u8f6c\u6362 ds.convert_temp() \u6bcf\u6b21\u8bfb\u53d6\u6e29\u5ea6\u503c\u90fd\u5fc5\u987b\u6309\u6267\u884c\u542f\u52a8\u6e29\u5ea6\u8f6c\u6362\u51fd\u6570 \u8bfb\u53d6\u6570\u636e s.read_temp(roms[0]) \u5b9e\u9a8c1\uff1a\u663e\u793a\u5f53\u524d\u6e29\u5ea6 \u7a0b\u5e8f\u5982\u4e0b from machine import Pin, I2C from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 import onewire import ds18x20 import time # ======== TM1650\u6570\u7801\u7ba1\u914d\u7f6e ======== i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # ======== DS18B20\u6e29\u5ea6\u4f20\u611f\u5668\u914d\u7f6e ======== ow = onewire.OneWire(Pin(2, Pin.IN, Pin.PULL_UP)) # \u6784\u5efa\u5355\u603b\u7ebf\u5bf9\u8c61 ds = ds18x20.DS18X20(ow) # \u6784\u5efaDS18B20\u5bf9\u8c61 roms = ds.scan() # \u626b\u63cf\u8bbe\u5907 while True: ds.convert_temp() # \u542f\u52a8\u6e29\u5ea6\u8f6c\u6362 time.sleep_ms(750) # \u7b49\u5f85\u6e29\u5ea6\u8f6c\u6362\u5b8c\u6210 temp = int(ds.read_temp(roms[0])*100) # \u8bfb\u53d6\u6e29\u5ea6\u503c # \u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u6e29\u5ea6\u503c display.shownum(temp) display.showDP(bit=1, show=True) # \u5728\u7b2c\u4e8c\u4f4d\u4e0a\u663e\u793a\u5c0f\u6570\u70b9 time.sleep(1)","title":"40.\u6570\u5b57\u6e29\u5ea6\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%95%B0%E5%AD%97%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%95%B0%E5%AD%97%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Echo 33 2 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Tring 32 3 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 4 \u56db\u4f4d\u6570\u7801\u7ba1--SDA 21 5 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 6 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd DS18B20\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\u662f\u5e38\u7528\u7684\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\uff0c\u5176\u8f93\u51fa\u7684\u662f\u6570\u5b57\u4fe1\u53f7\uff0c\u5177\u6709\u4f53\u79ef\u5c0f\uff0c\u6297\u5e72\u6270\u80fd\u529b\u5f3a\uff0c\u7cbe\u5ea6\u9ad8\u7684\u7279\u70b9\u3002\u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668\u63a5\u7ebf\u65b9\u4fbf\uff0c \u5c01\u88c5\u540e\u7684\u53ef\u7528\u4e8e\u7535\u7f06\u6c9f\u6d4b\u6e29\uff0c\u9ad8\u7089\u6c34\u5faa\u73af\u6d4b\u6e29\uff0c\u9505\u7089\u6d4b\u6e29\uff0c\u673a\u623f\u6d4b\u6e29\uff0c\u519c\u4e1a\u5927\u68da\u6d4b\u6e29\uff0c\u6d01\u51c0\u5ba4\u6d4b\u6e29\uff0c\u5f39\u836f\u5e93\u6d4b\u6e29\u7b49\u5404\u79cd\u975e\u6781\u9650\u6e29\u5ea6\u573a\u5408\u3002\u8010\u78e8\u8010\u78b0\uff0c\u4f53\u79ef\u5c0f\uff0c\u4f7f\u7528\u65b9\u4fbf\uff0c\u5c01\u88c5\u5f62\u5f0f\u591a\u6837\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u72ed\u5c0f\u7a7a\u95f4\u8bbe\u5907\u6570\u5b57\u6d4b\u6e29\u548c\u63a7\u5236\u9886\u57df\u3002 \u5355\u7ebf\u901a\u8baf\uff08OneWire\uff09 ESP32\u5355\u7247\u673a\u4f7f\u7528\u5355\u603b\u7ebf\uff08\u4e00\u6839\u7ebf\uff0cOneWire\uff09\u4e0eDS18B20\u6e29\u5ea6\u4f20\u611f\u5668\u8fde\u63a5\u901a\u4fe1\u6765\u8bfb\u5199\u6570\u636e\uff0c\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\uff0c\u8981\u5148\u7528\u5355\u603b\u7ebf\u7684\u7c7b\u6765\u5c06\u5355\u7247\u673a\u6478\u4e2a\u7aef\u53e3\u914d\u7f6e\u6210\u5355\u603b\u7ebf\u7aef\u53e3\uff0c\u518d\u4f7f\u7528DS18B20\u7c7b\u548c\u51fd\u6570\u7f16\u7a0b\u8bfb\u5199\u8be5\u7aef\u53e3\u8fde\u63a5\u7684DS18B20\u6e29\u5ea6\u4f20\u611f\u5668 \u6784\u5efa\u5355\u603b\u7ebf\u5bf9\u8c61 ow = onewire.OneWire(Pin(id, Pin.IN, Pin.PULL_UP)) id \u4e3a\u5355\u7247\u673a\u4f7f\u7528\u8fde\u63a5DS18B20\u5355\u603b\u7ebf\u7684\u5f15\u811a\u7f16\u53f7 \u6784\u5efaDS18B20\u5bf9\u8c61 ds = ds18x20.DS18X20(ow) ow \u4e3a\u521a\u624d\u6784\u5efa\u7684\u5355\u603b\u7ebf\u5bf9\u8c61 \u626b\u63cf\u5355\u603b\u7ebf\u8bbe\u5907 roms = ow.scan() \u626b\u63cf\u5355\u603b\u7ebf\u4e0a\u94fe\u63a5\u7684DS18B20\u8bbe\u5907\uff0c\u8fd4\u56de\u8bbe\u5907\u5730\u5740 \u542f\u52a8\u6e29\u5ea6\u8f6c\u6362 ds.convert_temp() \u6bcf\u6b21\u8bfb\u53d6\u6e29\u5ea6\u503c\u90fd\u5fc5\u987b\u6309\u6267\u884c\u542f\u52a8\u6e29\u5ea6\u8f6c\u6362\u51fd\u6570 \u8bfb\u53d6\u6570\u636e s.read_temp(roms[0])","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%95%B0%E5%AD%97%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#1","text":"\u7a0b\u5e8f\u5982\u4e0b from machine import Pin, I2C from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 import onewire import ds18x20 import time # ======== TM1650\u6570\u7801\u7ba1\u914d\u7f6e ======== i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # ======== DS18B20\u6e29\u5ea6\u4f20\u611f\u5668\u914d\u7f6e ======== ow = onewire.OneWire(Pin(2, Pin.IN, Pin.PULL_UP)) # \u6784\u5efa\u5355\u603b\u7ebf\u5bf9\u8c61 ds = ds18x20.DS18X20(ow) # \u6784\u5efaDS18B20\u5bf9\u8c61 roms = ds.scan() # \u626b\u63cf\u8bbe\u5907 while True: ds.convert_temp() # \u542f\u52a8\u6e29\u5ea6\u8f6c\u6362 time.sleep_ms(750) # \u7b49\u5f85\u6e29\u5ea6\u8f6c\u6362\u5b8c\u6210 temp = int(ds.read_temp(roms[0])*100) # \u8bfb\u53d6\u6e29\u5ea6\u503c # \u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u6e29\u5ea6\u503c display.shownum(temp) display.showDP(bit=1, show=True) # \u5728\u7b2c\u4e8c\u4f4d\u4e0a\u663e\u793a\u5c0f\u6570\u70b9 time.sleep(1)","title":"\u5b9e\u9a8c1\uff1a\u663e\u793a\u5f53\u524d\u6e29\u5ea6"},{"location":"MicroPython/%E6%97%8B%E9%92%AE%E7%BC%96%E7%A0%81%E5%99%A8/","text":"\u6c34\u96fe\u5316\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u96fe\u5316\u6a21\u5757 1 5 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65cb\u94ae\u7f16\u7801\u5668-SW 23 2 \u65cb\u94ae\u7f16\u7801\u5668-DT 5 3 \u65cb\u94ae\u7f16\u7801\u5668-CLK 18 4 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 5 \u56db\u4f4d\u6570\u7801\u7ba1-SDA 21 6 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 7 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u65cb\u94ae\u7f16\u7801\u5668\u4ecb\u7ecd** \u7f16\u7801\u5668\u662f\u4e00\u79cd\u5c06\u65cb\u8f6c\u4f4d\u79fb\u8f6c\u6362\u4e3a\u4e00\u8fde\u4e32\u6570\u5b57\u8109\u51b2\u4fe1\u53f7\u7684\u65cb\u8f6c\u5f0f\u4f20\u611f\u5668\uff0c\u901a\u8fc7\u65cb\u8f6c\u53ef\u4ee5\u8ba1\u6570\u6b63\u65b9\u5411\u548c\u53cd\u65b9\u5411\u8f6c\u52a8\u8fc7\u7a0b\u4e2d\u8f93\u51fa\u8109\u51b2\u7684\u6b21\u6570\uff0c\u65cb\u8f6c\u8ba1\u6570\u4e0d\u50cf\u7535\u4f4d\u8ba1\uff0c\u8fd9\u79cd\u8f6c\u52a8\u8ba1\u6570\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002\u914d\u5408\u65cb\u8f6c\u7f16\u7801\u5668\u4e0a\u7684\u6309\u952e\uff0c\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e9b\u7279\u5b9a\u529f\u80fd\u3002\u8bfb\u6570\u7cfb\u7edf\u901a\u5e38\u91c7\u7528\u5dee\u5206\u65b9\u5f0f\uff0c\u5373\u5c06\u4e24\u4e2a\u6ce2\u5f62\u4e00\u6837\u4f46\u76f8\u4f4d\u5dee\u4e3a 180\u00b0\u7684\u4e0d\u540c\u4fe1\u53f7\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u4fbf\u63d0\u9ad8\u8f93\u51fa\u4fe1\u53f7\u7684\u8d28\u91cf\u548c\u7a33\u5b9a\u6027\u3002\u7f16\u7801\u5668\u5e7f\u6cdb\u7528\u4e8e\u6c7d\u8f66\u97f3\u91cf\u3001\u7a7a\u8c03\u8c03\u8282\u7b49\u5e94\u7528\u573a\u666f\u3002 \u5b9e\u9a8c\u4e00\uff1a\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u6570\u5b57 \u4ee3\u53d1\u5982\u4e0b ```python from machine import Pin, Timer,I2C from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 import time ''' \u5b9e\u9a8c1\uff1a\u65cb\u8f6c\u65cb\u94ae\u7f16\u7801\u5668\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u6570\u5b57 \u53f3\u65cb\u6570\u5b57\u51cf\u5c11\uff0c\u5de6\u65cb\u6570\u5b57\u589e\u52a0\uff0c\u6309\u4e0b\u4e2d\u95f4\u6309\u94ae\uff0c\u6570\u5b57\u5f52\u96f6 ''' # ======== TM1650\u6570\u7801\u7ba1\u914d\u7f6e ======== i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # ======== \u521d\u59cb\u5316\u65cb\u94ae\u7f16\u7801\u5668 ======== clk = Pin(18, Pin.IN, Pin.PULL_UP) dt = Pin(5, Pin.IN, Pin.PULL_UP) sw = Pin(23, Pin.OUT) sw.value(1) # \u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf counter = 0 last_clk_state = 0 last_button_press = 0 press_start = 0 # \u65cb\u8f6c\u7f16\u7801\u5668\u4e2d\u65ad\u5904\u7406\u51fd\u6570 def handle_rotation(pin): global counter, last_clk_state clk_state = clk.value() dt_state = dt.value() if clk_state != last_clk_state: if dt_state != clk_state: counter += 1 # \u987a\u65f6\u9488\u65cb\u8f6c else: counter -= 1 # \u9006\u65f6\u9488\u65cb\u8f6c print(\"\u5f53\u524d\u8ba1\u6570\u503c:\", counter) last_clk_state = clk_state # \u6309\u94ae\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff08\u5e26\u5f52\u96f6\u529f\u80fd\uff09 def handle_button(pin): global press_start, counter if sw.value() == 1: # \u6309\u4e0b\u65f6\u8bb0\u5f55\u65f6\u95f4 press_start = time.ticks_ms() else: # \u677e\u5f00\u65f6\u5224\u65ad\u65f6\u957f if (time.ticks_ms() - press_start) > 1000: # \u957f\u63091\u79d2 counter = 0 print(\"\u5df2\u91cd\u7f6e\uff01\u5f53\u524d\u503c:\", counter) last_button_press = time.ticks_ms() ``` \u8bbe\u7f6e\u4e2d\u65ad clk.irq(trigger=Pin.IRQ_FALLING | Pin.IRQ_RISING, handler=handle_rotation) sw.irq(trigger=Pin.IRQ_FALLING, handler=handle_button) \u4e3b\u5faa\u73af while True: display.shownum(counter) # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u5176\u4ed6\u9700\u8981\u6301\u7eed\u8fd0\u884c\u7684\u4ee3\u7801 time.sleep(0.1) ```","title":"43.\u65cb\u94ae\u7f16\u7801\u5668"},{"location":"MicroPython/%E6%97%8B%E9%92%AE%E7%BC%96%E7%A0%81%E5%99%A8/#_1","text":"","title":"\u6c34\u96fe\u5316\u6a21\u5757"},{"location":"MicroPython/%E6%97%8B%E9%92%AE%E7%BC%96%E7%A0%81%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u96fe\u5316\u6a21\u5757 1 5 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65cb\u94ae\u7f16\u7801\u5668-SW 23 2 \u65cb\u94ae\u7f16\u7801\u5668-DT 5 3 \u65cb\u94ae\u7f16\u7801\u5668-CLK 18 4 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 5 \u56db\u4f4d\u6570\u7801\u7ba1-SDA 21 6 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 7 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u65cb\u94ae\u7f16\u7801\u5668\u4ecb\u7ecd** \u7f16\u7801\u5668\u662f\u4e00\u79cd\u5c06\u65cb\u8f6c\u4f4d\u79fb\u8f6c\u6362\u4e3a\u4e00\u8fde\u4e32\u6570\u5b57\u8109\u51b2\u4fe1\u53f7\u7684\u65cb\u8f6c\u5f0f\u4f20\u611f\u5668\uff0c\u901a\u8fc7\u65cb\u8f6c\u53ef\u4ee5\u8ba1\u6570\u6b63\u65b9\u5411\u548c\u53cd\u65b9\u5411\u8f6c\u52a8\u8fc7\u7a0b\u4e2d\u8f93\u51fa\u8109\u51b2\u7684\u6b21\u6570\uff0c\u65cb\u8f6c\u8ba1\u6570\u4e0d\u50cf\u7535\u4f4d\u8ba1\uff0c\u8fd9\u79cd\u8f6c\u52a8\u8ba1\u6570\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002\u914d\u5408\u65cb\u8f6c\u7f16\u7801\u5668\u4e0a\u7684\u6309\u952e\uff0c\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e9b\u7279\u5b9a\u529f\u80fd\u3002\u8bfb\u6570\u7cfb\u7edf\u901a\u5e38\u91c7\u7528\u5dee\u5206\u65b9\u5f0f\uff0c\u5373\u5c06\u4e24\u4e2a\u6ce2\u5f62\u4e00\u6837\u4f46\u76f8\u4f4d\u5dee\u4e3a 180\u00b0\u7684\u4e0d\u540c\u4fe1\u53f7\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u4fbf\u63d0\u9ad8\u8f93\u51fa\u4fe1\u53f7\u7684\u8d28\u91cf\u548c\u7a33\u5b9a\u6027\u3002\u7f16\u7801\u5668\u5e7f\u6cdb\u7528\u4e8e\u6c7d\u8f66\u97f3\u91cf\u3001\u7a7a\u8c03\u8c03\u8282\u7b49\u5e94\u7528\u573a\u666f\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%97%8B%E9%92%AE%E7%BC%96%E7%A0%81%E5%99%A8/#_3","text":"\u4ee3\u53d1\u5982\u4e0b ```python from machine import Pin, Timer,I2C from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 import time ''' \u5b9e\u9a8c1\uff1a\u65cb\u8f6c\u65cb\u94ae\u7f16\u7801\u5668\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u6570\u5b57 \u53f3\u65cb\u6570\u5b57\u51cf\u5c11\uff0c\u5de6\u65cb\u6570\u5b57\u589e\u52a0\uff0c\u6309\u4e0b\u4e2d\u95f4\u6309\u94ae\uff0c\u6570\u5b57\u5f52\u96f6 ''' # ======== TM1650\u6570\u7801\u7ba1\u914d\u7f6e ======== i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # ======== \u521d\u59cb\u5316\u65cb\u94ae\u7f16\u7801\u5668 ======== clk = Pin(18, Pin.IN, Pin.PULL_UP) dt = Pin(5, Pin.IN, Pin.PULL_UP) sw = Pin(23, Pin.OUT) sw.value(1) # \u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf counter = 0 last_clk_state = 0 last_button_press = 0 press_start = 0 # \u65cb\u8f6c\u7f16\u7801\u5668\u4e2d\u65ad\u5904\u7406\u51fd\u6570 def handle_rotation(pin): global counter, last_clk_state clk_state = clk.value() dt_state = dt.value() if clk_state != last_clk_state: if dt_state != clk_state: counter += 1 # \u987a\u65f6\u9488\u65cb\u8f6c else: counter -= 1 # \u9006\u65f6\u9488\u65cb\u8f6c print(\"\u5f53\u524d\u8ba1\u6570\u503c:\", counter) last_clk_state = clk_state # \u6309\u94ae\u4e2d\u65ad\u5904\u7406\u51fd\u6570\uff08\u5e26\u5f52\u96f6\u529f\u80fd\uff09 def handle_button(pin): global press_start, counter if sw.value() == 1: # \u6309\u4e0b\u65f6\u8bb0\u5f55\u65f6\u95f4 press_start = time.ticks_ms() else: # \u677e\u5f00\u65f6\u5224\u65ad\u65f6\u957f if (time.ticks_ms() - press_start) > 1000: # \u957f\u63091\u79d2 counter = 0 print(\"\u5df2\u91cd\u7f6e\uff01\u5f53\u524d\u503c:\", counter) last_button_press = time.ticks_ms() ```","title":"\u5b9e\u9a8c\u4e00\uff1a\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u6570\u5b57"},{"location":"MicroPython/%E6%97%8B%E9%92%AE%E7%BC%96%E7%A0%81%E5%99%A8/#_4","text":"clk.irq(trigger=Pin.IRQ_FALLING | Pin.IRQ_RISING, handler=handle_rotation) sw.irq(trigger=Pin.IRQ_FALLING, handler=handle_button)","title":"\u8bbe\u7f6e\u4e2d\u65ad"},{"location":"MicroPython/%E6%97%8B%E9%92%AE%E7%BC%96%E7%A0%81%E5%99%A8/#_5","text":"while True: display.shownum(counter) # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u5176\u4ed6\u9700\u8981\u6301\u7eed\u8fd0\u884c\u7684\u4ee3\u7801 time.sleep(0.1) ```","title":"\u4e3b\u5faa\u73af"},{"location":"MicroPython/%E6%A7%BD%E5%9E%8B%E5%85%89%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u69fd\u578b\u5149\u7535\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 5 \u6309\u952e 1 6 PH2.0\u53cc\u5934\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668 2 2 \u6309\u952e 4 3 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 4 \u56db\u4f4d\u6570\u7801\u7ba1--SDA 21 5 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 6 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668\u4ecb\u7ecd \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668\u662f\u628a\u4e00\u4e2a\u5149\u53d1\u5c04\u5668\u548c\u4e00\u4e2a\u63a5\u6536\u5668\u9762\u5bf9\u9762\u5730\u88c5\u5728\u4e00\u4e2a\u69fd\u7684\u4e24\u4fa7\u7ec4\u6210\u69fd\u5f62\u5149\u7535\u3002\u53d1\u5149\u5668\u80fd\u53d1\u51fa\u7ea2\u5916\u5149\u6216\u53ef\u89c1\u5149\uff0c\u5728\u65e0\u963b\u60c5\u51b5\u4e0b\u5149\u63a5\u6536\u5668\u80fd\u6536\u5230\u5149\u3002\u4f46\u5f53\u88ab\u68c0\u6d4b\u7269\u4f53\u4ece\u69fd\u4e2d\u901a\u8fc7\u65f6\uff0c\u5149\u88ab\u906e\u6321\uff0c\u5149\u7535\u5f00\u5173\u4fbf\u52a8\u4f5c\uff0c\u8f93\u51fa\u4e00\u4e2a\u5f00\u5173\u63a7\u5236\u4fe1\u53f7\uff0c\u5207\u65ad\u6216\u63a5\u901a\u8d1f\u8f7d\u7535\u6d41\uff0c\u4ece\u800c\u5b8c\u6210\u4e00\u6b21\u63a7\u5236\u52a8\u4f5c\u3002\u69fd\u5f62\u5f00\u5173\u7684\u68c0\u6d4b\u8ddd\u79bb\u56e0\u4e3a\u53d7\u6574\u4f53\u7ed3\u6784\u7684\u9650\u5236\u4e00\u822c\u53ea\u6709\u51e0\u5398\u7c73\u3002 \u5b9e\u9a8c\u4e00\uff1a\u786c\u5e01\u8ba1\u6570\u5668 \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u786c\u5e01\u8ba1\u6570\u5668 \u5229\u7528\u69fd\u578b\u5149\u7535\u5f00\u5173\u8ba1\u7b97\u901a\u8fc7\u7684\u786c\u5e01\u6570\uff0c\u5e76\u7528\u56db\u4f4d\u6570\u7801\u7ba1\u663e\u793a\u3002 \u6709\u786c\u5e01\u6295\u5165\u6570\u5b57\u663e\u793a\u589e\u52a01 \u6309\u4e0b\u6309\u94ae\uff0c\u91cd\u65b0\u8ba1\u6570\u3002 ''' from machine import I2C, Pin from libs.FourDigitDisplay import FourDigitDisplay # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # \u6784\u5efa\u56db\u4f4d\u6570\u7801\u7ba1\u5bf9\u8c61 buttten = Pin(4,Pin.IN) photoelectricity = Pin(2,Pin.IN) # \u521d\u59cb\u5316\u69fd\u578b\u5149\u7535\u4f20\u611f\u5668 display.shownum(1234) # \u663e\u793a\u6570\u5b571234 num = 0 while True : if not photoelectricity.value(): # \u6709\u786c\u5e01\u6295\u5165 print(photoelectricity.value()) num += 1 while not photoelectricity.value(): # \u907f\u514d\u91cd\u590d\u8ba1\u6570 pass if buttten.value() == 0: # \u5f53\u6309\u952e\u88ab\u6309\u4e0b\u6570\u5b57\u6e05\u96f6 display.clear() num = 0 display.shownum(num)","title":"38.\u69fd\u578b\u5149\u7535\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%A7%BD%E5%9E%8B%E5%85%89%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u69fd\u578b\u5149\u7535\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%A7%BD%E5%9E%8B%E5%85%89%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 5 \u6309\u952e 1 6 PH2.0\u53cc\u5934\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668 2 2 \u6309\u952e 4 3 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 4 \u56db\u4f4d\u6570\u7801\u7ba1--SDA 21 5 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 6 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668\u4ecb\u7ecd \u69fd\u578b\u5149\u7535\u4f20\u611f\u5668\u662f\u628a\u4e00\u4e2a\u5149\u53d1\u5c04\u5668\u548c\u4e00\u4e2a\u63a5\u6536\u5668\u9762\u5bf9\u9762\u5730\u88c5\u5728\u4e00\u4e2a\u69fd\u7684\u4e24\u4fa7\u7ec4\u6210\u69fd\u5f62\u5149\u7535\u3002\u53d1\u5149\u5668\u80fd\u53d1\u51fa\u7ea2\u5916\u5149\u6216\u53ef\u89c1\u5149\uff0c\u5728\u65e0\u963b\u60c5\u51b5\u4e0b\u5149\u63a5\u6536\u5668\u80fd\u6536\u5230\u5149\u3002\u4f46\u5f53\u88ab\u68c0\u6d4b\u7269\u4f53\u4ece\u69fd\u4e2d\u901a\u8fc7\u65f6\uff0c\u5149\u88ab\u906e\u6321\uff0c\u5149\u7535\u5f00\u5173\u4fbf\u52a8\u4f5c\uff0c\u8f93\u51fa\u4e00\u4e2a\u5f00\u5173\u63a7\u5236\u4fe1\u53f7\uff0c\u5207\u65ad\u6216\u63a5\u901a\u8d1f\u8f7d\u7535\u6d41\uff0c\u4ece\u800c\u5b8c\u6210\u4e00\u6b21\u63a7\u5236\u52a8\u4f5c\u3002\u69fd\u5f62\u5f00\u5173\u7684\u68c0\u6d4b\u8ddd\u79bb\u56e0\u4e3a\u53d7\u6574\u4f53\u7ed3\u6784\u7684\u9650\u5236\u4e00\u822c\u53ea\u6709\u51e0\u5398\u7c73\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%A7%BD%E5%9E%8B%E5%85%89%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u786c\u5e01\u8ba1\u6570\u5668 \u5229\u7528\u69fd\u578b\u5149\u7535\u5f00\u5173\u8ba1\u7b97\u901a\u8fc7\u7684\u786c\u5e01\u6570\uff0c\u5e76\u7528\u56db\u4f4d\u6570\u7801\u7ba1\u663e\u793a\u3002 \u6709\u786c\u5e01\u6295\u5165\u6570\u5b57\u663e\u793a\u589e\u52a01 \u6309\u4e0b\u6309\u94ae\uff0c\u91cd\u65b0\u8ba1\u6570\u3002 ''' from machine import I2C, Pin from libs.FourDigitDisplay import FourDigitDisplay # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # \u6784\u5efa\u56db\u4f4d\u6570\u7801\u7ba1\u5bf9\u8c61 buttten = Pin(4,Pin.IN) photoelectricity = Pin(2,Pin.IN) # \u521d\u59cb\u5316\u69fd\u578b\u5149\u7535\u4f20\u611f\u5668 display.shownum(1234) # \u663e\u793a\u6570\u5b571234 num = 0 while True : if not photoelectricity.value(): # \u6709\u786c\u5e01\u6295\u5165 print(photoelectricity.value()) num += 1 while not photoelectricity.value(): # \u907f\u514d\u91cd\u590d\u8ba1\u6570 pass if buttten.value() == 0: # \u5f53\u6309\u952e\u88ab\u6309\u4e0b\u6570\u5b57\u6e05\u96f6 display.clear() num = 0 display.shownum(num)","title":"\u5b9e\u9a8c\u4e00\uff1a\u786c\u5e01\u8ba1\u6570\u5668"},{"location":"MicroPython/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/","text":"\u6b65\u8fdb\u7535\u673a \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 \u6b65\u8fdb\u7535\u673a 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6b65\u8fdb\u7535\u673a 4 2 \u6b65\u8fdb\u7535\u673a 12 3 \u6b65\u8fdb\u7535\u673a 13 4 \u6b65\u8fdb\u7535\u673a 14 \u6b65\u8fdb\u7535\u673a\u4ecb\u7ecd \u6b65\u8fdb\u7535\u673a\u662f\u4e00\u79cd\u7528\u7535\u8109\u51b2\u63a7\u5236\u8fd0\u8f6c\u7684\u7535\u52a8\u673a\uff0c\u5e26\u6bcf\u8f93\u5165\u4e00\u4e2a\u7535\u8109\u51b2\uff0c\u5c31\u4f1a\u8f6c\u52a8\u4e00\u5b9a\u7684\u89d2\u5ea6\uff0c\u56e0\u6b64\u6b65\u8fdb\u7535\u673a\u53c8\u79f0\u4e3a\u8109\u51b2\u7535\u52a8\u673a\u3002\u6b65\u8fdb\u7535\u673a\u7684\u8f6c\u901f\u4e0e\u8109\u51b2\u9891\u7387\u6210\u6b63\u6bd4\u3002\u8109\u51b2\u9891\u7387\u8d8a\u9ad8\uff0c\u5355\u4f4d\u65f6\u95f4\u5185\u8f93\u5165\u7535\u52a8\u673a\u7684\u8109\u51b2\u4e2a\u6570\u8d8a\u591a\uff0c\u8f6c\u52a8\u7684\u89d2\u5ea6\u8d8a\u5927\uff0c\u5373\u8f6c\u901f\u8d8a\u5feb\u3002 \u4e0e\u6240\u6709\u7535\u673a\u4e00\u6837\uff0c\u6b65\u8fdb\u7535\u673a\u4e5f\u5305\u62ec\u56fa\u5b9a\u90e8\u5206\uff08\u5b9a\u5b50\uff09\u548c\u6d3b\u52a8\u90e8\u5206\uff08\u8f6c\u5b50\uff09\u3002\u5b9a\u5b50\u4e0a\u6709\u7f20\u7ed5\u4e86\u7ebf\u5708\u7684\u9f7f\u8f6e\u72b6\u7a81\u8d77\uff0c\u800c\u8f6c\u5b50\u4e3a\u6c38\u78c1\u4f53\u6216\u53ef\u53d8\u78c1\u963b\u94c1\u82af\u3002\u7a0d\u540e\u6211\u4eec\u5c06\u66f4\u6df1\u5165\u5730\u4ecb\u7ecd\u4e0d\u540c\u7684\u8f6c\u5b50\u7ed3\u6784\u3002 \u6b65\u8fdb\u7535\u673a\u7684\u57fa\u672c\u5de5\u4f5c\u539f\u7406\u4e3a\uff1a \u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u5b9a\u5b50\u76f8\u4f4d\u901a\u7535\uff0c\u7ebf\u5708\u4e2d\u901a\u8fc7\u7684\u7535\u6d41\u4f1a\u4ea7\u751f\u78c1\u573a\uff0c\u800c\u8f6c\u5b50\u4f1a\u4e0e\u8be5\u78c1\u573a\u5bf9\u9f50\uff1b \u4f9d\u6b21\u7ed9\u4e0d\u540c\u7684\u76f8\u4f4d\u65bd\u52a0\u7535\u538b\uff0c\u8f6c\u5b50\u5c06\u65cb\u8f6c\u7279\u5b9a\u7684\u89d2\u5ea6\u5e76\u6700\u7ec8\u5230\u8fbe\u9700\u8981\u7684\u4f4d\u7f6e\u3002 \u4e0b\u56fe\u663e\u793a\u4e86\u5176\u5de5\u4f5c\u539f\u7406\u3002\u9996\u5148\uff0c\u7ebf\u5708 A \u901a\u7535\u5e76\u4ea7\u751f\u78c1\u573a\uff0c\u8f6c\u5b50\u4e0e\u8be5\u78c1\u573a\u5bf9\u9f50\uff1b\u7ebf\u5708 B \u901a\u7535\u540e\uff0c\u8f6c\u5b50\u987a\u65f6\u9488\u65cb\u8f6c 60\u00b0 \u4ee5\u4e0e\u65b0\u7684\u78c1\u573a\u5bf9\u9f50\uff1b\u7ebf\u5708 C \u901a\u7535\u540e\u4e5f\u4f1a\u51fa\u73b0\u540c\u6837\u7684\u60c5\u51b5\u3002\u4e0b\u56fe\u4e2d\u5b9a\u5b50\u5c0f\u9f7f\u7684\u989c\u8272\u6307\u793a\u51fa\u5b9a\u5b50\u7ed5\u7ec4\u4ea7\u751f\u7684\u78c1\u573a\u65b9\u5411\u3002 \u6211\u4eec\u4eca\u5929\u5b9e\u9a8c\u7528\u5230\u7684\u662f 28BYJ-48 \u6b65\u8fdb\u7535\u673a\uff0c28BYJ-48 \u542b\u4e49\uff1a 28 \u6307\u7684\u662f\u7535\u673a\u6700\u5927\u5916\u5f84\uff0c B \u6307\u7684\u662f\u6b65\u8fdb\u5f0f\u7535\u673a\uff0c Y \u6307\u7684\u662f\u6c38\u78c1\u5f0f\u7535\u673a\uff0c J \u6307\u7684\u662f\u51cf\u901f\u578b\u7535\u673a\uff0c 48 \u8868\u793a\u53ef\u4ee5\u56db\u76f8\u516b\u62cd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c28BYJ-48 \u7684\u542b\u4e49\u4e3a\u5916\u5f84 28 \u6beb\u7c73\u56db\u76f8\u516b\u62cd\u5f0f\u6c38\u78c1\u51cf\u901f\u578b\u6b65\u8fdb\u7535\u673a\u3002 \u9996\u5148\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u662f 4\u76f8\u6c38\u78c1\u5f0f \uff0c28BYJ-48 \u7684\u5185\u90e8\u7ed3\u6784\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\u3002\u5148\u770b\u91cc\u5708\uff0c\u5b83\u4e0a\u9762\u6709 6 \u4e2a\u9f7f\uff0c\u5206\u522b\u6807\u6ce8\u4e3a 0\uff5e5\uff0c\u8fd9\u4e2a\u53eb\u505a\u8f6c\u5b50\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u662f\u8981\u8f6c\u52a8\u7684\uff0c\u8f6c\u5b50\u7684\u6bcf\u4e2a\u9f7f\u4e0a\u90fd\u5e26\u6709\u6c38\u4e45\u7684\u78c1\u6027\uff0c\u662f\u4e00\u5757\u6c38\u78c1\u4f53\uff0c\u8fd9\u5c31\u662f \u6c38\u78c1\u5f0f \u7684\u6982\u5ff5\u3002\u518d\u770b\u5916\u5708\uff0c\u8fd9\u4e2a\u5c31\u662f\u5b9a\u5b50\uff0c\u5b83\u662f\u4fdd\u6301\u4e0d\u52a8\u7684\uff0c\u5b9e\u9645\u4e0a\u5b83\u662f\u8ddf\u7535\u673a\u7684\u5916\u58f3\u56fa\u5b9a\u5728\u4e00\u8d77\u7684\uff0c\u5b83\u4e0a\u9762\u6709 8 \u4e2a\u9f7f\uff0c\u800c\u6bcf\u4e2a\u9f7f\u4e0a\u90fd\u7f20\u4e0a\u4e86\u4e00\u4e2a\u7ebf\u5708\u7ed5\u7ec4\uff0c\u6b63\u5bf9\u7740\u7684 2 \u4e2a\u9f7f\u4e0a\u7684\u7ed5\u7ec4\u53c8\u662f\u4e32\u8054\u5728\u4e00\u8d77\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b63\u5bf9\u7740\u7684 2 \u4e2a\u7ed5\u7ec4\u603b\u662f\u4f1a\u540c\u65f6\u5bfc\u901a\u6216\u5173\u65ad\u7684\uff0c\u5982\u6b64\u5c31\u5f62\u6210\u4e86 4 \u76f8\uff0c\u5728\u56fe\u4e2d\u5206\u522b\u6807\u6ce8\u4e3a A-B-C-D\uff0c\u8fd9\u5c31\u662f 4\u76f8 \u7684\u6982\u5ff5\u3002 \u6b65\u8fdb\u7535\u673a\u9a71\u52a8\u65b9\u5f0f\u4e09\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff1a \u5355\u56db\u62cd\uff1a \u8fd9\u662f\u6700\u7b80\u5355\u7684\u6b65\u8fdb\u7535\u673a\u9a71\u52a8\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7535\u673a\u5728\u6bcf\u4e2a\u77ac\u95f4\u53ea\u6709\u4e00\u4e2a\u7ebf\u5708\u5bfc\u901a\uff0c\u6d88\u8017\u7535\u529b\u5c0f\u3002\u4f46\u5728\u5207\u6362\u77ac\u95f4\u65f6\u6ca1\u6709\u4efb\u4f55\u7684\u7535\u78c1\u4f5c\u7528\u5728\u8f6c\u5b50\u4e0a\uff0c\u5bb9\u6613\u9020\u6210\u632f\u52a8\uff0c\u4e5f\u5bb9\u6613\u56e0\u4e3a\u60ef\u6027\u800c\u5931\u6b65\uff1b \u53cc\u56db\u62cd \uff1a\u8fd9\u79cd\u65b9\u5f0f\u8f93\u51fa\u7684\u8f6c\u77e9\u8f83\u5927\u4e14\u632f\u52a8\u8f83\u5c11\uff0c\u5207\u6362\u8fc7\u7a0b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u7ebf\u5708\u901a\u7535\u4f5c\u7528\u4e8e\u8f6c\u5b50\uff0c\u4f7f\u5f97\u8f93\u51fa\u7684\u8f6c\u77e9\u8f83\u5927\uff0c\u632f\u52a8\u8f83\u5c0f\uff0c\u4e5f\u6bd4\u5355\u56db\u62cd\u5e73\u7a33\uff0c\u4e0d\u6613\u5931\u6b65\uff1b \u516b\u62cd \uff1a\u7efc\u5408\u4e0a\u8ff0\u4e24\u79cd\u9a71\u52a8\u4fe1\u53f7\uff0c\u4f7f\u7528\u5355\u56db\u62cd\u548c\u53cc\u56db\u62cd\u4ea4\u66ff\u8fdb\u884c\u7684\u65b9\u5f0f\uff0c\u6bcf\u4f20\u9001\u4e00\u4e2a\u52b1\u78c1\u4fe1\u53f7\uff0c\u6b65\u8fdb\u7535\u673a\u524d\u8fdb\u534a\u4e2a\u6b65\u8ddd\u89d2\u3002\u5176\u7279\u70b9\u662f\u5206\u8fa8\u7387\u9ad8\uff0c\u8fd0\u8f6c\u66f4\u52a0\u5e73\u6ed1\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\uff1b \u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e0b\u4ed6\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5047\u5b9a\u7535\u673a\u7684\u8d77\u59cb\u72b6\u6001\u5c31\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9006\u65f6\u9488\u65b9\u5411\u8f6c\u52a8\uff0c\u8d77\u59cb\u65f6\u662f B \u76f8\u7ed5\u7ec4\u7684\u5f00\u5173\u95ed\u5408\uff0cB \u76f8\u7ed5\u7ec4\u5bfc\u901a\uff0c\u90a3\u4e48\u5bfc\u901a\u7535\u6d41\u5c31\u4f1a\u5728\u6b63\u4e0a\u548c\u6b63\u4e0b\u4e24\u4e2a\u5b9a\u5b50\u9f7f\u4e0a\u4ea7\u751f\u78c1\u6027\uff0c\u8fd9\u4e24\u4e2a\u5b9a\u5b50\u9f7f\u4e0a\u7684\u78c1\u6027\u5c31\u4f1a\u5bf9\u8f6c\u5b50\u4e0a\u7684 0 \u548c 3 \u53f7\u9f7f\u4ea7\u751f\u6700\u5f3a\u7684\u5438\u5f15\u529b\uff0c\u5c31\u4f1a\u5982\u56fe\u6240\u793a\u7684\u90a3\u6837\uff0c\u8f6c\u5b50\u7684 0 \u53f7\u9f7f\u5728\u6b63\u4e0a\u30013 \u53f7\u9f7f\u5728\u6b63\u4e0b\u800c\u5904\u4e8e\u5e73\u8861\u72b6\u6001\uff1b\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8f6c\u5b50\u7684 1 \u53f7\u9f7f\u4e0e\u53f3\u4e0a\u7684\u5b9a\u5b50\u9f7f\u4e5f\u5c31\u662f C \u76f8\u7684\u4e00\u4e2a\u7ed5\u7ec4\u5448\u73b0\u4e00\u4e2a\u5f88\u5c0f\u7684\u5939\u89d2\uff0c2 \u53f7\u9f7f\u4e0e\u53f3\u8fb9\u7684\u5b9a\u5b50\u9f7f\u4e5f\u5c31\u662f D \u76f8\u7ed5\u7ec4\u5448\u73b0\u4e00\u4e2a\u7a0d\u5fae\u5927\u4e00\u70b9\u7684\u5939\u89d2\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a B \u76f8\u7ed5\u7ec4\u65ad\u5f00\uff0c\u800c\u4f7f C \u76f8\u7ed5\u7ec4\u5bfc\u901a\uff0c\u53f3\u4e0a\u7684\u5b9a\u5b50\u9f7f\u5c06\u5bf9\u8f6c\u5b50 1 \u53f7\u9f7f\u4ea7\u751f\u6700\u5927\u7684\u5438\u5f15\u529b\uff0c\u800c\u5de6\u4e0b\u7684\u5b9a\u5b50\u9f7f\u5c06\u5bf9\u8f6c\u5b50 4 \u53f7\u9f7f\uff0c\u4ea7\u751f\u6700\u5927\u7684\u5438\u5f15\u529b\uff0c\u5728\u8fd9\u4e2a\u5438\u5f15\u529b\u7684\u4f5c\u7528\u4e0b\uff0c\u8f6c\u5b50 1\u30014 \u53f7\u9f7f\u5c06\u5bf9\u9f50\u5230\u53f3\u4e0a\u548c\u5de6\u4e0b\u7684\u5b9a\u5b50\u9f7f\u4e0a\u800c\u4fdd\u6301\u5e73\u8861\u3002 \u518d\u63a5\u4e0b\u6765\uff0c\u65ad\u5f00 C \u76f8\u7ed5\u7ec4\uff0c\u5bfc\u901a D \u76f8\u7ed5\u7ec4\uff0c\u8fc7\u7a0b\u4e0e\u4e0a\u8ff0\u7684\u60c5\u51b5\u5b8c\u5168\u76f8\u540c\uff0c\u6700\u7ec8\u5c06\u4f7f\u8f6c\u5b50 2\u30015 \u53f7\u9f7f\u4e0e\u5b9a\u5b50 D \u76f8\u7ed5\u7ec4\u5bf9\u9f50\uff0c\u8f6c\u5b50\u53c8\u8f6c\u8fc7\u4e86\u4e0a\u8ff0\u540c\u6837\u7684\u89d2\u5ea6\u3002 \u5f53 A \u76f8\u7ed5\u7ec4\u518d\u6b21\u5bfc\u901a\uff0c\u5373\u5b8c\u6210\u4e00\u4e2a B-C-D-A \u7684\u56db\u8282\u62cd\u64cd\u4f5c\u540e\uff0c\u8f6c\u5b50\u7684 0\u30013 \u53f7\u9f7f\u5c06\u7531\u539f\u6765\u7684\u5bf9\u9f50\u5230\u4e0a\u4e0b 2 \u4e2a\u5b9a\u5b50\u9f7f\uff0c\u800c\u53d8\u4e3a\u4e86\u5bf9\u9f50\u5230\u5de6\u4e0a\u548c\u53f3\u4e0b\u7684\u4e24\u4e2a\u5b9a\u5b50\u9f7f\u4e0a\uff0c\u5373\u8f6c\u5b50\u8f6c\u8fc7\u4e86\u4e00\u4e2a\u5b9a\u5b50\u9f7f\u7684\u89d2\u5ea6\u3002\u4f9d\u6b64\u7c7b\u63a8\uff0c\u518d\u6765\u4e00\u4e2a\u56db\u8282\u62cd\uff0c\u8f6c\u5b50\u5c31\u5c06\u518d\u8f6c\u8fc7\u4e00\u4e2a\u9f7f\u7684\u89d2\u5ea6\uff0c8\u4e2a\u56db\u8282\u62cd\u4ee5\u540e\u8f6c\u5b50\u5c06\u8f6c\u8fc7\u5b8c\u6574\u7684\u4e00\u5708\uff0c\u800c\u5176\u4e2d\u5355\u4e2a\u8282\u62cd\u4f7f\u8f6c\u5b50\u8f6c\u8fc7\u7684\u89d2\u5ea6\u5c31\u5f88\u5bb9\u6613\u8ba1\u7b97\u51fa\u6765\u4e86\uff0c\u5373 360\u00b0/(8 * 4) = 11.25\u00b0 \uff0c\u8fd9\u4e2a\u503c\u5c31\u53eb\u505a \u6b65\u8fdb\u89d2\u5ea6 \u3002\u800c\u4e0a\u8ff0\u8fd9\u79cd\u5de5\u4f5c\u6a21\u5f0f\u5c31\u662f\u6b65\u8fdb\u7535\u673a\u7684 \u5355\u56db\u62cd\u6a21\u5f0f \u3002 \u516b\u62cd \u5c31\u662f\u5728\u5355\u56db\u62cd\u7684\u6bcf\u4e24\u4e2a\u8282\u62cd\u4e4b\u95f4\u518d\u63d2\u5165\u4e00\u4e2a\u53cc\u7ed5\u7ec4\u5bfc\u901a\u7684\u4e2d\u95f4\u8282\u62cd\uff0c\u7ec4\u6210\u516b\u62cd\u6a21\u5f0f\u3002\u6bd4\u5982\uff0c\u5728\u4ece B \u76f8\u5bfc\u901a\u5230 C \u9879\u5bfc\u901a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5047\u5982\u4e00\u4e2a B \u76f8\u548c C \u76f8\u540c\u65f6\u5bfc\u901a\u7684\u8282\u62cd\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u7531\u4e8e B\u3001C \u4e24\u4e2a\u7ed5\u7ec4\u7684\u5b9a\u5b50\u9f7f\u5bf9\u5b83\u4eec\u9644\u8fd1\u7684\u8f6c\u5b50\u9f7f\u540c\u65f6\u4ea7\u751f\u76f8\u540c\u7684\u5438\u5f15\u529b\uff0c\u8fd9\u5c06\u5bfc\u81f4\u8fd9\u4e24\u4e2a\u8f6c\u5b50\u9f7f\u7684\u4e2d\u5fc3\u7ebf\u5bf9\u6bd4\u5230 B\u3001C \u4e24\u4e2a\u7ed5\u7ec4\u7684\u4e2d\u5fc3\u7ebf\u4e0a\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u4f7f\u8f6c\u52a8\u7cbe\u5ea6\u589e\u52a0\u4e86\u4e00\u500d\uff0c\u800c\u8f6c\u5b50\u8f6c\u52a8\u4e00\u5708\u5219\u9700\u8981 8*8=64 \u62cd\u3002 \u53cc\u56db\u62cd \u7684\u5de5\u4f5c\u6a21\u5f0f\u5176\u5b9e\u5c31\u662f\u628a\u516b\u62cd\u6a21\u5f0f\u4e2d\u7684\u4e24\u4e2a\u7ed5\u7ec4\u540c\u65f6\u901a\u7535\u7684\u90a3\u56db\u62cd\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u800c\u820d\u5f03\u6389\u5355\u7ed5\u7ec4\u901a\u7535\u7684\u90a3\u56db\u62cd\u800c\u5df2\u3002\u5176\u6b65\u8fdb\u89d2\u5ea6\u540c\u5355\u56db\u62cd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u7531\u4e8e\u5b83\u662f\u4e24\u4e2a\u7ed5\u7ec4\u540c\u65f6\u5bfc\u901a\uff0c\u6240\u4ee5\u626d\u77e9\u4f1a\u6bd4\u5355\u56db\u62cd\u6a21\u5f0f\u5927\u3002 \u516b\u62cd\u6a21\u5f0f \u662f\u8fd9\u7c7b4\u76f8\u6b65\u8fdb\u7535\u673a\u7684\u6700\u4f73\u5de5\u4f5c\u6a21\u5f0f\uff0c\u80fd\u6700\u5927\u9650\u5ea6\u7684\u53d1\u6325\u7535\u673a\u7684\u5404\u9879\u6027\u80fd\uff0c\u4e5f\u662f\u7edd\u5927\u591a\u6570\u5b9e\u9645\u5de5\u7a0b\u4e2d\u6240\u9009\u62e9\u7684\u6a21\u5f0f\u3002 \u8f6c\u5b50\u8f6c 64 \u5708\uff0c\u6700\u7ec8\u8f93\u51fa\u8f74\u624d\u4f1a\u8f6c\u4e00\u5708\uff0c\u4e5f\u5c31\u662f\u9700\u8981 64\u00d764=4096 \u4e2a\u8282\u62cd\u8f93\u51fa\u8f74\u624d\u8f6c\u8fc7\u4e00\u5708\u30024096 \u4e2a\u8282\u62cd\u8f6c\u52a8\u4e00\u5708\uff0c\u90a3\u4e48\u4e00\u4e2a\u8282\u62cd\u8f6c\u52a8\u7684\u89d2\u5ea6\uff08\u6b65\u8fdb\u89d2\u5ea6\uff09\u5c31\u662f 360/4096 \u5ea6\u3002 \u5355\u7247\u673a\u7684\u7ba1\u811a\u8f93\u51fa\u7535\u6d41\u8f83\u5c0f\uff0c\u53ea\u6709\u96f6\u70b9\u51e0\u4e2a\u6beb\u5b89\uff0c\u5438\u7eb3\u7535\u6ca1\u4e5f\u53ea\u6709\u5341\u51e0\u4e2a\u6beb\u5b89\uff08\u5927\u591a\u6570\u5355\u7247\u673a\u53ea\u6709\u51e0\u4e2a\u6beb\u5b89\uff09\uff0c\u8f93\u51fa\u6700\u9ad8\u7535\u538b\u4e5f\u4e0d\u4f1a\u8d8a\u8fc7 5V\uff0c\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\u5f88\u5c11\u7528\u5355\u7247\u673a\u76f4\u63a5\u9a71\u52a8\u5916\u8bbe\u3002ULN2003 \u7684\u4f5c\u7528\u5c31\u662f\u628a\u5355\u7247\u673a\u7684\u4fe1\u53f7\u8fdb\u884c\u653e\u5927\uff0c\u5438\u7eb3\u7535\u6d41\u53ef\u4ee5\u8fbe\u5230 500mA\uff0c\u8010\u538b\u4e5f\u63d0\u9ad8\u5f88\u591a\uff0c\u57fa\u672c\u80fd\u6ee1\u8db3\u5fae\u578b\u6b65\u8fdb\u7535\u673a\u7684\u9a71\u52a8\u7535\u6d41\u548c\u7535\u538b\u3002 \u5b9e\u9a8c\u4e00\uff1a\u6307\u5b9a\u6b65\u8fdb\u7535\u673a\u8f6c\u52a8\u89d2\u5ea6 \u7b2c\u4e09\u65b9\u5e93\u7684\u4f7f\u7528 \u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aStepperMotor\uff0c\u4fdd\u5b58\u5230libs\u6587\u4ef6\u5939\u4e2d\u3002 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time class StepperMotor: \"\"\" MicroPython \u6b65\u8fdb\u7535\u673a\u63a7\u5236\u7c7b (ULN2003A\u9a71\u52a8) \u9002\u7528\u4e8e 28BYJ-48 \u7b49\u56db\u76f8\u4e94\u7ebf\u6b65\u8fdb\u7535\u673a \u7279\u6027\uff1a - \u652f\u6301\u5168\u6b65\u6a21\u5f0f\uff084\u6b65\u5e8f\u5217\uff09\u548c\u534a\u6b65\u6a21\u5f0f\uff088\u6b65\u5e8f\u5217\uff09 - \u53ef\u7cbe\u786e\u63a7\u5236\u65cb\u8f6c\u89d2\u5ea6\u6216\u6b65\u6570 - \u652f\u6301\u8f6c\u901f\uff08RPM\uff09\u8bbe\u7f6e - \u63d0\u4f9b\u7535\u673a\u91ca\u653e\u529f\u80fd\u4ee5\u51cf\u5c11\u80fd\u8017 \"\"\" # \u534a\u6b65\u63a7\u5236\u5e8f\u5217\uff088\u6b65\u6a21\u5f0f\uff0c\u66f4\u9ad8\u7cbe\u5ea6\uff09 # \u6bcf\u4e2a\u5b50\u5217\u8868\u4ee3\u8868\u4e00\u4e2a\u6b65\u8fdb\u72b6\u6001\uff0c1\u8868\u793a\u7ebf\u5708\u901a\u7535\uff0c0\u8868\u793a\u65ad\u7535 # \u5e8f\u5217\u987a\u5e8f\u5f71\u54cd\u7535\u673a\u65cb\u8f6c\u65b9\u5411 SEQ_HALF_STEP = [ [1, 0, 0, 0], # \u6b651: \u4ec5IN1\u901a\u7535 [1, 1, 0, 0], # \u6b652: IN1+IN2\u901a\u7535 [0, 1, 0, 0], # \u6b653: \u4ec5IN2\u901a\u7535 [0, 1, 1, 0], # \u6b654: IN2+IN3\u901a\u7535 [0, 0, 1, 0], # \u6b655: \u4ec5IN3\u901a\u7535 [0, 0, 1, 1], # \u6b656: IN3+IN4\u901a\u7535 [0, 0, 0, 1], # \u6b657: \u4ec5IN4\u901a\u7535 [1, 0, 0, 1] # \u6b658: IN4+IN1\u901a\u7535 ] # \u5168\u6b65\u63a7\u5236\u5e8f\u5217\uff084\u6b65\u6a21\u5f0f\uff0c\u66f4\u9ad8\u626d\u77e9\uff09 SEQ_FULL_STEP = [ [1, 0, 0, 0], # \u6b651: IN1\u901a\u7535 [0, 1, 0, 0], # \u6b652: IN2\u901a\u7535 [0, 0, 1, 0], # \u6b653: IN3\u901a\u7535 [0, 0, 0, 1] # \u6b654: IN4\u901a\u7535 ] def __init__(self, in1, in2, in3, in4, mode='half'): \"\"\" \u521d\u59cb\u5316\u6b65\u8fdb\u7535\u673a \u53c2\u6570: in1, in2, in3, in4 (int): \u8fde\u63a5ULN2003A\u76844\u4e2aGPIO\u5f15\u811a\u7f16\u53f7 mode (str): 'half'=\u534a\u6b65\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff0c\u66f4\u5e73\u6ed1\uff09\uff0c'full'=\u5168\u6b65\u6a21\u5f0f\uff08\u626d\u77e9\u66f4\u5927\uff09 \"\"\" # \u521d\u59cb\u53164\u4e2a\u63a7\u5236\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f self.pins = [ Pin(in1, Pin.OUT), Pin(in2, Pin.OUT), Pin(in3, Pin.OUT), Pin(in4, Pin.OUT) ] # \u8bbe\u7f6e\u6b65\u8fdb\u6a21\u5f0f self.mode = mode self.step_seq = self.SEQ_HALF_STEP if mode == 'half' else self.SEQ_FULL_STEP self.step_count = len(self.step_seq) # \u6b65\u8fdb\u5e8f\u5217\u957f\u5ea6\uff084\u62168\uff09 # \u7535\u673a\u72b6\u6001\u8ddf\u8e2a self.current_step = 0 # \u5f53\u524d\u6b65\u8fdb\u4f4d\u7f6e\uff080\u5230step_count-1\uff09 self.direction = 1 # \u65cb\u8f6c\u65b9\u5411\uff1a1=\u987a\u65f6\u9488\uff0c-1=\u9006\u65f6\u9488 # 28BYJ-48\u7535\u673a\u53c2\u6570\uff08\u5b9e\u9645\u6b65\u6570\u9700\u6839\u636e\u51cf\u901f\u6bd4\u8ba1\u7b97\uff09 # \u5168\u6b65\u6a21\u5f0f\uff1a64\u6b65/\u8f6c \u00d7 32\u9f7f\u8f6e\u51cf\u901f\u6bd4 = 2048\u6b65/\u8f6c # \u534a\u6b65\u6a21\u5f0f\uff1a64\u00d72\u6b65/\u8f6c \u00d7 32\u51cf\u901f\u6bd4 = 4096\u6b65/\u8f6c self.steps_per_rev = 4096 if mode == 'half' else 2048 def set_step(self, step): \"\"\" \u8bbe\u7f6e\u5f53\u524d\u6b65\u8fdb\u72b6\u6001 \u53c2\u6570: step (int): \u6b65\u8fdb\u5e8f\u5217\u7d22\u5f15\uff080\u5230step_count-1\uff09 \"\"\" # \u5c06\u6b65\u8fdb\u5e8f\u5217\u5e94\u7528\u5230GPIO\u5f15\u811a for i in range(4): self.pins[i].value(self.step_seq[step][i]) def step(self, steps, delay_ms=2): \"\"\" \u9a71\u52a8\u7535\u673a\u6b65\u8fdb\u6307\u5b9a\u6b65\u6570 \u53c2\u6570: steps (int): \u6b65\u6570\uff08\u6b63\u6570=\u987a\u65f6\u9488\uff0c\u8d1f\u6570=\u9006\u65f6\u9488\uff09 delay_ms (int): \u6b65\u95f4\u5ef6\u8fdf\u65f6\u95f4\uff08\u6beb\u79d2\uff09\uff0c\u63a7\u5236\u8f6c\u901f \"\"\" self.direction = 1 if steps > 0 else -1 steps = abs(steps) # \u53d6\u7edd\u5bf9\u503c\u65b9\u4fbf\u5faa\u73af for _ in range(steps): # \u8ba1\u7b97\u4e0b\u4e00\u6b65\u4f4d\u7f6e\uff08\u5faa\u73af\u6b65\u8fdb\u5e8f\u5217\uff09 self.current_step = (self.current_step + self.direction) % self.step_count self.set_step(self.current_step) time.sleep_ms(delay_ms) # \u6b65\u8fdb\u5b8c\u6210\u540e\u91ca\u653e\u7535\u673a\uff08\u53ef\u9009\uff09 self.release() def rotate(self, degrees, delay_ms=2): \"\"\" \u65cb\u8f6c\u6307\u5b9a\u89d2\u5ea6 \u53c2\u6570: degrees (float): \u89d2\u5ea6\uff08\u6b63\u6570=\u987a\u65f6\u9488\uff0c\u8d1f\u6570=\u9006\u65f6\u9488\uff09 delay_ms (int): \u6b65\u95f4\u5ef6\u8fdf\uff08\u6beb\u79d2\uff09 \"\"\" # \u8ba1\u7b97\u6240\u9700\u6b65\u6570\uff1a\u6b65\u6570 = (\u89d2\u5ea6/360) \u00d7 \u6bcf\u8f6c\u6b65\u6570 steps = int(self.steps_per_rev * degrees / 360) self.step(steps, delay_ms) def set_speed(self, rpm): \"\"\" \u8ba1\u7b97\u6307\u5b9a\u8f6c\u901f\u5bf9\u5e94\u7684\u6b65\u95f4\u5ef6\u8fdf \u53c2\u6570: rpm (float): \u671f\u671b\u8f6c\u901f\uff08\u8f6c/\u5206\u949f\uff09 \u8fd4\u56de: int: \u5bf9\u5e94\u7684\u6b65\u95f4\u5ef6\u8fdf\uff08\u6beb\u79d2\uff09 \"\"\" if rpm <= 0: return 0 # \u8ba1\u7b97\u6bcf\u6b65\u65f6\u95f4\uff08\u79d2\uff09\uff1a60\u79d2 \u00f7 (\u6bcf\u8f6c\u6b65\u6570 \u00d7 RPM) step_delay_sec = 60.0 / (self.steps_per_rev * rpm) return int(step_delay_sec * 1000) # \u8f6c\u6362\u4e3a\u6beb\u79d2 def release(self): \"\"\"\u91ca\u653e\u7535\u673a\uff08\u5173\u95ed\u6240\u6709\u7ebf\u5708\uff0c\u51cf\u5c11\u80fd\u8017\u548c\u53d1\u70ed\uff09\"\"\" for pin in self.pins: pin.value(0) \u63a5\u4e0b\u6765\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u5bfc\u5165\u521a\u624d\u7684\u5e93\u6587\u4ef6\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 # \u5bfc\u5165\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 from libs.StepperMotor import StepperMotor # \u521d\u59cb\u5316\u7535\u673a\uff08\u524d4\u4e2a\u53c2\u6570\u4e3a\uff1a\u5bf9\u5e94\u7684\u5f15\u811a\uff1b\u7b2c\u4e94\u4e2a\u53c2\u6570\uff1a\u9ed8\u8ba4\uff0c\u66f4\u5e73\u6ed1\uff09 motor = StepperMotor(4, 12, 13, 14, mode='half') \"\"\" \u65cb\u8f6c\u6307\u5b9a\u89d2\u5ea6 \u53c2\u6570: degrees (float): \u89d2\u5ea6\uff08\u6b63\u6570=\u987a\u65f6\u9488\uff0c\u8d1f\u6570=\u9006\u65f6\u9488\uff09 delay_ms (int): \u6b65\u95f4\u5ef6\u8fdf\uff08\u6beb\u79d2\uff09\uff0c\u5ef6\u65f6\u8d8a\u77ed\uff0c\u8f6c\u901f\u8d8a\u5feb \"\"\" motor.rotate(90, delay_ms= 2) # \u65cb\u8f6c90\u5ea6\uff08\u901f\u5ea6\u7ea610RPM\uff09","title":"10.\u6b65\u8fdb\u7535\u673a"},{"location":"MicroPython/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/#_1","text":"","title":"\u6b65\u8fdb\u7535\u673a"},{"location":"MicroPython/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 \u6b65\u8fdb\u7535\u673a 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6b65\u8fdb\u7535\u673a 4 2 \u6b65\u8fdb\u7535\u673a 12 3 \u6b65\u8fdb\u7535\u673a 13 4 \u6b65\u8fdb\u7535\u673a 14 \u6b65\u8fdb\u7535\u673a\u4ecb\u7ecd \u6b65\u8fdb\u7535\u673a\u662f\u4e00\u79cd\u7528\u7535\u8109\u51b2\u63a7\u5236\u8fd0\u8f6c\u7684\u7535\u52a8\u673a\uff0c\u5e26\u6bcf\u8f93\u5165\u4e00\u4e2a\u7535\u8109\u51b2\uff0c\u5c31\u4f1a\u8f6c\u52a8\u4e00\u5b9a\u7684\u89d2\u5ea6\uff0c\u56e0\u6b64\u6b65\u8fdb\u7535\u673a\u53c8\u79f0\u4e3a\u8109\u51b2\u7535\u52a8\u673a\u3002\u6b65\u8fdb\u7535\u673a\u7684\u8f6c\u901f\u4e0e\u8109\u51b2\u9891\u7387\u6210\u6b63\u6bd4\u3002\u8109\u51b2\u9891\u7387\u8d8a\u9ad8\uff0c\u5355\u4f4d\u65f6\u95f4\u5185\u8f93\u5165\u7535\u52a8\u673a\u7684\u8109\u51b2\u4e2a\u6570\u8d8a\u591a\uff0c\u8f6c\u52a8\u7684\u89d2\u5ea6\u8d8a\u5927\uff0c\u5373\u8f6c\u901f\u8d8a\u5feb\u3002 \u4e0e\u6240\u6709\u7535\u673a\u4e00\u6837\uff0c\u6b65\u8fdb\u7535\u673a\u4e5f\u5305\u62ec\u56fa\u5b9a\u90e8\u5206\uff08\u5b9a\u5b50\uff09\u548c\u6d3b\u52a8\u90e8\u5206\uff08\u8f6c\u5b50\uff09\u3002\u5b9a\u5b50\u4e0a\u6709\u7f20\u7ed5\u4e86\u7ebf\u5708\u7684\u9f7f\u8f6e\u72b6\u7a81\u8d77\uff0c\u800c\u8f6c\u5b50\u4e3a\u6c38\u78c1\u4f53\u6216\u53ef\u53d8\u78c1\u963b\u94c1\u82af\u3002\u7a0d\u540e\u6211\u4eec\u5c06\u66f4\u6df1\u5165\u5730\u4ecb\u7ecd\u4e0d\u540c\u7684\u8f6c\u5b50\u7ed3\u6784\u3002 \u6b65\u8fdb\u7535\u673a\u7684\u57fa\u672c\u5de5\u4f5c\u539f\u7406\u4e3a\uff1a \u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u5b9a\u5b50\u76f8\u4f4d\u901a\u7535\uff0c\u7ebf\u5708\u4e2d\u901a\u8fc7\u7684\u7535\u6d41\u4f1a\u4ea7\u751f\u78c1\u573a\uff0c\u800c\u8f6c\u5b50\u4f1a\u4e0e\u8be5\u78c1\u573a\u5bf9\u9f50\uff1b \u4f9d\u6b21\u7ed9\u4e0d\u540c\u7684\u76f8\u4f4d\u65bd\u52a0\u7535\u538b\uff0c\u8f6c\u5b50\u5c06\u65cb\u8f6c\u7279\u5b9a\u7684\u89d2\u5ea6\u5e76\u6700\u7ec8\u5230\u8fbe\u9700\u8981\u7684\u4f4d\u7f6e\u3002 \u4e0b\u56fe\u663e\u793a\u4e86\u5176\u5de5\u4f5c\u539f\u7406\u3002\u9996\u5148\uff0c\u7ebf\u5708 A \u901a\u7535\u5e76\u4ea7\u751f\u78c1\u573a\uff0c\u8f6c\u5b50\u4e0e\u8be5\u78c1\u573a\u5bf9\u9f50\uff1b\u7ebf\u5708 B \u901a\u7535\u540e\uff0c\u8f6c\u5b50\u987a\u65f6\u9488\u65cb\u8f6c 60\u00b0 \u4ee5\u4e0e\u65b0\u7684\u78c1\u573a\u5bf9\u9f50\uff1b\u7ebf\u5708 C \u901a\u7535\u540e\u4e5f\u4f1a\u51fa\u73b0\u540c\u6837\u7684\u60c5\u51b5\u3002\u4e0b\u56fe\u4e2d\u5b9a\u5b50\u5c0f\u9f7f\u7684\u989c\u8272\u6307\u793a\u51fa\u5b9a\u5b50\u7ed5\u7ec4\u4ea7\u751f\u7684\u78c1\u573a\u65b9\u5411\u3002 \u6211\u4eec\u4eca\u5929\u5b9e\u9a8c\u7528\u5230\u7684\u662f 28BYJ-48 \u6b65\u8fdb\u7535\u673a\uff0c28BYJ-48 \u542b\u4e49\uff1a 28 \u6307\u7684\u662f\u7535\u673a\u6700\u5927\u5916\u5f84\uff0c B \u6307\u7684\u662f\u6b65\u8fdb\u5f0f\u7535\u673a\uff0c Y \u6307\u7684\u662f\u6c38\u78c1\u5f0f\u7535\u673a\uff0c J \u6307\u7684\u662f\u51cf\u901f\u578b\u7535\u673a\uff0c 48 \u8868\u793a\u53ef\u4ee5\u56db\u76f8\u516b\u62cd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c28BYJ-48 \u7684\u542b\u4e49\u4e3a\u5916\u5f84 28 \u6beb\u7c73\u56db\u76f8\u516b\u62cd\u5f0f\u6c38\u78c1\u51cf\u901f\u578b\u6b65\u8fdb\u7535\u673a\u3002 \u9996\u5148\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u662f 4\u76f8\u6c38\u78c1\u5f0f \uff0c28BYJ-48 \u7684\u5185\u90e8\u7ed3\u6784\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\u3002\u5148\u770b\u91cc\u5708\uff0c\u5b83\u4e0a\u9762\u6709 6 \u4e2a\u9f7f\uff0c\u5206\u522b\u6807\u6ce8\u4e3a 0\uff5e5\uff0c\u8fd9\u4e2a\u53eb\u505a\u8f6c\u5b50\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u662f\u8981\u8f6c\u52a8\u7684\uff0c\u8f6c\u5b50\u7684\u6bcf\u4e2a\u9f7f\u4e0a\u90fd\u5e26\u6709\u6c38\u4e45\u7684\u78c1\u6027\uff0c\u662f\u4e00\u5757\u6c38\u78c1\u4f53\uff0c\u8fd9\u5c31\u662f \u6c38\u78c1\u5f0f \u7684\u6982\u5ff5\u3002\u518d\u770b\u5916\u5708\uff0c\u8fd9\u4e2a\u5c31\u662f\u5b9a\u5b50\uff0c\u5b83\u662f\u4fdd\u6301\u4e0d\u52a8\u7684\uff0c\u5b9e\u9645\u4e0a\u5b83\u662f\u8ddf\u7535\u673a\u7684\u5916\u58f3\u56fa\u5b9a\u5728\u4e00\u8d77\u7684\uff0c\u5b83\u4e0a\u9762\u6709 8 \u4e2a\u9f7f\uff0c\u800c\u6bcf\u4e2a\u9f7f\u4e0a\u90fd\u7f20\u4e0a\u4e86\u4e00\u4e2a\u7ebf\u5708\u7ed5\u7ec4\uff0c\u6b63\u5bf9\u7740\u7684 2 \u4e2a\u9f7f\u4e0a\u7684\u7ed5\u7ec4\u53c8\u662f\u4e32\u8054\u5728\u4e00\u8d77\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b63\u5bf9\u7740\u7684 2 \u4e2a\u7ed5\u7ec4\u603b\u662f\u4f1a\u540c\u65f6\u5bfc\u901a\u6216\u5173\u65ad\u7684\uff0c\u5982\u6b64\u5c31\u5f62\u6210\u4e86 4 \u76f8\uff0c\u5728\u56fe\u4e2d\u5206\u522b\u6807\u6ce8\u4e3a A-B-C-D\uff0c\u8fd9\u5c31\u662f 4\u76f8 \u7684\u6982\u5ff5\u3002 \u6b65\u8fdb\u7535\u673a\u9a71\u52a8\u65b9\u5f0f\u4e09\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff1a \u5355\u56db\u62cd\uff1a \u8fd9\u662f\u6700\u7b80\u5355\u7684\u6b65\u8fdb\u7535\u673a\u9a71\u52a8\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7535\u673a\u5728\u6bcf\u4e2a\u77ac\u95f4\u53ea\u6709\u4e00\u4e2a\u7ebf\u5708\u5bfc\u901a\uff0c\u6d88\u8017\u7535\u529b\u5c0f\u3002\u4f46\u5728\u5207\u6362\u77ac\u95f4\u65f6\u6ca1\u6709\u4efb\u4f55\u7684\u7535\u78c1\u4f5c\u7528\u5728\u8f6c\u5b50\u4e0a\uff0c\u5bb9\u6613\u9020\u6210\u632f\u52a8\uff0c\u4e5f\u5bb9\u6613\u56e0\u4e3a\u60ef\u6027\u800c\u5931\u6b65\uff1b \u53cc\u56db\u62cd \uff1a\u8fd9\u79cd\u65b9\u5f0f\u8f93\u51fa\u7684\u8f6c\u77e9\u8f83\u5927\u4e14\u632f\u52a8\u8f83\u5c11\uff0c\u5207\u6362\u8fc7\u7a0b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u7ebf\u5708\u901a\u7535\u4f5c\u7528\u4e8e\u8f6c\u5b50\uff0c\u4f7f\u5f97\u8f93\u51fa\u7684\u8f6c\u77e9\u8f83\u5927\uff0c\u632f\u52a8\u8f83\u5c0f\uff0c\u4e5f\u6bd4\u5355\u56db\u62cd\u5e73\u7a33\uff0c\u4e0d\u6613\u5931\u6b65\uff1b \u516b\u62cd \uff1a\u7efc\u5408\u4e0a\u8ff0\u4e24\u79cd\u9a71\u52a8\u4fe1\u53f7\uff0c\u4f7f\u7528\u5355\u56db\u62cd\u548c\u53cc\u56db\u62cd\u4ea4\u66ff\u8fdb\u884c\u7684\u65b9\u5f0f\uff0c\u6bcf\u4f20\u9001\u4e00\u4e2a\u52b1\u78c1\u4fe1\u53f7\uff0c\u6b65\u8fdb\u7535\u673a\u524d\u8fdb\u534a\u4e2a\u6b65\u8ddd\u89d2\u3002\u5176\u7279\u70b9\u662f\u5206\u8fa8\u7387\u9ad8\uff0c\u8fd0\u8f6c\u66f4\u52a0\u5e73\u6ed1\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\uff1b \u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e0b\u4ed6\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5047\u5b9a\u7535\u673a\u7684\u8d77\u59cb\u72b6\u6001\u5c31\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9006\u65f6\u9488\u65b9\u5411\u8f6c\u52a8\uff0c\u8d77\u59cb\u65f6\u662f B \u76f8\u7ed5\u7ec4\u7684\u5f00\u5173\u95ed\u5408\uff0cB \u76f8\u7ed5\u7ec4\u5bfc\u901a\uff0c\u90a3\u4e48\u5bfc\u901a\u7535\u6d41\u5c31\u4f1a\u5728\u6b63\u4e0a\u548c\u6b63\u4e0b\u4e24\u4e2a\u5b9a\u5b50\u9f7f\u4e0a\u4ea7\u751f\u78c1\u6027\uff0c\u8fd9\u4e24\u4e2a\u5b9a\u5b50\u9f7f\u4e0a\u7684\u78c1\u6027\u5c31\u4f1a\u5bf9\u8f6c\u5b50\u4e0a\u7684 0 \u548c 3 \u53f7\u9f7f\u4ea7\u751f\u6700\u5f3a\u7684\u5438\u5f15\u529b\uff0c\u5c31\u4f1a\u5982\u56fe\u6240\u793a\u7684\u90a3\u6837\uff0c\u8f6c\u5b50\u7684 0 \u53f7\u9f7f\u5728\u6b63\u4e0a\u30013 \u53f7\u9f7f\u5728\u6b63\u4e0b\u800c\u5904\u4e8e\u5e73\u8861\u72b6\u6001\uff1b\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8f6c\u5b50\u7684 1 \u53f7\u9f7f\u4e0e\u53f3\u4e0a\u7684\u5b9a\u5b50\u9f7f\u4e5f\u5c31\u662f C \u76f8\u7684\u4e00\u4e2a\u7ed5\u7ec4\u5448\u73b0\u4e00\u4e2a\u5f88\u5c0f\u7684\u5939\u89d2\uff0c2 \u53f7\u9f7f\u4e0e\u53f3\u8fb9\u7684\u5b9a\u5b50\u9f7f\u4e5f\u5c31\u662f D \u76f8\u7ed5\u7ec4\u5448\u73b0\u4e00\u4e2a\u7a0d\u5fae\u5927\u4e00\u70b9\u7684\u5939\u89d2\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a B \u76f8\u7ed5\u7ec4\u65ad\u5f00\uff0c\u800c\u4f7f C \u76f8\u7ed5\u7ec4\u5bfc\u901a\uff0c\u53f3\u4e0a\u7684\u5b9a\u5b50\u9f7f\u5c06\u5bf9\u8f6c\u5b50 1 \u53f7\u9f7f\u4ea7\u751f\u6700\u5927\u7684\u5438\u5f15\u529b\uff0c\u800c\u5de6\u4e0b\u7684\u5b9a\u5b50\u9f7f\u5c06\u5bf9\u8f6c\u5b50 4 \u53f7\u9f7f\uff0c\u4ea7\u751f\u6700\u5927\u7684\u5438\u5f15\u529b\uff0c\u5728\u8fd9\u4e2a\u5438\u5f15\u529b\u7684\u4f5c\u7528\u4e0b\uff0c\u8f6c\u5b50 1\u30014 \u53f7\u9f7f\u5c06\u5bf9\u9f50\u5230\u53f3\u4e0a\u548c\u5de6\u4e0b\u7684\u5b9a\u5b50\u9f7f\u4e0a\u800c\u4fdd\u6301\u5e73\u8861\u3002 \u518d\u63a5\u4e0b\u6765\uff0c\u65ad\u5f00 C \u76f8\u7ed5\u7ec4\uff0c\u5bfc\u901a D \u76f8\u7ed5\u7ec4\uff0c\u8fc7\u7a0b\u4e0e\u4e0a\u8ff0\u7684\u60c5\u51b5\u5b8c\u5168\u76f8\u540c\uff0c\u6700\u7ec8\u5c06\u4f7f\u8f6c\u5b50 2\u30015 \u53f7\u9f7f\u4e0e\u5b9a\u5b50 D \u76f8\u7ed5\u7ec4\u5bf9\u9f50\uff0c\u8f6c\u5b50\u53c8\u8f6c\u8fc7\u4e86\u4e0a\u8ff0\u540c\u6837\u7684\u89d2\u5ea6\u3002 \u5f53 A \u76f8\u7ed5\u7ec4\u518d\u6b21\u5bfc\u901a\uff0c\u5373\u5b8c\u6210\u4e00\u4e2a B-C-D-A \u7684\u56db\u8282\u62cd\u64cd\u4f5c\u540e\uff0c\u8f6c\u5b50\u7684 0\u30013 \u53f7\u9f7f\u5c06\u7531\u539f\u6765\u7684\u5bf9\u9f50\u5230\u4e0a\u4e0b 2 \u4e2a\u5b9a\u5b50\u9f7f\uff0c\u800c\u53d8\u4e3a\u4e86\u5bf9\u9f50\u5230\u5de6\u4e0a\u548c\u53f3\u4e0b\u7684\u4e24\u4e2a\u5b9a\u5b50\u9f7f\u4e0a\uff0c\u5373\u8f6c\u5b50\u8f6c\u8fc7\u4e86\u4e00\u4e2a\u5b9a\u5b50\u9f7f\u7684\u89d2\u5ea6\u3002\u4f9d\u6b64\u7c7b\u63a8\uff0c\u518d\u6765\u4e00\u4e2a\u56db\u8282\u62cd\uff0c\u8f6c\u5b50\u5c31\u5c06\u518d\u8f6c\u8fc7\u4e00\u4e2a\u9f7f\u7684\u89d2\u5ea6\uff0c8\u4e2a\u56db\u8282\u62cd\u4ee5\u540e\u8f6c\u5b50\u5c06\u8f6c\u8fc7\u5b8c\u6574\u7684\u4e00\u5708\uff0c\u800c\u5176\u4e2d\u5355\u4e2a\u8282\u62cd\u4f7f\u8f6c\u5b50\u8f6c\u8fc7\u7684\u89d2\u5ea6\u5c31\u5f88\u5bb9\u6613\u8ba1\u7b97\u51fa\u6765\u4e86\uff0c\u5373 360\u00b0/(8 * 4) = 11.25\u00b0 \uff0c\u8fd9\u4e2a\u503c\u5c31\u53eb\u505a \u6b65\u8fdb\u89d2\u5ea6 \u3002\u800c\u4e0a\u8ff0\u8fd9\u79cd\u5de5\u4f5c\u6a21\u5f0f\u5c31\u662f\u6b65\u8fdb\u7535\u673a\u7684 \u5355\u56db\u62cd\u6a21\u5f0f \u3002 \u516b\u62cd \u5c31\u662f\u5728\u5355\u56db\u62cd\u7684\u6bcf\u4e24\u4e2a\u8282\u62cd\u4e4b\u95f4\u518d\u63d2\u5165\u4e00\u4e2a\u53cc\u7ed5\u7ec4\u5bfc\u901a\u7684\u4e2d\u95f4\u8282\u62cd\uff0c\u7ec4\u6210\u516b\u62cd\u6a21\u5f0f\u3002\u6bd4\u5982\uff0c\u5728\u4ece B \u76f8\u5bfc\u901a\u5230 C \u9879\u5bfc\u901a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5047\u5982\u4e00\u4e2a B \u76f8\u548c C \u76f8\u540c\u65f6\u5bfc\u901a\u7684\u8282\u62cd\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u7531\u4e8e B\u3001C \u4e24\u4e2a\u7ed5\u7ec4\u7684\u5b9a\u5b50\u9f7f\u5bf9\u5b83\u4eec\u9644\u8fd1\u7684\u8f6c\u5b50\u9f7f\u540c\u65f6\u4ea7\u751f\u76f8\u540c\u7684\u5438\u5f15\u529b\uff0c\u8fd9\u5c06\u5bfc\u81f4\u8fd9\u4e24\u4e2a\u8f6c\u5b50\u9f7f\u7684\u4e2d\u5fc3\u7ebf\u5bf9\u6bd4\u5230 B\u3001C \u4e24\u4e2a\u7ed5\u7ec4\u7684\u4e2d\u5fc3\u7ebf\u4e0a\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u4f7f\u8f6c\u52a8\u7cbe\u5ea6\u589e\u52a0\u4e86\u4e00\u500d\uff0c\u800c\u8f6c\u5b50\u8f6c\u52a8\u4e00\u5708\u5219\u9700\u8981 8*8=64 \u62cd\u3002 \u53cc\u56db\u62cd \u7684\u5de5\u4f5c\u6a21\u5f0f\u5176\u5b9e\u5c31\u662f\u628a\u516b\u62cd\u6a21\u5f0f\u4e2d\u7684\u4e24\u4e2a\u7ed5\u7ec4\u540c\u65f6\u901a\u7535\u7684\u90a3\u56db\u62cd\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u800c\u820d\u5f03\u6389\u5355\u7ed5\u7ec4\u901a\u7535\u7684\u90a3\u56db\u62cd\u800c\u5df2\u3002\u5176\u6b65\u8fdb\u89d2\u5ea6\u540c\u5355\u56db\u62cd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u7531\u4e8e\u5b83\u662f\u4e24\u4e2a\u7ed5\u7ec4\u540c\u65f6\u5bfc\u901a\uff0c\u6240\u4ee5\u626d\u77e9\u4f1a\u6bd4\u5355\u56db\u62cd\u6a21\u5f0f\u5927\u3002 \u516b\u62cd\u6a21\u5f0f \u662f\u8fd9\u7c7b4\u76f8\u6b65\u8fdb\u7535\u673a\u7684\u6700\u4f73\u5de5\u4f5c\u6a21\u5f0f\uff0c\u80fd\u6700\u5927\u9650\u5ea6\u7684\u53d1\u6325\u7535\u673a\u7684\u5404\u9879\u6027\u80fd\uff0c\u4e5f\u662f\u7edd\u5927\u591a\u6570\u5b9e\u9645\u5de5\u7a0b\u4e2d\u6240\u9009\u62e9\u7684\u6a21\u5f0f\u3002 \u8f6c\u5b50\u8f6c 64 \u5708\uff0c\u6700\u7ec8\u8f93\u51fa\u8f74\u624d\u4f1a\u8f6c\u4e00\u5708\uff0c\u4e5f\u5c31\u662f\u9700\u8981 64\u00d764=4096 \u4e2a\u8282\u62cd\u8f93\u51fa\u8f74\u624d\u8f6c\u8fc7\u4e00\u5708\u30024096 \u4e2a\u8282\u62cd\u8f6c\u52a8\u4e00\u5708\uff0c\u90a3\u4e48\u4e00\u4e2a\u8282\u62cd\u8f6c\u52a8\u7684\u89d2\u5ea6\uff08\u6b65\u8fdb\u89d2\u5ea6\uff09\u5c31\u662f 360/4096 \u5ea6\u3002 \u5355\u7247\u673a\u7684\u7ba1\u811a\u8f93\u51fa\u7535\u6d41\u8f83\u5c0f\uff0c\u53ea\u6709\u96f6\u70b9\u51e0\u4e2a\u6beb\u5b89\uff0c\u5438\u7eb3\u7535\u6ca1\u4e5f\u53ea\u6709\u5341\u51e0\u4e2a\u6beb\u5b89\uff08\u5927\u591a\u6570\u5355\u7247\u673a\u53ea\u6709\u51e0\u4e2a\u6beb\u5b89\uff09\uff0c\u8f93\u51fa\u6700\u9ad8\u7535\u538b\u4e5f\u4e0d\u4f1a\u8d8a\u8fc7 5V\uff0c\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\u5f88\u5c11\u7528\u5355\u7247\u673a\u76f4\u63a5\u9a71\u52a8\u5916\u8bbe\u3002ULN2003 \u7684\u4f5c\u7528\u5c31\u662f\u628a\u5355\u7247\u673a\u7684\u4fe1\u53f7\u8fdb\u884c\u653e\u5927\uff0c\u5438\u7eb3\u7535\u6d41\u53ef\u4ee5\u8fbe\u5230 500mA\uff0c\u8010\u538b\u4e5f\u63d0\u9ad8\u5f88\u591a\uff0c\u57fa\u672c\u80fd\u6ee1\u8db3\u5fae\u578b\u6b65\u8fdb\u7535\u673a\u7684\u9a71\u52a8\u7535\u6d41\u548c\u7535\u538b\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/#_3","text":"\u7b2c\u4e09\u65b9\u5e93\u7684\u4f7f\u7528 \u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aStepperMotor\uff0c\u4fdd\u5b58\u5230libs\u6587\u4ef6\u5939\u4e2d\u3002 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time class StepperMotor: \"\"\" MicroPython \u6b65\u8fdb\u7535\u673a\u63a7\u5236\u7c7b (ULN2003A\u9a71\u52a8) \u9002\u7528\u4e8e 28BYJ-48 \u7b49\u56db\u76f8\u4e94\u7ebf\u6b65\u8fdb\u7535\u673a \u7279\u6027\uff1a - \u652f\u6301\u5168\u6b65\u6a21\u5f0f\uff084\u6b65\u5e8f\u5217\uff09\u548c\u534a\u6b65\u6a21\u5f0f\uff088\u6b65\u5e8f\u5217\uff09 - \u53ef\u7cbe\u786e\u63a7\u5236\u65cb\u8f6c\u89d2\u5ea6\u6216\u6b65\u6570 - \u652f\u6301\u8f6c\u901f\uff08RPM\uff09\u8bbe\u7f6e - \u63d0\u4f9b\u7535\u673a\u91ca\u653e\u529f\u80fd\u4ee5\u51cf\u5c11\u80fd\u8017 \"\"\" # \u534a\u6b65\u63a7\u5236\u5e8f\u5217\uff088\u6b65\u6a21\u5f0f\uff0c\u66f4\u9ad8\u7cbe\u5ea6\uff09 # \u6bcf\u4e2a\u5b50\u5217\u8868\u4ee3\u8868\u4e00\u4e2a\u6b65\u8fdb\u72b6\u6001\uff0c1\u8868\u793a\u7ebf\u5708\u901a\u7535\uff0c0\u8868\u793a\u65ad\u7535 # \u5e8f\u5217\u987a\u5e8f\u5f71\u54cd\u7535\u673a\u65cb\u8f6c\u65b9\u5411 SEQ_HALF_STEP = [ [1, 0, 0, 0], # \u6b651: \u4ec5IN1\u901a\u7535 [1, 1, 0, 0], # \u6b652: IN1+IN2\u901a\u7535 [0, 1, 0, 0], # \u6b653: \u4ec5IN2\u901a\u7535 [0, 1, 1, 0], # \u6b654: IN2+IN3\u901a\u7535 [0, 0, 1, 0], # \u6b655: \u4ec5IN3\u901a\u7535 [0, 0, 1, 1], # \u6b656: IN3+IN4\u901a\u7535 [0, 0, 0, 1], # \u6b657: \u4ec5IN4\u901a\u7535 [1, 0, 0, 1] # \u6b658: IN4+IN1\u901a\u7535 ] # \u5168\u6b65\u63a7\u5236\u5e8f\u5217\uff084\u6b65\u6a21\u5f0f\uff0c\u66f4\u9ad8\u626d\u77e9\uff09 SEQ_FULL_STEP = [ [1, 0, 0, 0], # \u6b651: IN1\u901a\u7535 [0, 1, 0, 0], # \u6b652: IN2\u901a\u7535 [0, 0, 1, 0], # \u6b653: IN3\u901a\u7535 [0, 0, 0, 1] # \u6b654: IN4\u901a\u7535 ] def __init__(self, in1, in2, in3, in4, mode='half'): \"\"\" \u521d\u59cb\u5316\u6b65\u8fdb\u7535\u673a \u53c2\u6570: in1, in2, in3, in4 (int): \u8fde\u63a5ULN2003A\u76844\u4e2aGPIO\u5f15\u811a\u7f16\u53f7 mode (str): 'half'=\u534a\u6b65\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff0c\u66f4\u5e73\u6ed1\uff09\uff0c'full'=\u5168\u6b65\u6a21\u5f0f\uff08\u626d\u77e9\u66f4\u5927\uff09 \"\"\" # \u521d\u59cb\u53164\u4e2a\u63a7\u5236\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f self.pins = [ Pin(in1, Pin.OUT), Pin(in2, Pin.OUT), Pin(in3, Pin.OUT), Pin(in4, Pin.OUT) ] # \u8bbe\u7f6e\u6b65\u8fdb\u6a21\u5f0f self.mode = mode self.step_seq = self.SEQ_HALF_STEP if mode == 'half' else self.SEQ_FULL_STEP self.step_count = len(self.step_seq) # \u6b65\u8fdb\u5e8f\u5217\u957f\u5ea6\uff084\u62168\uff09 # \u7535\u673a\u72b6\u6001\u8ddf\u8e2a self.current_step = 0 # \u5f53\u524d\u6b65\u8fdb\u4f4d\u7f6e\uff080\u5230step_count-1\uff09 self.direction = 1 # \u65cb\u8f6c\u65b9\u5411\uff1a1=\u987a\u65f6\u9488\uff0c-1=\u9006\u65f6\u9488 # 28BYJ-48\u7535\u673a\u53c2\u6570\uff08\u5b9e\u9645\u6b65\u6570\u9700\u6839\u636e\u51cf\u901f\u6bd4\u8ba1\u7b97\uff09 # \u5168\u6b65\u6a21\u5f0f\uff1a64\u6b65/\u8f6c \u00d7 32\u9f7f\u8f6e\u51cf\u901f\u6bd4 = 2048\u6b65/\u8f6c # \u534a\u6b65\u6a21\u5f0f\uff1a64\u00d72\u6b65/\u8f6c \u00d7 32\u51cf\u901f\u6bd4 = 4096\u6b65/\u8f6c self.steps_per_rev = 4096 if mode == 'half' else 2048 def set_step(self, step): \"\"\" \u8bbe\u7f6e\u5f53\u524d\u6b65\u8fdb\u72b6\u6001 \u53c2\u6570: step (int): \u6b65\u8fdb\u5e8f\u5217\u7d22\u5f15\uff080\u5230step_count-1\uff09 \"\"\" # \u5c06\u6b65\u8fdb\u5e8f\u5217\u5e94\u7528\u5230GPIO\u5f15\u811a for i in range(4): self.pins[i].value(self.step_seq[step][i]) def step(self, steps, delay_ms=2): \"\"\" \u9a71\u52a8\u7535\u673a\u6b65\u8fdb\u6307\u5b9a\u6b65\u6570 \u53c2\u6570: steps (int): \u6b65\u6570\uff08\u6b63\u6570=\u987a\u65f6\u9488\uff0c\u8d1f\u6570=\u9006\u65f6\u9488\uff09 delay_ms (int): \u6b65\u95f4\u5ef6\u8fdf\u65f6\u95f4\uff08\u6beb\u79d2\uff09\uff0c\u63a7\u5236\u8f6c\u901f \"\"\" self.direction = 1 if steps > 0 else -1 steps = abs(steps) # \u53d6\u7edd\u5bf9\u503c\u65b9\u4fbf\u5faa\u73af for _ in range(steps): # \u8ba1\u7b97\u4e0b\u4e00\u6b65\u4f4d\u7f6e\uff08\u5faa\u73af\u6b65\u8fdb\u5e8f\u5217\uff09 self.current_step = (self.current_step + self.direction) % self.step_count self.set_step(self.current_step) time.sleep_ms(delay_ms) # \u6b65\u8fdb\u5b8c\u6210\u540e\u91ca\u653e\u7535\u673a\uff08\u53ef\u9009\uff09 self.release() def rotate(self, degrees, delay_ms=2): \"\"\" \u65cb\u8f6c\u6307\u5b9a\u89d2\u5ea6 \u53c2\u6570: degrees (float): \u89d2\u5ea6\uff08\u6b63\u6570=\u987a\u65f6\u9488\uff0c\u8d1f\u6570=\u9006\u65f6\u9488\uff09 delay_ms (int): \u6b65\u95f4\u5ef6\u8fdf\uff08\u6beb\u79d2\uff09 \"\"\" # \u8ba1\u7b97\u6240\u9700\u6b65\u6570\uff1a\u6b65\u6570 = (\u89d2\u5ea6/360) \u00d7 \u6bcf\u8f6c\u6b65\u6570 steps = int(self.steps_per_rev * degrees / 360) self.step(steps, delay_ms) def set_speed(self, rpm): \"\"\" \u8ba1\u7b97\u6307\u5b9a\u8f6c\u901f\u5bf9\u5e94\u7684\u6b65\u95f4\u5ef6\u8fdf \u53c2\u6570: rpm (float): \u671f\u671b\u8f6c\u901f\uff08\u8f6c/\u5206\u949f\uff09 \u8fd4\u56de: int: \u5bf9\u5e94\u7684\u6b65\u95f4\u5ef6\u8fdf\uff08\u6beb\u79d2\uff09 \"\"\" if rpm <= 0: return 0 # \u8ba1\u7b97\u6bcf\u6b65\u65f6\u95f4\uff08\u79d2\uff09\uff1a60\u79d2 \u00f7 (\u6bcf\u8f6c\u6b65\u6570 \u00d7 RPM) step_delay_sec = 60.0 / (self.steps_per_rev * rpm) return int(step_delay_sec * 1000) # \u8f6c\u6362\u4e3a\u6beb\u79d2 def release(self): \"\"\"\u91ca\u653e\u7535\u673a\uff08\u5173\u95ed\u6240\u6709\u7ebf\u5708\uff0c\u51cf\u5c11\u80fd\u8017\u548c\u53d1\u70ed\uff09\"\"\" for pin in self.pins: pin.value(0) \u63a5\u4e0b\u6765\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u5bfc\u5165\u521a\u624d\u7684\u5e93\u6587\u4ef6\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 # \u5bfc\u5165\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 from libs.StepperMotor import StepperMotor # \u521d\u59cb\u5316\u7535\u673a\uff08\u524d4\u4e2a\u53c2\u6570\u4e3a\uff1a\u5bf9\u5e94\u7684\u5f15\u811a\uff1b\u7b2c\u4e94\u4e2a\u53c2\u6570\uff1a\u9ed8\u8ba4\uff0c\u66f4\u5e73\u6ed1\uff09 motor = StepperMotor(4, 12, 13, 14, mode='half') \"\"\" \u65cb\u8f6c\u6307\u5b9a\u89d2\u5ea6 \u53c2\u6570: degrees (float): \u89d2\u5ea6\uff08\u6b63\u6570=\u987a\u65f6\u9488\uff0c\u8d1f\u6570=\u9006\u65f6\u9488\uff09 delay_ms (int): \u6b65\u95f4\u5ef6\u8fdf\uff08\u6beb\u79d2\uff09\uff0c\u5ef6\u65f6\u8d8a\u77ed\uff0c\u8f6c\u901f\u8d8a\u5feb \"\"\" motor.rotate(90, delay_ms= 2) # \u65cb\u8f6c90\u5ea6\uff08\u901f\u5ea6\u7ea610RPM\uff09","title":"\u5b9e\u9a8c\u4e00\uff1a\u6307\u5b9a\u6b65\u8fdb\u7535\u673a\u8f6c\u52a8\u89d2\u5ea6"},{"location":"MicroPython/%E6%B0%94%E4%BD%93%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u6c14\u4f53\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c14\u4f53\u4f20\u611f\u5668 1 4 \u65e0\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65e0\u6e90\u8702\u9e23\u5668 2 2 \u6c14\u4f53\u4f20\u611f\u5668 32 \u70ed\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u5728\u516c\u5171\u573a\u6240\uff0c\u6bd4\u5982\u9152\u5e97\uff0c\u5efa\u7b51\u7269\u548c\u5176\u4ed6\u5730\u65b9\u90fd\u914d\u5907\u4e86\u706b\u707e\u62a5\u8b66\u5668\uff0c\u90a3\u4e48\u5b83\u5982\u4f55\u611f\u77e5\u706b\u707e\uff1f \u4f17\u6240\u5468\u77e5\uff0c\u5f53\u706b\u707e\u7206\u53d1\u65f6\uff0c\u4f1a\u6709\u7279\u522b\u5f3a\u70c8\u7684\u7ea2\u5916\u7ebf\uff0c\u8be5\u8bbe\u5907\u53ef\u4ee5\u901a\u8fc7\u7ea2\u5916\u7ebf\u63a2\u6d4b\u706b\u707e\u3002\u200b \u706b\u7130\u4f20\u611f\u5668\u662f\u673a\u5668\u4eba\u4e13\u95e8\u7528\u6765\u641c\u5bfb\u706b\u6e90\u7684\u4f20\u611f\u5668\uff0c\u5f53\u7136\u706b\u7130\u4f20\u611f\u5668\u4e5f\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u5149\u7ebf\u7684\u4eae\u5ea6\uff0c\u53ea\u662f\u672c\u4f20\u611f\u5668\u5bf9\u706b\u7130\u7279\u522b\u7075\u654f\u3002\u706b\u7130\u4f20\u611f\u5668\u5229\u7528\u7ea2\u5916\u7ebf\u5bf9\u5bf9\u706b\u7130\u975e\u5e38\u654f\u611f\u7684\u7279\u70b9\uff0c\u4f7f\u7528\u7279\u5236\u7684\u7ea2\u5916\u7ebf\u63a5\u53d7\u7ba1\u6765\u68c0\u6d4b\u706b\u7130\uff0c\u7136\u540e\u628a\u706b\u7130\u7684\u4eae\u5ea6\u8f6c\u5316\u4e3a\u9ad8\u4f4e\u53d8\u5316\u7684\u7535\u5e73\u4fe1\u53f7\uff0c\u8f93\u5165\u5230\u4e2d\u592e\u5904\u7406\u5668\u4e2d\uff0c\u4e2d\u592e\u5904\u7406\u5668\u6839\u636e\u4fe1\u53f7\u7684\u53d8\u5316\u505a\u51fa\u76f8\u5e94\u7684\u7a0b\u5e8f\u5904\u7406\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u706b\u7130\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u6c14\u4f53\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 gas = Pin(32, Pin.IN) while True: print(gas.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6b63\u5e38\u72b6\u6001\u4e0b\u663e\u793a\u6570\u5b57\uff1a1\uff1b\u53d1\u73b0\u6709\u6bd2\u663e\u793a\u6570\u5b57\uff1a0 \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u706b\u7130\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 gas = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(gas.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6ca1\u6709\u706b\u7130\u6570\u503c <35000\uff0c\u51fa\u73b0\u706b\u7130\uff0c\u6570\u503c > 45000 \u5b9e\u9a8c\u4e8c\uff1a\u7164\u6c14\u62a5\u8b66\u5668 \u6570\u5b57\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u7164\u6c14\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 gas = Pin(32, Pin.IN) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(gas.value()) if gas.value() == 0: beep_pwm() \u6a21\u62df\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u7164\u6c14\u62a5\u8b66\u5668 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 gas = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(gas.read_u16()) if gas.read_u16() > 45000: beep_pwm()","title":"26.\u6c14\u4f53\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B0%94%E4%BD%93%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u6c14\u4f53\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B0%94%E4%BD%93%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c14\u4f53\u4f20\u611f\u5668 1 4 \u65e0\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65e0\u6e90\u8702\u9e23\u5668 2 2 \u6c14\u4f53\u4f20\u611f\u5668 32 \u70ed\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u5728\u516c\u5171\u573a\u6240\uff0c\u6bd4\u5982\u9152\u5e97\uff0c\u5efa\u7b51\u7269\u548c\u5176\u4ed6\u5730\u65b9\u90fd\u914d\u5907\u4e86\u706b\u707e\u62a5\u8b66\u5668\uff0c\u90a3\u4e48\u5b83\u5982\u4f55\u611f\u77e5\u706b\u707e\uff1f \u4f17\u6240\u5468\u77e5\uff0c\u5f53\u706b\u707e\u7206\u53d1\u65f6\uff0c\u4f1a\u6709\u7279\u522b\u5f3a\u70c8\u7684\u7ea2\u5916\u7ebf\uff0c\u8be5\u8bbe\u5907\u53ef\u4ee5\u901a\u8fc7\u7ea2\u5916\u7ebf\u63a2\u6d4b\u706b\u707e\u3002\u200b \u706b\u7130\u4f20\u611f\u5668\u662f\u673a\u5668\u4eba\u4e13\u95e8\u7528\u6765\u641c\u5bfb\u706b\u6e90\u7684\u4f20\u611f\u5668\uff0c\u5f53\u7136\u706b\u7130\u4f20\u611f\u5668\u4e5f\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u5149\u7ebf\u7684\u4eae\u5ea6\uff0c\u53ea\u662f\u672c\u4f20\u611f\u5668\u5bf9\u706b\u7130\u7279\u522b\u7075\u654f\u3002\u706b\u7130\u4f20\u611f\u5668\u5229\u7528\u7ea2\u5916\u7ebf\u5bf9\u5bf9\u706b\u7130\u975e\u5e38\u654f\u611f\u7684\u7279\u70b9\uff0c\u4f7f\u7528\u7279\u5236\u7684\u7ea2\u5916\u7ebf\u63a5\u53d7\u7ba1\u6765\u68c0\u6d4b\u706b\u7130\uff0c\u7136\u540e\u628a\u706b\u7130\u7684\u4eae\u5ea6\u8f6c\u5316\u4e3a\u9ad8\u4f4e\u53d8\u5316\u7684\u7535\u5e73\u4fe1\u53f7\uff0c\u8f93\u5165\u5230\u4e2d\u592e\u5904\u7406\u5668\u4e2d\uff0c\u4e2d\u592e\u5904\u7406\u5668\u6839\u636e\u4fe1\u53f7\u7684\u53d8\u5316\u505a\u51fa\u76f8\u5e94\u7684\u7a0b\u5e8f\u5904\u7406\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u706b\u7130\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%B0%94%E4%BD%93%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u6c14\u4f53\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 gas = Pin(32, Pin.IN) while True: print(gas.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6b63\u5e38\u72b6\u6001\u4e0b\u663e\u793a\u6570\u5b57\uff1a1\uff1b\u53d1\u73b0\u6709\u6bd2\u663e\u793a\u6570\u5b57\uff1a0 \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u706b\u7130\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 gas = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(gas.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6ca1\u6709\u706b\u7130\u6570\u503c <35000\uff0c\u51fa\u73b0\u706b\u7130\uff0c\u6570\u503c > 45000","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E6%B0%94%E4%BD%93%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u6570\u5b57\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u7164\u6c14\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 gas = Pin(32, Pin.IN) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(gas.value()) if gas.value() == 0: beep_pwm() \u6a21\u62df\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u7164\u6c14\u62a5\u8b66\u5668 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 gas = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(gas.read_u16()) if gas.read_u16() > 45000: beep_pwm()","title":"\u5b9e\u9a8c\u4e8c\uff1a\u7164\u6c14\u62a5\u8b66\u5668"},{"location":"MicroPython/%E6%B0%B4%E6%B7%B1%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u6c34\u6df1\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u6df1\u4f20\u611f\u5668 1 4 \u6709\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6709\u6e90\u8702\u9e23\u5668 2 2 \u6c34\u4f4d\u4f20\u611f\u5668 32 \u6c34\u4f4d\u4f20\u611f\u5668\u4ecb\u7ecd \u6c34\u4f4d\u4f20\u611f\u5668\u4e13\u4e3a\u6c34\u6df1\u68c0\u6d4b\u800c\u8bbe\u8ba1\uff0c\u53ef\u5e7f\u6cdb\u7528\u4e8e\u611f\u5e94\u964d\u96e8\uff0c\u6c34\u4f4d\uff0c\u751a\u81f3\u6db2\u4f53\u6cc4\u6f0f\u3002\u5f53\u5c06\u6c34\u4f4d\u4f20\u611f\u5668\u653e\u5165\u6c34\u4e2d\u65f6\uff0c\u6c34\u4f4d\u6ca1\u8fc7\u94dc\u7ebf\u8d8a\u591a\u6a21\u62df\u503c\u8d8a\u5927\u3002\u8bfb\u53d6\u6c34\u6df1\u4f20\u611f\u5668\u6a21\u5757\u7684\u6a21\u62df\u503c\uff0c\u5728\u4e32\u53e3\u6253\u5370\u51fa\u6765\u3002\u5982\u9700\u77e5\u9053\u6c34\u6df1\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u4f20\u611f\u5668\u653e\u63a2\u6d4b\u90e8\u5206\u524d\u9762\u7684\u4e00\u70b9\u70b9\u653e\u5165\u6c34\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u521a\u653e\u5165\u6c34\u4e2d\u65f6\u7684\u6a21\u62df\u503c\uff0c\u77e5\u9053\u8fd9\u4e2a\u503c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u516c\u5f0f\uff1a \u5f53\u524d\u6a21\u62df\u503c\u4e3aCA \uff0c\u653e\u5165\u6c34\u4e0b\u65f6\u7684\u6a21\u62df\u503c\u4e3aDA \u3002\u6c34\u6df1 =\uff08CA-DA\uff09/100\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u7a0b\u5e8f\u5982\u4e0b ```python ''' \u6c34\u4f4d\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 level = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: print(level.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u6c34\u4f4d\u6b63\u5e38\u65f6\uff0c\u6570\u503c\u504f\u5c0f 2. \u6c34\u4f4d\u7684\u589e\u52a0\u6570\u503c\u53d8\u5927\uff0c\uff08\u5927\u4e8e40000\u65f6\uff0c\u89c6\u4e3a\u8d85\u8fc7\u8b66\u6212\u6c34\u4f4d\uff09 \u5b9e\u9a8c\u4e8c\uff1a\u6c34\u4f4d\u62a5\u8b66\u5668 \u7a0b\u5e8f\u5982\u4e0b ''' \u6c34\u4f4d\u62a5\u8b66\u5668 \u6c34\u4f4d\u9ad8\u4e8e\u8b66\u6212\u6c34\u4f4d\u662f\u53d1\u51fa\u8b66\u62a5\u58f0 ''' from machine import Pin, ADC import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 level = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: if level.read_u16() > 40000: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2)","title":"34.\u6c34\u6df1\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B0%B4%E6%B7%B1%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u6c34\u6df1\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B0%B4%E6%B7%B1%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u6df1\u4f20\u611f\u5668 1 4 \u6709\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6709\u6e90\u8702\u9e23\u5668 2 2 \u6c34\u4f4d\u4f20\u611f\u5668 32 \u6c34\u4f4d\u4f20\u611f\u5668\u4ecb\u7ecd \u6c34\u4f4d\u4f20\u611f\u5668\u4e13\u4e3a\u6c34\u6df1\u68c0\u6d4b\u800c\u8bbe\u8ba1\uff0c\u53ef\u5e7f\u6cdb\u7528\u4e8e\u611f\u5e94\u964d\u96e8\uff0c\u6c34\u4f4d\uff0c\u751a\u81f3\u6db2\u4f53\u6cc4\u6f0f\u3002\u5f53\u5c06\u6c34\u4f4d\u4f20\u611f\u5668\u653e\u5165\u6c34\u4e2d\u65f6\uff0c\u6c34\u4f4d\u6ca1\u8fc7\u94dc\u7ebf\u8d8a\u591a\u6a21\u62df\u503c\u8d8a\u5927\u3002\u8bfb\u53d6\u6c34\u6df1\u4f20\u611f\u5668\u6a21\u5757\u7684\u6a21\u62df\u503c\uff0c\u5728\u4e32\u53e3\u6253\u5370\u51fa\u6765\u3002\u5982\u9700\u77e5\u9053\u6c34\u6df1\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u4f20\u611f\u5668\u653e\u63a2\u6d4b\u90e8\u5206\u524d\u9762\u7684\u4e00\u70b9\u70b9\u653e\u5165\u6c34\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u521a\u653e\u5165\u6c34\u4e2d\u65f6\u7684\u6a21\u62df\u503c\uff0c\u77e5\u9053\u8fd9\u4e2a\u503c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u516c\u5f0f\uff1a \u5f53\u524d\u6a21\u62df\u503c\u4e3aCA \uff0c\u653e\u5165\u6c34\u4e0b\u65f6\u7684\u6a21\u62df\u503c\u4e3aDA \u3002\u6c34\u6df1 =\uff08CA-DA\uff09/100\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%B0%B4%E6%B7%B1%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u7a0b\u5e8f\u5982\u4e0b ```python ''' \u6c34\u4f4d\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 level = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: print(level.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u6c34\u4f4d\u6b63\u5e38\u65f6\uff0c\u6570\u503c\u504f\u5c0f 2. \u6c34\u4f4d\u7684\u589e\u52a0\u6570\u503c\u53d8\u5927\uff0c\uff08\u5927\u4e8e40000\u65f6\uff0c\u89c6\u4e3a\u8d85\u8fc7\u8b66\u6212\u6c34\u4f4d\uff09","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E6%B0%B4%E6%B7%B1%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u6c34\u4f4d\u62a5\u8b66\u5668 \u6c34\u4f4d\u9ad8\u4e8e\u8b66\u6212\u6c34\u4f4d\u662f\u53d1\u51fa\u8b66\u62a5\u58f0 ''' from machine import Pin, ADC import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 level = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: if level.read_u16() > 40000: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u6c34\u4f4d\u62a5\u8b66\u5668"},{"location":"MicroPython/%E6%B0%B4%E8%92%B8%E6%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u6c34\u84b8\u6c14\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u84b8\u6c14\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6c34\u84b8\u6c14\u4f20\u611f\u5668 4 2 LED\u706f 2 \u6c34\u84b8\u6c14\u4f20\u611f\u5668\u4ecb\u7ecd** \u6c34\u84b8\u6c14\u4f20\u611f\u5668\u662f\u5229\u7528\u6e7f\u5ea6\u65b9\u5f0f\u68c0\u6d4b\u6709\u6ca1\u6709\u6c34\u5206\u7684\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u68c0\u6d4b\u6709\u6ca1\u6709\u4e0b\u96e8\u3002\u5c06\u4f20\u611f\u5668\u653e\u7f6e\u5728\u5ba4\u5916\uff0c\u5f53\u6709\u96e8\u6ef4\u6ef4\u5728\u82b1\u74e3\u72b6\u68c0\u6d4b\u4f4d\u4e0a\u65f6\uff0c\u6e7f\u5ea6\u5c06\u589e\u5927\uff0c\u8f93\u51fa\u7535\u538b\u4e5f\u5347\u9ad8\u3002\u9664\u4e86\u68c0\u6d4b\u96e8\u6c34\u5916\uff0c\u8fd8\u53ef\u4ee5\u68c0\u6d4b\u96fe\u6c34\u6216\u6c34\u84b8\u6c14\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u6c34\u84b8\u6c14\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 steam = ADC(Pin(4, Pin.IN), atten = ADC.ATTN_11DB) while True: print(steam.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u5e72\u71e5\u73af\u5883\u4e0b\u6570\u503c\u8f83\u5c0f\uff0c\u6c14\u4f53\u4e2d\u6c34\u6c7d\u542b\u91cf\u589e\u52a0\u6570\u503c\u53d8\u5927 \u5b9e\u9a8c\u4e8c\uff1a\u4e0b\u96e8\u62a5\u8b66\u5668 \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u4e0b\u96e8\u62a5\u8b66\u706f \u5f53\u5929\u6c14\u4e0b\u96e8\uff0c\u7ea2\u706f\u4eae\u8d77\uff0c\u5929\u6c14\u6674\u6717\u7ea2\u706f\u706d ''' from machine import Pin, ADC import time steam = ADC(Pin(4, Pin.IN), atten = ADC.ATTN_11DB) led = Pin(2,Pin.OUT) while True: if steam.read_u16() > 30000: led.value(1) else : led.value(0)","title":"32.\u6c34\u84b8\u6c14\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B0%B4%E8%92%B8%E6%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u6c34\u84b8\u6c14\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B0%B4%E8%92%B8%E6%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u84b8\u6c14\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6c34\u84b8\u6c14\u4f20\u611f\u5668 4 2 LED\u706f 2 \u6c34\u84b8\u6c14\u4f20\u611f\u5668\u4ecb\u7ecd** \u6c34\u84b8\u6c14\u4f20\u611f\u5668\u662f\u5229\u7528\u6e7f\u5ea6\u65b9\u5f0f\u68c0\u6d4b\u6709\u6ca1\u6709\u6c34\u5206\u7684\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u68c0\u6d4b\u6709\u6ca1\u6709\u4e0b\u96e8\u3002\u5c06\u4f20\u611f\u5668\u653e\u7f6e\u5728\u5ba4\u5916\uff0c\u5f53\u6709\u96e8\u6ef4\u6ef4\u5728\u82b1\u74e3\u72b6\u68c0\u6d4b\u4f4d\u4e0a\u65f6\uff0c\u6e7f\u5ea6\u5c06\u589e\u5927\uff0c\u8f93\u51fa\u7535\u538b\u4e5f\u5347\u9ad8\u3002\u9664\u4e86\u68c0\u6d4b\u96e8\u6c34\u5916\uff0c\u8fd8\u53ef\u4ee5\u68c0\u6d4b\u96fe\u6c34\u6216\u6c34\u84b8\u6c14\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%B0%B4%E8%92%B8%E6%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u6c34\u84b8\u6c14\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 steam = ADC(Pin(4, Pin.IN), atten = ADC.ATTN_11DB) while True: print(steam.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u5e72\u71e5\u73af\u5883\u4e0b\u6570\u503c\u8f83\u5c0f\uff0c\u6c14\u4f53\u4e2d\u6c34\u6c7d\u542b\u91cf\u589e\u52a0\u6570\u503c\u53d8\u5927","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E6%B0%B4%E8%92%B8%E6%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u4e0b\u96e8\u62a5\u8b66\u706f \u5f53\u5929\u6c14\u4e0b\u96e8\uff0c\u7ea2\u706f\u4eae\u8d77\uff0c\u5929\u6c14\u6674\u6717\u7ea2\u706f\u706d ''' from machine import Pin, ADC import time steam = ADC(Pin(4, Pin.IN), atten = ADC.ATTN_11DB) led = Pin(2,Pin.OUT) while True: if steam.read_u16() > 30000: led.value(1) else : led.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u4e0b\u96e8\u62a5\u8b66\u5668"},{"location":"MicroPython/%E6%B0%B4%E9%9B%BE%E5%8C%96%E6%A8%A1%E5%9D%97/","text":"\u9707\u52a8\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u96fe\u5316\u6a21\u5757 1 5 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6c34\u96fe\u5316\u6a21\u5757 4 \u6c34\u96fe\u5316 \u6c34\u96fe\u5316\u6a21\u5757\u5de5\u4f5c\u7535\u538bDC 3.3-5V\uff0c\u7535\u6d41300mA\uff0c\u529f\u73872W\uff0c\u9891\u7387108KHz\uff0c\u91c7\u7528\u5b9a\u9891\u96fe\u5316\u7247\u4e13\u7528\u9a71\u52a8\u82af\u7247\u3002\u4e0a\u7535\u53ef\u901a\u8fc7\u5f00\u5173\u9a6c\u4e0a\u55b7\u96fe\uff0c\u8f93\u51fa\u96fe\u5316\u91cf\u5927\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5f00\u53d1\u677f(\u5355\u7247\u673a)\u9ad8\u4f4e\u7535\u5e73\u63a7\u5236\u96fe\u5316\u5668\u7684\u5f00\u548c\u5173\u3002\u5fae\u5b54\u96fe\u5316\u7247\u539f\u7406:\u8d85\u58f0\u6ce2\u5fae\u5b54\u96fe\u5316\u7247\u7531\u91d1\u5c5e\u5fae\u5b54\u7247\u4e0e\u538b\u7535\u9676\u74f7\u7247\u7c98\u5408\u800c\u6210\uff0c\u901a\u8fc7\u538b\u7535\u9676\u74f7\u7247\u5e26\u52a8\u91d1\u5c5e\u5fae\u5b54\u7247\u632f\u52a8\uff0c\u901a\u8fc7\u91d1\u5c5e\u5fae\u5b54\u7247\u5c06\u6db2\u4f53\u5206\u89e3\u6210\u6c34\u96fe\uff0c\u5b9e\u73b0\u5316\u529f\u80fd\u3002\u96fe\u5316\u6548\u679c\u4e0e\u91d1\u5c5e\u5fae\u5b54\u7247\u7684\u6027\u80fd\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u91d1\u5c5e\u5fae\u5b54\u7684\u5b54\u5f84\u5927\u5c0f\u51b3\u5b9a\u4e86\u96fe\u5316\u6db2\u4f53\u7684\u9897\u7c92\u5927\u5c0f\uff0c\u91d1\u5c5e\u6750\u6599\u6027\u80fd\u548c\u5fae\u5b54\u622a\u9762\u7ed3\u6784\u9525\u5ea6\u51b3\u5b9a\u4e86\u96fe\u5316\u6c34\u6c14\u7684\u55b7\u96fe\u9ad8\u5ea6\u3002\u7535\u9676\u74f7\u96fe\u5316\u6676\u7247\u5728\u53d7\u5230\u7535\u80fd\u4fe1\u53f7\u7684\u6fc0\u6d3b\u540e\uff0c\u4ea7\u751f1.7MHZ\u62162.4MHZ\u7684\u9ad8\u9891\u8c10\u632f\u632f\u8361\uff0c\u5c06\u6c34\u629b\u79bb\u6c34\u9762\u800c\u4ea7\u751f\u81ea\u7136\u98d8\u9038\u7684\u6c34\u96fe\uff0c\u4e0d\u9700\u52a0\u70ed\u6216\u5316\u5b66\u5242\u3002 \u5b9e\u9a8c\u4e00\uff1a\u6c34\u96fe\u5316\u5668\u6a21\u5757 \u7a0b\u5e8f\u5982\u4e0b ```python ''' \u5b9e\u9a8c1\uff1a\u6c34\u96fe\u5316\u6a21\u5757 \u96fe\u5316\u5668\u95f4\u96945\u79d2\u6267\u884c\u4e00\u6b21 ''' from machine import Pin import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 atomization = Pin(4, Pin.OUT) while True: atomization.value(1) time.sleep(5) atomization.value(0) time.sleep(5) ```","title":"44.\u6c34\u96fe\u5316\u6a21\u5757"},{"location":"MicroPython/%E6%B0%B4%E9%9B%BE%E5%8C%96%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u9707\u52a8\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B0%B4%E9%9B%BE%E5%8C%96%E6%A8%A1%E5%9D%97/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6c34\u96fe\u5316\u6a21\u5757 1 5 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6c34\u96fe\u5316\u6a21\u5757 4 \u6c34\u96fe\u5316 \u6c34\u96fe\u5316\u6a21\u5757\u5de5\u4f5c\u7535\u538bDC 3.3-5V\uff0c\u7535\u6d41300mA\uff0c\u529f\u73872W\uff0c\u9891\u7387108KHz\uff0c\u91c7\u7528\u5b9a\u9891\u96fe\u5316\u7247\u4e13\u7528\u9a71\u52a8\u82af\u7247\u3002\u4e0a\u7535\u53ef\u901a\u8fc7\u5f00\u5173\u9a6c\u4e0a\u55b7\u96fe\uff0c\u8f93\u51fa\u96fe\u5316\u91cf\u5927\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5f00\u53d1\u677f(\u5355\u7247\u673a)\u9ad8\u4f4e\u7535\u5e73\u63a7\u5236\u96fe\u5316\u5668\u7684\u5f00\u548c\u5173\u3002\u5fae\u5b54\u96fe\u5316\u7247\u539f\u7406:\u8d85\u58f0\u6ce2\u5fae\u5b54\u96fe\u5316\u7247\u7531\u91d1\u5c5e\u5fae\u5b54\u7247\u4e0e\u538b\u7535\u9676\u74f7\u7247\u7c98\u5408\u800c\u6210\uff0c\u901a\u8fc7\u538b\u7535\u9676\u74f7\u7247\u5e26\u52a8\u91d1\u5c5e\u5fae\u5b54\u7247\u632f\u52a8\uff0c\u901a\u8fc7\u91d1\u5c5e\u5fae\u5b54\u7247\u5c06\u6db2\u4f53\u5206\u89e3\u6210\u6c34\u96fe\uff0c\u5b9e\u73b0\u5316\u529f\u80fd\u3002\u96fe\u5316\u6548\u679c\u4e0e\u91d1\u5c5e\u5fae\u5b54\u7247\u7684\u6027\u80fd\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u91d1\u5c5e\u5fae\u5b54\u7684\u5b54\u5f84\u5927\u5c0f\u51b3\u5b9a\u4e86\u96fe\u5316\u6db2\u4f53\u7684\u9897\u7c92\u5927\u5c0f\uff0c\u91d1\u5c5e\u6750\u6599\u6027\u80fd\u548c\u5fae\u5b54\u622a\u9762\u7ed3\u6784\u9525\u5ea6\u51b3\u5b9a\u4e86\u96fe\u5316\u6c34\u6c14\u7684\u55b7\u96fe\u9ad8\u5ea6\u3002\u7535\u9676\u74f7\u96fe\u5316\u6676\u7247\u5728\u53d7\u5230\u7535\u80fd\u4fe1\u53f7\u7684\u6fc0\u6d3b\u540e\uff0c\u4ea7\u751f1.7MHZ\u62162.4MHZ\u7684\u9ad8\u9891\u8c10\u632f\u632f\u8361\uff0c\u5c06\u6c34\u629b\u79bb\u6c34\u9762\u800c\u4ea7\u751f\u81ea\u7136\u98d8\u9038\u7684\u6c34\u96fe\uff0c\u4e0d\u9700\u52a0\u70ed\u6216\u5316\u5b66\u5242\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%B0%B4%E9%9B%BE%E5%8C%96%E6%A8%A1%E5%9D%97/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b ```python ''' \u5b9e\u9a8c1\uff1a\u6c34\u96fe\u5316\u6a21\u5757 \u96fe\u5316\u5668\u95f4\u96945\u79d2\u6267\u884c\u4e00\u6b21 ''' from machine import Pin import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 atomization = Pin(4, Pin.OUT) while True: atomization.value(1) time.sleep(5) atomization.value(0) time.sleep(5) ```","title":"\u5b9e\u9a8c\u4e00\uff1a\u6c34\u96fe\u5316\u5668\u6a21\u5757"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/","text":"\u4e00\u4f4d\u6570\u7801\u7ba1 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 4 4 PH2.0\u53cc\u5934\u7ebf 4 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 LED\u706f 4 3 LED\u706f 12 4 LED\u706f 13 \u5b9e\u7269\u63a5\u7ebf \u4e0a\u624b\u5b9e\u9a8c \u5b9e\u9a8c\u4e00\uff1a\u7ecf\u5178\u6d41\u6c34\u706f \u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236\u591a\u9897LED\u4f9d\u6b21\u70b9\u4eae\uff0c\u7136\u540e\u4f9d\u6b21\u7184\u706d\u5f62\u6210\u6d41\u6c34\u822c\u52a8\u6001\u5149\u6548 \u76ee\u6807\u6548\u679c \u9010\u4e2a\u70b9\u4eae\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cf\u25cf\u25cb\u25cb \u2192 \u25cf\u25cf\u25cf\u25cb \u2192 \u25cf\u25cf\u25cf\u25cf \u9010\u4e2a\u7184\u706d\uff1a \u25cb\u25cf\u25cf\u25cf \u2192 \u25cb\u25cb\u25cf\u25cf \u2192 \u25cb\u25cb\u25cb\u25cf \u2192 \u25cb\u25cb\u25cb\u25cb \u7a0b\u5e8f\u5982\u4e0b\uff1a # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) while True: # LED\u9010\u4e2a\u70b9\u4eae for led_pin in led_pin_list: led_pin.value(1) time.sleep(1) # LED\u9010\u4e2a\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) time.sleep(1) \u5b9e\u9a8c\u4e8c\uff1anot\u903b\u8f91\u8fd0\u7b97\u4f18\u5316\u7ecf\u5178\u6d41\u6c34\u706f \u5728MicroPython\u4e2d\uff0c not \u662f \u5e03\u5c14\u903b\u8f91\u8fd0\u7b97\u7b26 \u800c\u975e\u51fd\u6570\uff0c\u7528\u4e8e\u5bf9\u5e03\u5c14\u503c\u8fdb\u884c\u53d6\u53cd\u64cd\u4f5c\u3002 not \u8bed\u6cd5\u8bb2\u89e3\uff1a \u8868\u8fbe\u5f0f \u7ed3\u679c \u8bf4\u660e not True False \u5bf9True\u53d6\u53cd not False True \u5bf9False\u53d6\u53cd not 0 True 0\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u7b49\u4ef7\u4e8eFalse not 1 False \u975e\u96f6\u6574\u6570\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u7b49\u4ef7\u4e8eTrue \u4f18\u5316\u540e\u7a0b\u5e8f\u5982\u4e0b ''' \u7b2c\u4e8c\u79cd\uff1a\u5e38\u89c4\u6d41\u6c34\u706f\uff08\u7a0b\u5e8f\u4f18\u5316\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u4f9d\u6b21\u70b9\u4eae\u540e\u4f9d\u6b21\u7184\u706d ''' import time from machine import Pin # \u5b9a\u4e49 LED \u63a7\u5236\u5f15\u811a pin_index_list = [2, 4, 12, 13] # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) \u5b9e\u9a8c\u4e09\uff1a\u53cd\u590d\u6d41\u6c34\u706f \u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236LED\u706f\u9010\u4e2a\u70b9\u4eae\uff0c\u7136\u540e\u4ece\u5c3e\u90e8\u5f00\u59cb\u8fd9\u4e2a\u7184\u706d \u76ee\u6807\u6548\u679c \u9010\u4e2a\u70b9\u4eae\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cf\u25cf\u25cb\u25cb \u2192 \u25cf\u25cf\u25cf\u25cb \u2192 \u25cf\u25cf\u25cf\u25cf \u9010\u4e2a\u7184\u706d\uff1a \u25cf\u25cf\u25cf\u25cb \u2192 \u25cf\u25cf\u25cb\u25cb \u2192 \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cb\u25cb\u25cb \u7a0b\u5e8f\u5982\u4e0b ''' \u53cd\u590d\u6d41\u6c34\u706f \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' import time from machine import Pin # \u5b9a\u4e49 LED \u63a7\u5236\u5f15\u811a pin_index_list = [2, 4, 12, 13] # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) while True: # LED\u9010\u4e2a\u70b9\u4eae for led_pin in led_pin_list: led_pin.value(1) time.sleep(1) # LED\u9010\u4e2a\u7184\u706d for led_pin in reversed(led_pin_list): # reversed\u7684\u4f5c\u7528\u662f\u4f7f\u5f97\u5217\u8868\u987a\u5e8f\u7ffb\u8f6c led_pin.value(0) time.sleep(1) \u5b9e\u9a8c\u56db\uff1a\u79fb\u52a8\u6d41\u6c34\u706f \u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236LED\u706f\u9010\u4e2a\u70b9\u4eae\uff0c\u70b9\u4eae\u540e\u7184\u706d\uff0c\u7136\u540e\u4e0b\u4e00\u76cf\u706f\u7acb\u5373\u70b9\u4eae \u76ee\u6807\u6548\u679c \u9010\u4e2a\u70b9\u4eae\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cb\u25cb\u25cf \u770b\u4e0a\u53bb\u4eae\u706f\u5728\u79fb\u52a8\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cb\u25cb\u25cf \u7a0b\u5e8f\u5982\u4e0b ''' LED \u7684\u79fb\u52a8\u70b9\u4eae\uff08\u4ece\u5934\u5230\u5c3e\u4e0d\u505c\u5faa\u73af\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' import time from machine import Pin # \u5b9a\u4e49 LED \u63a7\u5236\u5f15\u811a pin_index_list = [2, 4, 12, 13] # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # \u83b7\u53d6 LED_Pin_list \u7684\u957f\u5ea6 num = len(led_pin_list) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) while True: for i in range(num): # LED\u9010\u4e2a\u70b9\u4eae led_pin_list[i].value(1) # \u5982\u679c\u8fd9\u9897 LED \u662f\u7b2c\u4e00\u4e2a\uff0c\u5219\u9700\u8981\u6539\u53d8\u6700\u540e\u4e00\u9897 LED \u7684\u72b6\u6001 if i == 0: led_pin_list[num - 1].value(0) # \u5982\u679c\u8fd9\u9897 LED \u4e0d\u662f\u7b2c\u4e00\u4e2a\uff0c\u5219\u9700\u8981\u6539\u53d8\u5b83\u4e4b\u524d\u4e00\u9897 LED \u7684\u72b6\u6001 else: led_pin_list[i - 1].value(0) # \u5ef6\u65f6 1 \u79d2 time.sleep(1) \u5b9e\u9a8c\u4e94\uff1a\u5f80\u590d\u79fb\u52a8\u6d41\u6c34 \u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236LED\u706f\u9010\u4e2a\u70b9\u4eae\uff0c\u70b9\u4eae\u540e\u7184\u706d\uff0c\u7136\u540e\u4e0b\u4e00\u76cf\u706f\u7acb\u5373\u70b9\u4eae\uff0c\u5230\u6700\u540e\u4e00\u76cf\u706f\u540e\uff0c\u518d\u4ece\u540e\u5f80\u524d\u9010\u4e2a\u70b9\u4eae\u3002\u70b9\u4eae\u540e\u7184\u706d\uff0c\u7136\u540e\u7acb\u5373\u70b9\u4eae\u524d\u9762\u4e00\u76cf\u706f \u76ee\u6807\u6548\u679c \u4eae\u706f\u4ece\u524d\u5f80\u540e\u79fb\u52a8\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cb\u25cb\u25cf \u4eae\u706f\u4ece\u540e\u5f80\u524d\u79fb\u52a8\uff1a \u25cb\u25cb\u25cb\u25cf \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cf\u25cb\u25cb\u25cb \u7a0b\u5e8f\u5982\u4e0b ''' \u8dd1\u9a6c\u706f\uff1aLED \u7684\u79fb\u52a8\u70b9\u4eae\uff08\u4ece\u5934\u5230\u5c3e\u4e0d\u505c\u5faa\u73af\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' import time from machine import Pin # \u914d\u7f6eLED\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u786c\u4ef6\u4fee\u6539\uff09 led_pins = [Pin(2, Pin.OUT), Pin(4, Pin.OUT), Pin(12, Pin.OUT), Pin(13, Pin.OUT)] # \u521d\u59cb\u5316\u6240\u6709LED\u706f\u7184\u706d for led in led_pins: led.value(0) # \u6c38\u771f\u5faa\u73af while True: # \u6b63\u5411\u6d41\u52a8\uff0c\u4ece\u5934\u5230\u5c3e\u9010\u4e2a\u70b9\u4eae\u5e76\u7acb\u5373\u7184\u706d for i in range(len(led_pins)): led_pins[i].value(1) # \u70b9\u4eae\u5f53\u524d\u7684LED\u706f time.sleep(0.5) # \u4fdd\u6301\u706f\u4eae0.5\u79d2 led_pins[i].value(0) # \u7184\u706d\u5f53\u524dLED\u706f # \u65b9\u5411\u6d41\u52a8\uff0c\u4ece\u5c3e\u5230\u5934\u9010\u4e2a\u70b9\u4eae\u5e76\u7acb\u5373\u7184\u706d for i in reversed(range(len(led_pins))): led_pins[i].value(1) # \u70b9\u4eae\u5f53\u524d\u7684LED\u706f time.sleep(0.5) # \u4fdd\u6301\u706f\u4eae0.5\u79d2 led_pins[i].value(0) # \u7184\u706d\u5f53\u524dLED\u706f \u5b9e\u9a8c\u516d\uff1a\u5bf9\u5b9e\u9a8c\u4e94\u8fdb\u884c\u9762\u5411\u5bf9\u8c61\u5f0f\u7f16\u7a0b\u6539\u9020 \u4ec0\u4e48\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff1a \u662f\u4e00\u79cd\u4ee5\u201c\u5bf9\u8c61\u201d\u4e3a\u6838\u5fc3\u7684\u7f16\u7a0b\u8303\u5f0f\uff0c\u5c06\u73b0\u5b9e\u4e8b\u7269\u62bd\u8c61\u4e3a\u5177\u6709\u5c5e\u6027\u548c\u884c\u4e3a\u7684\u72ec\u7acb\u5355\u5143\u3002\u5176\u6838\u5fc3\u7279\u6027\u5305\u62ec\uff1a \u5c01\u88c5 \u5c06\u6570\u636e\u548c\u65b9\u6cd5\u5c01\u88c5\u5728\u5bf9\u8c61\u5185\uff0c\u901a\u8fc7\u63a5\u53e3\u66b4\u9732\u529f\u80fd\uff08\u5982 \u6c7d\u8f66\u5bf9\u8c61 \u9690\u85cf\u53d1\u52a8\u673a\u7ec6\u8282\uff0c\u4ec5\u63d0\u4f9b \u542f\u52a8() \u65b9\u6cd5\uff09\u3002 \u7ee7\u627f \u652f\u6301\u7c7b\u5c42\u7ea7\u6269\u5c55\uff08\u5982 \u52a8\u7269\u2192\u732b\u79d1\u2192\u732b \uff09\uff0c\u5b9e\u73b0\u4ee3\u7801\u590d\u7528\u548c\u903b\u8f91\u5206\u5c42\u3002 \u591a\u6001 \u540c\u4e00\u65b9\u6cd5\u5728\u4e0d\u540c\u5bf9\u8c61\u4e2d\u8868\u73b0\u4e0d\u540c\u884c\u4e3a\uff08\u5982 \u52a8\u7269.\u53eb() \uff0c\u72d7\u5420\u732b\u55b5\uff09\u3002 \u62bd\u8c61 \u5b9a\u4e49\u63a5\u53e3\u89c4\u8303\uff08\u5982 \u56fe\u5f62\u7c7b \u58f0\u660e \u8ba1\u7b97\u9762\u79ef() \uff0c\u7531\u5b50\u7c7b\u5177\u4f53\u5b9e\u73b0\uff09\u3002 \u7b2c\u4e00\u6b65\uff1a\u5c01\u88c5\u6570\u636e\u548c\u903b\u8f91 \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1apm_led.py \u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin class LEDController: ''' \u521d\u59cb\u5316LED\u706f\u63a7\u5236\u5668 :param pins: led\u5f15\u811a\u7f16\u53f7 \u4f8b\u5982 [1,2,3,4] :param delay: \u70b9\u4eae\u65f6\u95f4\u95f4\u9694\uff08\u6beb\u79d2\uff09 ''' def __init__(self,pins,delay=150): self.delay = delay self.leds = [] for i in pins: a= Pin(i, Pin.OUT) self.leds.append(a) def all_off(self): # \u7184\u706d\u6240\u6709\u7684\u706f for led in self.leds: led.value(0) def flow_forward(self): # \u6b63\u5411\u6d41\u52a8\u6548\u679c for led in self.leds: led.value(1) # \u70b9\u4eae\u5f53\u524dLED\u706f time.sleep_ms(self.delay) led.value(0) # \u7184\u706d\u5f53\u524dLED\u706f def flow_backward(self): # \u65b9\u5411\u6d41\u52a8\u6548\u679c for led in self.leds[::-1]: led.value(1) # \u70b9\u4eae\u5f53\u524dLED\u706f time.sleep_ms(self.delay) led.value(0) # \u7184\u706d\u5f53\u524dLED\u706f def run(self): # \u8fd0\u884c\u4e3b\u5faa\u73af while True: self.flow_forward() # \u6b63\u5411\u626b\u63cf self.flow_backward()# \u53cd\u5411\u626b\u63cf # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": controller = LEDController(pins=[2,4,12,13],delay=500) controller.run() \u5bf9\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u6682\u65f6\u5927\u5bb6\u53ef\u4ee5\u4e0d\u8981\u6c42\u4f1a\u81ea\u5df1\u7f16\u5199\uff0c\u4f46\u662f\u8981\u786e\u4fdd\u53ef\u4ee5\u770b\u61c2\uff0c\u80fd\u7406\u89e3\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u601d\u60f3\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u5f15\u811a\u5bf9\u8c61\u5c01\u88c5\u4e3a\u4e00\u4e2a pins \u7684\u5217\u8868\u3001\u5ef6\u65f6\u65f6\u95f4\u5c01\u88c5\u4e3a delay \u5c5e\u6027\uff0c\u5e76\u7ed9\u4e0e150\u6beb\u79d2\u7684\u9ed8\u8ba4\u503c\uff0c\u540e\u9762\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u76f4\u63a5\u4f20\u5165\u3002\u6211\u4eec\u5c06\u6d41\u6c34\u706f\u7684\u7a0b\u5e8f\u5c01\u88c5\u6574\u5408\u6210\u4e00\u4e2a run \u65b9\u6cd5\u3002 \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b ''' \u5c06\u8fc7\u7a0b\u5f0f\u7684\u4ee3\u7801\u4fee\u6539\u4e3a\u9762\u5411\u5bf9\u8c61\u7684\u5f62\u5f0f \u8dd1\u9a6c\u706f\uff1aLED \u7684\u79fb\u52a8\u70b9\u4eae\uff08\u4ece\u5934\u5230\u5c3e\u4e0d\u505c\u5faa\u73af\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' # \u9996\u5148\u9700\u8981\u5bfc\u5165\u7c7b\u6587\u4ef6 from common.pm_led import LEDController # \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5e76\u4f20\u5165\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u4e00\u822c\u4f7f\u7528\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u6cd5 controller = LEDController(pins=[2,4,12,13],delay=500) # \u8c03\u7528\u7c7b\u65b9\u6cd5 controller.run()","title":"3.\u6d41\u6c34\u706f"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_1","text":"","title":"\u4e00\u4f4d\u6570\u7801\u7ba1"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 4 4 PH2.0\u53cc\u5934\u7ebf 4 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 LED\u706f 4 3 LED\u706f 12 4 LED\u706f 13 \u5b9e\u7269\u63a5\u7ebf","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_3","text":"","title":"\u4e0a\u624b\u5b9e\u9a8c"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_4","text":"\u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236\u591a\u9897LED\u4f9d\u6b21\u70b9\u4eae\uff0c\u7136\u540e\u4f9d\u6b21\u7184\u706d\u5f62\u6210\u6d41\u6c34\u822c\u52a8\u6001\u5149\u6548 \u76ee\u6807\u6548\u679c \u9010\u4e2a\u70b9\u4eae\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cf\u25cf\u25cb\u25cb \u2192 \u25cf\u25cf\u25cf\u25cb \u2192 \u25cf\u25cf\u25cf\u25cf \u9010\u4e2a\u7184\u706d\uff1a \u25cb\u25cf\u25cf\u25cf \u2192 \u25cb\u25cb\u25cf\u25cf \u2192 \u25cb\u25cb\u25cb\u25cf \u2192 \u25cb\u25cb\u25cb\u25cb \u7a0b\u5e8f\u5982\u4e0b\uff1a # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) while True: # LED\u9010\u4e2a\u70b9\u4eae for led_pin in led_pin_list: led_pin.value(1) time.sleep(1) # LED\u9010\u4e2a\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) time.sleep(1)","title":"\u5b9e\u9a8c\u4e00\uff1a\u7ecf\u5178\u6d41\u6c34\u706f"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#not","text":"\u5728MicroPython\u4e2d\uff0c not \u662f \u5e03\u5c14\u903b\u8f91\u8fd0\u7b97\u7b26 \u800c\u975e\u51fd\u6570\uff0c\u7528\u4e8e\u5bf9\u5e03\u5c14\u503c\u8fdb\u884c\u53d6\u53cd\u64cd\u4f5c\u3002 not \u8bed\u6cd5\u8bb2\u89e3\uff1a \u8868\u8fbe\u5f0f \u7ed3\u679c \u8bf4\u660e not True False \u5bf9True\u53d6\u53cd not False True \u5bf9False\u53d6\u53cd not 0 True 0\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u7b49\u4ef7\u4e8eFalse not 1 False \u975e\u96f6\u6574\u6570\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u7b49\u4ef7\u4e8eTrue \u4f18\u5316\u540e\u7a0b\u5e8f\u5982\u4e0b ''' \u7b2c\u4e8c\u79cd\uff1a\u5e38\u89c4\u6d41\u6c34\u706f\uff08\u7a0b\u5e8f\u4f18\u5316\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u4f9d\u6b21\u70b9\u4eae\u540e\u4f9d\u6b21\u7184\u706d ''' import time from machine import Pin # \u5b9a\u4e49 LED \u63a7\u5236\u5f15\u811a pin_index_list = [2, 4, 12, 13] # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1anot\u903b\u8f91\u8fd0\u7b97\u4f18\u5316\u7ecf\u5178\u6d41\u6c34\u706f"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_5","text":"\u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236LED\u706f\u9010\u4e2a\u70b9\u4eae\uff0c\u7136\u540e\u4ece\u5c3e\u90e8\u5f00\u59cb\u8fd9\u4e2a\u7184\u706d \u76ee\u6807\u6548\u679c \u9010\u4e2a\u70b9\u4eae\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cf\u25cf\u25cb\u25cb \u2192 \u25cf\u25cf\u25cf\u25cb \u2192 \u25cf\u25cf\u25cf\u25cf \u9010\u4e2a\u7184\u706d\uff1a \u25cf\u25cf\u25cf\u25cb \u2192 \u25cf\u25cf\u25cb\u25cb \u2192 \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cb\u25cb\u25cb \u7a0b\u5e8f\u5982\u4e0b ''' \u53cd\u590d\u6d41\u6c34\u706f \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' import time from machine import Pin # \u5b9a\u4e49 LED \u63a7\u5236\u5f15\u811a pin_index_list = [2, 4, 12, 13] # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) while True: # LED\u9010\u4e2a\u70b9\u4eae for led_pin in led_pin_list: led_pin.value(1) time.sleep(1) # LED\u9010\u4e2a\u7184\u706d for led_pin in reversed(led_pin_list): # reversed\u7684\u4f5c\u7528\u662f\u4f7f\u5f97\u5217\u8868\u987a\u5e8f\u7ffb\u8f6c led_pin.value(0) time.sleep(1)","title":"\u5b9e\u9a8c\u4e09\uff1a\u53cd\u590d\u6d41\u6c34\u706f"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_6","text":"\u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236LED\u706f\u9010\u4e2a\u70b9\u4eae\uff0c\u70b9\u4eae\u540e\u7184\u706d\uff0c\u7136\u540e\u4e0b\u4e00\u76cf\u706f\u7acb\u5373\u70b9\u4eae \u76ee\u6807\u6548\u679c \u9010\u4e2a\u70b9\u4eae\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cb\u25cb\u25cf \u770b\u4e0a\u53bb\u4eae\u706f\u5728\u79fb\u52a8\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cb\u25cb\u25cf \u7a0b\u5e8f\u5982\u4e0b ''' LED \u7684\u79fb\u52a8\u70b9\u4eae\uff08\u4ece\u5934\u5230\u5c3e\u4e0d\u505c\u5faa\u73af\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' import time from machine import Pin # \u5b9a\u4e49 LED \u63a7\u5236\u5f15\u811a pin_index_list = [2, 4, 12, 13] # \u5b9a\u4e49 led_pin_list \u5217\u8868\uff0c\u4fdd\u5b58 LED \u7ba1\u811a\u914d\u7f6e\u5bf9\u8c61 led_pin_list = [] # \u5faa\u73af\u7ed9 led_pin_list \u5217\u8868\u6dfb\u52a0\u5bf9\u8c61 for i in pin_index_list: led_pin_list.append(Pin(i, Pin.OUT)) # \u83b7\u53d6 LED_Pin_list \u7684\u957f\u5ea6 num = len(led_pin_list) # LED\u5168\u7184\u706d for led_pin in led_pin_list: led_pin.value(0) while True: for i in range(num): # LED\u9010\u4e2a\u70b9\u4eae led_pin_list[i].value(1) # \u5982\u679c\u8fd9\u9897 LED \u662f\u7b2c\u4e00\u4e2a\uff0c\u5219\u9700\u8981\u6539\u53d8\u6700\u540e\u4e00\u9897 LED \u7684\u72b6\u6001 if i == 0: led_pin_list[num - 1].value(0) # \u5982\u679c\u8fd9\u9897 LED \u4e0d\u662f\u7b2c\u4e00\u4e2a\uff0c\u5219\u9700\u8981\u6539\u53d8\u5b83\u4e4b\u524d\u4e00\u9897 LED \u7684\u72b6\u6001 else: led_pin_list[i - 1].value(0) # \u5ef6\u65f6 1 \u79d2 time.sleep(1)","title":"\u5b9e\u9a8c\u56db\uff1a\u79fb\u52a8\u6d41\u6c34\u706f"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_7","text":"\u901a\u8fc7\u7a0b\u5e8f\u63a7\u5236LED\u706f\u9010\u4e2a\u70b9\u4eae\uff0c\u70b9\u4eae\u540e\u7184\u706d\uff0c\u7136\u540e\u4e0b\u4e00\u76cf\u706f\u7acb\u5373\u70b9\u4eae\uff0c\u5230\u6700\u540e\u4e00\u76cf\u706f\u540e\uff0c\u518d\u4ece\u540e\u5f80\u524d\u9010\u4e2a\u70b9\u4eae\u3002\u70b9\u4eae\u540e\u7184\u706d\uff0c\u7136\u540e\u7acb\u5373\u70b9\u4eae\u524d\u9762\u4e00\u76cf\u706f \u76ee\u6807\u6548\u679c \u4eae\u706f\u4ece\u524d\u5f80\u540e\u79fb\u52a8\uff1a \u25cf\u25cb\u25cb\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cb\u25cb\u25cf \u4eae\u706f\u4ece\u540e\u5f80\u524d\u79fb\u52a8\uff1a \u25cb\u25cb\u25cb\u25cf \u2192 \u25cb\u25cb\u25cf\u25cb \u2192 \u25cb\u25cf\u25cb\u25cb \u2192 \u25cf\u25cb\u25cb\u25cb \u7a0b\u5e8f\u5982\u4e0b ''' \u8dd1\u9a6c\u706f\uff1aLED \u7684\u79fb\u52a8\u70b9\u4eae\uff08\u4ece\u5934\u5230\u5c3e\u4e0d\u505c\u5faa\u73af\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' import time from machine import Pin # \u914d\u7f6eLED\u5f15\u811a\uff08\u6839\u636e\u5b9e\u9645\u786c\u4ef6\u4fee\u6539\uff09 led_pins = [Pin(2, Pin.OUT), Pin(4, Pin.OUT), Pin(12, Pin.OUT), Pin(13, Pin.OUT)] # \u521d\u59cb\u5316\u6240\u6709LED\u706f\u7184\u706d for led in led_pins: led.value(0) # \u6c38\u771f\u5faa\u73af while True: # \u6b63\u5411\u6d41\u52a8\uff0c\u4ece\u5934\u5230\u5c3e\u9010\u4e2a\u70b9\u4eae\u5e76\u7acb\u5373\u7184\u706d for i in range(len(led_pins)): led_pins[i].value(1) # \u70b9\u4eae\u5f53\u524d\u7684LED\u706f time.sleep(0.5) # \u4fdd\u6301\u706f\u4eae0.5\u79d2 led_pins[i].value(0) # \u7184\u706d\u5f53\u524dLED\u706f # \u65b9\u5411\u6d41\u52a8\uff0c\u4ece\u5c3e\u5230\u5934\u9010\u4e2a\u70b9\u4eae\u5e76\u7acb\u5373\u7184\u706d for i in reversed(range(len(led_pins))): led_pins[i].value(1) # \u70b9\u4eae\u5f53\u524d\u7684LED\u706f time.sleep(0.5) # \u4fdd\u6301\u706f\u4eae0.5\u79d2 led_pins[i].value(0) # \u7184\u706d\u5f53\u524dLED\u706f","title":"\u5b9e\u9a8c\u4e94\uff1a\u5f80\u590d\u79fb\u52a8\u6d41\u6c34"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_8","text":"","title":"\u5b9e\u9a8c\u516d\uff1a\u5bf9\u5b9e\u9a8c\u4e94\u8fdb\u884c\u9762\u5411\u5bf9\u8c61\u5f0f\u7f16\u7a0b\u6539\u9020"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_9","text":"\u662f\u4e00\u79cd\u4ee5\u201c\u5bf9\u8c61\u201d\u4e3a\u6838\u5fc3\u7684\u7f16\u7a0b\u8303\u5f0f\uff0c\u5c06\u73b0\u5b9e\u4e8b\u7269\u62bd\u8c61\u4e3a\u5177\u6709\u5c5e\u6027\u548c\u884c\u4e3a\u7684\u72ec\u7acb\u5355\u5143\u3002\u5176\u6838\u5fc3\u7279\u6027\u5305\u62ec\uff1a \u5c01\u88c5 \u5c06\u6570\u636e\u548c\u65b9\u6cd5\u5c01\u88c5\u5728\u5bf9\u8c61\u5185\uff0c\u901a\u8fc7\u63a5\u53e3\u66b4\u9732\u529f\u80fd\uff08\u5982 \u6c7d\u8f66\u5bf9\u8c61 \u9690\u85cf\u53d1\u52a8\u673a\u7ec6\u8282\uff0c\u4ec5\u63d0\u4f9b \u542f\u52a8() \u65b9\u6cd5\uff09\u3002 \u7ee7\u627f \u652f\u6301\u7c7b\u5c42\u7ea7\u6269\u5c55\uff08\u5982 \u52a8\u7269\u2192\u732b\u79d1\u2192\u732b \uff09\uff0c\u5b9e\u73b0\u4ee3\u7801\u590d\u7528\u548c\u903b\u8f91\u5206\u5c42\u3002 \u591a\u6001 \u540c\u4e00\u65b9\u6cd5\u5728\u4e0d\u540c\u5bf9\u8c61\u4e2d\u8868\u73b0\u4e0d\u540c\u884c\u4e3a\uff08\u5982 \u52a8\u7269.\u53eb() \uff0c\u72d7\u5420\u732b\u55b5\uff09\u3002 \u62bd\u8c61 \u5b9a\u4e49\u63a5\u53e3\u89c4\u8303\uff08\u5982 \u56fe\u5f62\u7c7b \u58f0\u660e \u8ba1\u7b97\u9762\u79ef() \uff0c\u7531\u5b50\u7c7b\u5177\u4f53\u5b9e\u73b0\uff09\u3002","title":"\u4ec0\u4e48\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff1a"},{"location":"MicroPython/%E6%B5%81%E6%B0%B4%E7%81%AF/#_10","text":"\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939common\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1apm_led.py \u7a0b\u5e8f\u5982\u4e0b\uff1a import time from machine import Pin class LEDController: ''' \u521d\u59cb\u5316LED\u706f\u63a7\u5236\u5668 :param pins: led\u5f15\u811a\u7f16\u53f7 \u4f8b\u5982 [1,2,3,4] :param delay: \u70b9\u4eae\u65f6\u95f4\u95f4\u9694\uff08\u6beb\u79d2\uff09 ''' def __init__(self,pins,delay=150): self.delay = delay self.leds = [] for i in pins: a= Pin(i, Pin.OUT) self.leds.append(a) def all_off(self): # \u7184\u706d\u6240\u6709\u7684\u706f for led in self.leds: led.value(0) def flow_forward(self): # \u6b63\u5411\u6d41\u52a8\u6548\u679c for led in self.leds: led.value(1) # \u70b9\u4eae\u5f53\u524dLED\u706f time.sleep_ms(self.delay) led.value(0) # \u7184\u706d\u5f53\u524dLED\u706f def flow_backward(self): # \u65b9\u5411\u6d41\u52a8\u6548\u679c for led in self.leds[::-1]: led.value(1) # \u70b9\u4eae\u5f53\u524dLED\u706f time.sleep_ms(self.delay) led.value(0) # \u7184\u706d\u5f53\u524dLED\u706f def run(self): # \u8fd0\u884c\u4e3b\u5faa\u73af while True: self.flow_forward() # \u6b63\u5411\u626b\u63cf self.flow_backward()# \u53cd\u5411\u626b\u63cf # \u4f7f\u7528__name__\u6784\u9020\u51fd\u6570\u6765\u5bf9\u7c7b\u51fd\u6570\u8fdb\u884c\u8c03\u8bd5\uff0c\u800c\u5176\u4ed6\u7a0b\u5e8f\u8c03\u7528\u672c\u7c7b\u4e2d\u7684\u65b9\u6cd5\uff0c\u6b64\u6784\u9020\u51fd\u6570\u4e0d\u4f1a\u88ab\u6267\u884c if __name__ == \"__main__\": controller = LEDController(pins=[2,4,12,13],delay=500) controller.run() \u5bf9\u4e8e\u8fd9\u4e2a\u7a0b\u5e8f\u6682\u65f6\u5927\u5bb6\u53ef\u4ee5\u4e0d\u8981\u6c42\u4f1a\u81ea\u5df1\u7f16\u5199\uff0c\u4f46\u662f\u8981\u786e\u4fdd\u53ef\u4ee5\u770b\u61c2\uff0c\u80fd\u7406\u89e3\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u601d\u60f3\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u5f15\u811a\u5bf9\u8c61\u5c01\u88c5\u4e3a\u4e00\u4e2a pins \u7684\u5217\u8868\u3001\u5ef6\u65f6\u65f6\u95f4\u5c01\u88c5\u4e3a delay \u5c5e\u6027\uff0c\u5e76\u7ed9\u4e0e150\u6beb\u79d2\u7684\u9ed8\u8ba4\u503c\uff0c\u540e\u9762\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u76f4\u63a5\u4f20\u5165\u3002\u6211\u4eec\u5c06\u6d41\u6c34\u706f\u7684\u7a0b\u5e8f\u5c01\u88c5\u6574\u5408\u6210\u4e00\u4e2a run \u65b9\u6cd5\u3002 \u518d\u91cd\u65b0\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u8c03\u7528\u521a\u624d\u7684\u7c7b ''' \u5c06\u8fc7\u7a0b\u5f0f\u7684\u4ee3\u7801\u4fee\u6539\u4e3a\u9762\u5411\u5bf9\u8c61\u7684\u5f62\u5f0f \u8dd1\u9a6c\u706f\uff1aLED \u7684\u79fb\u52a8\u70b9\u4eae\uff08\u4ece\u5934\u5230\u5c3e\u4e0d\u505c\u5faa\u73af\uff09 \u8be5\u7a0b\u5e8f\u4f5c\u7528\u662f\u8ba9 LED \u5f80\u590d\u4eae\u706d ''' # \u9996\u5148\u9700\u8981\u5bfc\u5165\u7c7b\u6587\u4ef6 from common.pm_led import LEDController # \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5e76\u4f20\u5165\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u4e00\u822c\u4f7f\u7528\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u6cd5 controller = LEDController(pins=[2,4,12,13],delay=500) # \u8c03\u7528\u7c7b\u65b9\u6cd5 controller.run()","title":"\u7b2c\u4e00\u6b65\uff1a\u5c01\u88c5\u6570\u636e\u548c\u903b\u8f91"},{"location":"MicroPython/%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668 1 4 OLED\u6db2\u6676\u663e\u793a\u5c4f 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668 2 2 OLED\u6db2\u6676\u663e\u793a\u5c4f-SCL 22 3 OLED\u6db2\u6676\u663e\u793a\u5c4f-SDA 21 \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd DHT11\u6570\u5b57\u6e29\u5ea6 - \u6e7f\u5ea6\u4f20\u611f\u5668\u662f\u4e00\u79cd\u5305\u542b\u6821\u51c6\u6570\u5b57\u4fe1\u53f7\u8f93\u51fa\u7684\u590d\u5408\u4f20\u611f\u5668\u3002\u5b83\u91c7\u7528\u7279\u6b8a\u7684\u6570\u5b57\u6a21\u5757\u91c7\u96c6\u6280\u672f\u548c\u6e7f\u5ea6 - \u6e29\u5ea6\u4f20\u611f\u5668\u6280\u672f\uff0c\u786e\u4fdd\u9ad8\u53ef\u9760\u6027\u548c\u51fa\u8272\u7684\u957f\u671f\u7a33\u5b9a\u6027\u3002\u4f20\u611f\u5668\u7531\u7535\u963b\u5f0f\u6e7f\u5ea6\u5143\u4ef6\u548cNTC\u6e29\u5ea6\u6d4b\u91cf\u5143\u4ef6\u7ec4\u6210 \u3002 DHT11\u901a\u8fc7\u5355\u603b\u7ebf\u4e0e\u5fae\u5904\u7406\u5668\u901a\u4fe1\u3002 \u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u4e00\u6b21\u53d1\u900140\u4e2a\u6570\u636e \u3002 \u6570\u636e\u683c\u5f0f\uff1a 8\u4f4d\u6e7f\u5ea6\u6574\u6570\u6570\u636e+ 8\u4f4d\u6e7f\u5ea6\u5341\u8fdb\u5236\u6570\u636e+ 8\u4f4d\u6e29\u5ea6\u6574\u6570\u6570\u636e+ 8\u4f4d\u6e29\u5ea6\u5341\u8fdb\u5236\u6570\u636e+ 8\u4f4d\u5947\u5076\u6821\u9a8c\u4f4d\u3002 \u6570\u636e\u53d1\u9001\u8fc7\u7a0b\uff1a\u4e3b\u63a7\u53d1\u9001\u542f\u52a8\u4fe1\u53f7 - > DHT\u54cd\u5e94\u4fe1\u53f7 - > DHT\u901a\u77e5\u4e3b\u63a7\u5b83\u5df2\u51c6\u5907\u597d\u63a5\u53d7\u4fe1\u53f7 - > DHT\u53d1\u9001\u51c6\u5907\u597d\u7684\u6570\u636e - > DHT\u7ed3\u675f\u4fe1\u53f7 - > DHT\u5185\u90e8\u91cd\u65b0\u6d4b\u8bd5\u73af\u5883\u6e29\u5ea6\u548c\u6e7f\u5ea6\uff0c\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u6570\u636e \u4ece\u4e3b\u63a7\u5f00\u59cb\u53d1\u51fa\u4fe1\u53f7\u3002 \u901a\u8fc7\u8be5\u8fc7\u7a0b\u83b7\u5f97\uff0c\u6bcf\u6b21\u6536\u96c6\u7684\u6570\u636e\u4e3b\u63a7\u59cb\u7ec8\u662f\u6700\u540e\u4e00\u6b21DHT\u6570\u636e\u3002\u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97\u5b9e\u65f6\u6570\u636e\uff0c\u90a3\u4e48\u4e3b\u63a7\u53ef\u4ee5\u6536\u96c6\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u636e\uff0c\u4f46\u662f\uff0c\u6b63\u5f0f\u5730\uff0c\u4e0d\u5efa\u8bae\u8fde\u7eed\u591a\u6b21\u8bfb\u53d6DHT\u3002\u5982\u679c\u6bcf\u6b21\u8bfb\u53d6\u7684\u95f4\u9694\u65f6\u95f4\u8d85\u8fc75\u79d2\uff0c\u5219\u8db3\u4ee5\u83b7\u5f97\u51c6\u786e\u7684\u6570\u636e\u3002DHT\u5728\u901a\u7535\u65f6\u9700\u89811\u79d2\u624d\u80fd\u7a33\u5b9a\u3002 DHT11\u7c7b\u548c\u51fd\u6570 \u6784\u5efaDHT11\u5bf9\u8c61 dht_sensor = dht.DHT11(Pin(2)) id \u4e3a\u5355\u7247\u673a\u4f7f\u7528\u8fde\u63a5DHT11\u5355\u603b\u7ebf\u7684\u5f15\u811a\u7f16\u53f7 \u542f\u52a8\u6e29\u6e7f\u5ea6\u6d4b\u91cf dht_sensor.measure() \u6bcf\u6b21\u8bfb\u53d6\u6e29\u6e7f\u5ea6\u6570\u636e\u524d\u90fd\u8981\u5148\u6267\u884c measure() \u51fd\u6570 \u8bfb\u53d6\u6e29\u6e7f\u5ea6\u7684\u503c dht_sensor.temperature() - \u6e29\u5ea6\u503c dht_sensor.humidity() - \u6e7f\u5ea6\u503c \u5b9e\u9a8c1\uff1a\u5728OLED\u4e0a\u663e\u793a\u6e29\u6e7f\u5ea6\u4fe1\u606f import dht from libs.ssd1306 import SSD1306_I2C from machine import Pin, I2C import time # ======== \u521d\u59cb\u5316SSD1306 OLED\u663e\u793a\u5c4f ======== i2c = I2C(0, scl=Pin(22), sda=Pin(21), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 # ========\u521d\u59cb\u5316 DHT11\u4f20\u611f\u5668 ======== dht_sensor = dht.DHT11(Pin(2)) # \u4e3b\u5faa\u73af while True: dht_sensor.measure() # \u542f\u52a8\u6e29\u6e7f\u5ea6\u6d4b\u91cf temperature = dht_sensor.temperature() # \u83b7\u53d6\u6e29\u5ea6\u503c humidity = dht_sensor.humidity() # \u83b7\u53d6\u6e29\u5ea6\u503c if temperature is not None and humidity is not None: print(\"\u6e29\u5ea6: {}\u2103, \u6e7f\u5ea6: {}%\".format(temperature, humidity)) else: print(\"\u8bf7\u68c0\u67e5\u4f20\u611f\u5668\u8fde\u63a5\uff01\") oled.text(f\"temperature: {temperature}C\", 0, 0) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6e29\u5ea6 oled.text(f\"humidity: {humidity}%\", 0, 16) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6e7f\u5ea6 oled.show() # \u6bcf\u6b21\u8bfb\u53d6\u95f4\u9694\u81f3\u5c112\u79d2\uff08DHT11\u8981\u6c42\uff09 time.sleep(2) oled.fill(0) # \u6e05\u5c4f","title":"41.\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668 1 4 OLED\u6db2\u6676\u663e\u793a\u5c4f 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668 2 2 OLED\u6db2\u6676\u663e\u793a\u5c4f-SCL 22 3 OLED\u6db2\u6676\u663e\u793a\u5c4f-SDA 21 \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd DHT11\u6570\u5b57\u6e29\u5ea6 - \u6e7f\u5ea6\u4f20\u611f\u5668\u662f\u4e00\u79cd\u5305\u542b\u6821\u51c6\u6570\u5b57\u4fe1\u53f7\u8f93\u51fa\u7684\u590d\u5408\u4f20\u611f\u5668\u3002\u5b83\u91c7\u7528\u7279\u6b8a\u7684\u6570\u5b57\u6a21\u5757\u91c7\u96c6\u6280\u672f\u548c\u6e7f\u5ea6 - \u6e29\u5ea6\u4f20\u611f\u5668\u6280\u672f\uff0c\u786e\u4fdd\u9ad8\u53ef\u9760\u6027\u548c\u51fa\u8272\u7684\u957f\u671f\u7a33\u5b9a\u6027\u3002\u4f20\u611f\u5668\u7531\u7535\u963b\u5f0f\u6e7f\u5ea6\u5143\u4ef6\u548cNTC\u6e29\u5ea6\u6d4b\u91cf\u5143\u4ef6\u7ec4\u6210 \u3002 DHT11\u901a\u8fc7\u5355\u603b\u7ebf\u4e0e\u5fae\u5904\u7406\u5668\u901a\u4fe1\u3002 \u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u4e00\u6b21\u53d1\u900140\u4e2a\u6570\u636e \u3002 \u6570\u636e\u683c\u5f0f\uff1a 8\u4f4d\u6e7f\u5ea6\u6574\u6570\u6570\u636e+ 8\u4f4d\u6e7f\u5ea6\u5341\u8fdb\u5236\u6570\u636e+ 8\u4f4d\u6e29\u5ea6\u6574\u6570\u6570\u636e+ 8\u4f4d\u6e29\u5ea6\u5341\u8fdb\u5236\u6570\u636e+ 8\u4f4d\u5947\u5076\u6821\u9a8c\u4f4d\u3002 \u6570\u636e\u53d1\u9001\u8fc7\u7a0b\uff1a\u4e3b\u63a7\u53d1\u9001\u542f\u52a8\u4fe1\u53f7 - > DHT\u54cd\u5e94\u4fe1\u53f7 - > DHT\u901a\u77e5\u4e3b\u63a7\u5b83\u5df2\u51c6\u5907\u597d\u63a5\u53d7\u4fe1\u53f7 - > DHT\u53d1\u9001\u51c6\u5907\u597d\u7684\u6570\u636e - > DHT\u7ed3\u675f\u4fe1\u53f7 - > DHT\u5185\u90e8\u91cd\u65b0\u6d4b\u8bd5\u73af\u5883\u6e29\u5ea6\u548c\u6e7f\u5ea6\uff0c\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u6570\u636e \u4ece\u4e3b\u63a7\u5f00\u59cb\u53d1\u51fa\u4fe1\u53f7\u3002 \u901a\u8fc7\u8be5\u8fc7\u7a0b\u83b7\u5f97\uff0c\u6bcf\u6b21\u6536\u96c6\u7684\u6570\u636e\u4e3b\u63a7\u59cb\u7ec8\u662f\u6700\u540e\u4e00\u6b21DHT\u6570\u636e\u3002\u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97\u5b9e\u65f6\u6570\u636e\uff0c\u90a3\u4e48\u4e3b\u63a7\u53ef\u4ee5\u6536\u96c6\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u636e\uff0c\u4f46\u662f\uff0c\u6b63\u5f0f\u5730\uff0c\u4e0d\u5efa\u8bae\u8fde\u7eed\u591a\u6b21\u8bfb\u53d6DHT\u3002\u5982\u679c\u6bcf\u6b21\u8bfb\u53d6\u7684\u95f4\u9694\u65f6\u95f4\u8d85\u8fc75\u79d2\uff0c\u5219\u8db3\u4ee5\u83b7\u5f97\u51c6\u786e\u7684\u6570\u636e\u3002DHT\u5728\u901a\u7535\u65f6\u9700\u89811\u79d2\u624d\u80fd\u7a33\u5b9a\u3002 DHT11\u7c7b\u548c\u51fd\u6570 \u6784\u5efaDHT11\u5bf9\u8c61 dht_sensor = dht.DHT11(Pin(2)) id \u4e3a\u5355\u7247\u673a\u4f7f\u7528\u8fde\u63a5DHT11\u5355\u603b\u7ebf\u7684\u5f15\u811a\u7f16\u53f7 \u542f\u52a8\u6e29\u6e7f\u5ea6\u6d4b\u91cf dht_sensor.measure() \u6bcf\u6b21\u8bfb\u53d6\u6e29\u6e7f\u5ea6\u6570\u636e\u524d\u90fd\u8981\u5148\u6267\u884c measure() \u51fd\u6570 \u8bfb\u53d6\u6e29\u6e7f\u5ea6\u7684\u503c dht_sensor.temperature() - \u6e29\u5ea6\u503c dht_sensor.humidity() - \u6e7f\u5ea6\u503c","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#1oled","text":"import dht from libs.ssd1306 import SSD1306_I2C from machine import Pin, I2C import time # ======== \u521d\u59cb\u5316SSD1306 OLED\u663e\u793a\u5c4f ======== i2c = I2C(0, scl=Pin(22), sda=Pin(21), freq=400000) # ESP32\u5e38\u7528\u5f15\u811a oled = SSD1306_I2C(128, 64, i2c) # \u521d\u59cb\u5316\u5bf9\u8c61 # ========\u521d\u59cb\u5316 DHT11\u4f20\u611f\u5668 ======== dht_sensor = dht.DHT11(Pin(2)) # \u4e3b\u5faa\u73af while True: dht_sensor.measure() # \u542f\u52a8\u6e29\u6e7f\u5ea6\u6d4b\u91cf temperature = dht_sensor.temperature() # \u83b7\u53d6\u6e29\u5ea6\u503c humidity = dht_sensor.humidity() # \u83b7\u53d6\u6e29\u5ea6\u503c if temperature is not None and humidity is not None: print(\"\u6e29\u5ea6: {}\u2103, \u6e7f\u5ea6: {}%\".format(temperature, humidity)) else: print(\"\u8bf7\u68c0\u67e5\u4f20\u611f\u5668\u8fde\u63a5\uff01\") oled.text(f\"temperature: {temperature}C\", 0, 0) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6e29\u5ea6 oled.text(f\"humidity: {humidity}%\", 0, 16) # \u5728\u6307\u5b9a\u4f4d\u7f6e\u663e\u793a\u6e7f\u5ea6 oled.show() # \u6bcf\u6b21\u8bfb\u53d6\u95f4\u9694\u81f3\u5c112\u79d2\uff08DHT11\u8981\u6c42\uff09 time.sleep(2) oled.fill(0) # \u6e05\u5c4f","title":"\u5b9e\u9a8c1\uff1a\u5728OLED\u4e0a\u663e\u793a\u6e29\u6e7f\u5ea6\u4fe1\u606f"},{"location":"MicroPython/%E6%BB%91%E5%8A%A8%E7%94%B5%E4%BD%8D%E5%99%A8/","text":"\u7070\u5ea6\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 LED\u706f 1 5 \u6ed1\u52a8\u7535\u4f4d\u5668 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u6ed1\u52a8\u7535\u4f4d\u5668 4 \u6ed1\u52a8\u7535\u4f4d\u5668\u4ecb\u7ecd \u6ed1\u52a8\u7535\u4f4d\u5668\u63e1\u6301\u4e09\u4e2a\u7aef\u5b50\uff0c\u901a\u8fc7\u6539\u53d8\u6ed1\u52a8\u5668\u7684\u4f4d\u7f6e\u6765\u6539\u53d8\u53ef\u53d8\u7aef\u5b50\u4e0e\u4e00\u7aef\u4e4b\u95f4\u7684\u7535\u963b\uff0c\u8be5\u6b3e\u963b\u503c\u4e3a\uff1a10K\u3002\u6ed1\u52a8\u7535\u4f4d\u5668\u901a\u5e38\u5177\u6709\u8f83\u5927\u7684\u529f\u7387(\u548c\u5c3a\u5bf8) \uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u4f5c\u8d1f\u8f7d\u6216\u4e32\u8054\u5728\u7535\u8def\u4e2d\u7684\u8d1f\u8f7d\u8fdb\u884c\u9650\u6d41\u3002\u8be5\u7535\u4f4d\u5668\u5177\u6709\u8f83\u5c0f\u7684\u529f\u7387\u548c\u5c3a\u5bf8\uff0c\u4e00\u822c\u7528\u4e8e\u4fe1\u53f7\u7535\u8def\u4e2d\u7684\u7535\u538b\u91c7\u6837\u3002\u8be5\u6b3e\u4f20\u611f\u5668\u662f\u57fa\u4e8e\u76f4\u6ed1\u7535\u4f4d\u5668\u7684\u4f4d\u7f6e\u7684\u4f20\u611f\u5668\uff0c\u91c7\u7528\u4f18\u8d28\u6ed1\u52a8\u7535\u5668\uff0c\u6027\u80fd\u7a33\u5b9a\u53ef\u9760\u3002\u6ed1\u52a8\u7535\u4f4d\u5668\u80fd\u591f\u4e0eArduino\u7b49\u5355\u7247\u673a\u7ed3\u5408\u5b9e\u73b0\u4e0e\u4f4d\u7f6e\u53d8\u5316\u76f8\u5173\u7684\u4e92\u52a8\u4f5c\u54c1\u3002\u5982\u97f3\u91cf\u8c03\u8282\u548c\u753b\u9762\u8d28\u91cf\u7684\u5404\u79cd\u63a7\u5236\uff1b\u7164\u6cb9\u53d6\u6696\u7089\uff0c\u7535\u70ed\u5730\u6bef\u7684\u5404\u79cd\u63a7\u5236\uff1b\u6c7d\u8f66\u5ba4\u5185\u7684\u5750\u5e2d\u52a0\u70ed\u3001\u8c03\u5149\u5668\u3001\u4e71\u6c34\u5668\u7b49\u5404\u79cd\u63a7\u5236\uff1b\u97f3\u7bb1\u6216\u4f4f\u5b85\u8bbe\u5907\u7684\u5404\u79cd\u63a7\u5236\u7b49\u7b49\uff0c\u7528\u9014\u975e\u5e38\u7684\u5e7f\u6cdb\u3002 \u5b9e\u9a8c\u4e00\uff1a\u6ed1\u52a8\u7535\u4f4d\u5668\u63a7\u5236LED\u706f\u4eae\u5ea6 \u7a0b\u5e8f\u5982\u4e0b ```python ''' \u5b9e\u9a8c1\u3001\u6ed1\u52a8\u7535\u4f4d\u5668\u63a7\u5236\u706f\u5149\u5f3a\u5f31 ''' from machine import Pin, ADC, PWM import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 adc= ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) # \u81ea\u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" if in_min == in_max: return (out_min + out_max) / 2 # \u8fd4\u56de\u4e2d\u95f4\u503c(\u9632\u6b62\u5206\u6bcd\u51fa\u73b00\u7684\u9664\u96f6bug) else: mapped = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min return max(out_min, min(mapped, out_max)) # \u7ea6\u675f\u5728\u8f93\u51fa\u8303\u56f4\u5185 while True: value = adc.read_u16() print(value) duty = int(math_map(value,0,65535,0,65535)) led.duty_u16((duty)) time.sleep(0.1) ```","title":"46.\u6ed1\u52a8\u7535\u4f4d\u5668"},{"location":"MicroPython/%E6%BB%91%E5%8A%A8%E7%94%B5%E4%BD%8D%E5%99%A8/#_1","text":"","title":"\u7070\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E6%BB%91%E5%8A%A8%E7%94%B5%E4%BD%8D%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 LED\u706f 1 5 \u6ed1\u52a8\u7535\u4f4d\u5668 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u6ed1\u52a8\u7535\u4f4d\u5668 4 \u6ed1\u52a8\u7535\u4f4d\u5668\u4ecb\u7ecd \u6ed1\u52a8\u7535\u4f4d\u5668\u63e1\u6301\u4e09\u4e2a\u7aef\u5b50\uff0c\u901a\u8fc7\u6539\u53d8\u6ed1\u52a8\u5668\u7684\u4f4d\u7f6e\u6765\u6539\u53d8\u53ef\u53d8\u7aef\u5b50\u4e0e\u4e00\u7aef\u4e4b\u95f4\u7684\u7535\u963b\uff0c\u8be5\u6b3e\u963b\u503c\u4e3a\uff1a10K\u3002\u6ed1\u52a8\u7535\u4f4d\u5668\u901a\u5e38\u5177\u6709\u8f83\u5927\u7684\u529f\u7387(\u548c\u5c3a\u5bf8) \uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u4f5c\u8d1f\u8f7d\u6216\u4e32\u8054\u5728\u7535\u8def\u4e2d\u7684\u8d1f\u8f7d\u8fdb\u884c\u9650\u6d41\u3002\u8be5\u7535\u4f4d\u5668\u5177\u6709\u8f83\u5c0f\u7684\u529f\u7387\u548c\u5c3a\u5bf8\uff0c\u4e00\u822c\u7528\u4e8e\u4fe1\u53f7\u7535\u8def\u4e2d\u7684\u7535\u538b\u91c7\u6837\u3002\u8be5\u6b3e\u4f20\u611f\u5668\u662f\u57fa\u4e8e\u76f4\u6ed1\u7535\u4f4d\u5668\u7684\u4f4d\u7f6e\u7684\u4f20\u611f\u5668\uff0c\u91c7\u7528\u4f18\u8d28\u6ed1\u52a8\u7535\u5668\uff0c\u6027\u80fd\u7a33\u5b9a\u53ef\u9760\u3002\u6ed1\u52a8\u7535\u4f4d\u5668\u80fd\u591f\u4e0eArduino\u7b49\u5355\u7247\u673a\u7ed3\u5408\u5b9e\u73b0\u4e0e\u4f4d\u7f6e\u53d8\u5316\u76f8\u5173\u7684\u4e92\u52a8\u4f5c\u54c1\u3002\u5982\u97f3\u91cf\u8c03\u8282\u548c\u753b\u9762\u8d28\u91cf\u7684\u5404\u79cd\u63a7\u5236\uff1b\u7164\u6cb9\u53d6\u6696\u7089\uff0c\u7535\u70ed\u5730\u6bef\u7684\u5404\u79cd\u63a7\u5236\uff1b\u6c7d\u8f66\u5ba4\u5185\u7684\u5750\u5e2d\u52a0\u70ed\u3001\u8c03\u5149\u5668\u3001\u4e71\u6c34\u5668\u7b49\u5404\u79cd\u63a7\u5236\uff1b\u97f3\u7bb1\u6216\u4f4f\u5b85\u8bbe\u5907\u7684\u5404\u79cd\u63a7\u5236\u7b49\u7b49\uff0c\u7528\u9014\u975e\u5e38\u7684\u5e7f\u6cdb\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%BB%91%E5%8A%A8%E7%94%B5%E4%BD%8D%E5%99%A8/#led","text":"\u7a0b\u5e8f\u5982\u4e0b ```python ''' \u5b9e\u9a8c1\u3001\u6ed1\u52a8\u7535\u4f4d\u5668\u63a7\u5236\u706f\u5149\u5f3a\u5f31 ''' from machine import Pin, ADC, PWM import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 adc= ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) led = PWM(Pin(2, Pin.OUT), freq=1000) # \u81ea\u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" if in_min == in_max: return (out_min + out_max) / 2 # \u8fd4\u56de\u4e2d\u95f4\u503c(\u9632\u6b62\u5206\u6bcd\u51fa\u73b00\u7684\u9664\u96f6bug) else: mapped = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min return max(out_min, min(mapped, out_max)) # \u7ea6\u675f\u5728\u8f93\u51fa\u8303\u56f4\u5185 while True: value = adc.read_u16() print(value) duty = int(math_map(value,0,65535,0,65535)) led.duty_u16((duty)) time.sleep(0.1) ```","title":"\u5b9e\u9a8c\u4e00\uff1a\u6ed1\u52a8\u7535\u4f4d\u5668\u63a7\u5236LED\u706f\u4eae\u5ea6"},{"location":"MicroPython/%E6%BF%80%E5%85%89%E9%98%B2%E7%9B%97/","text":"\u6fc0\u5149\u9632\u76d7 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u76f4\u7ebf\u6fc0\u5149\u706f 1 4 \u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 1 5 \u6709\u6e90\u8702\u9e23\u5668 1 6 PH2.0\u53cc\u5934\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u76f4\u7ebf\u6fc0\u5149\u706f 2 2 \u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 4 3 \u6709\u6e90\u8702\u9e23\u5668 12 \u76f4\u7ebf\u6fc0\u5149\u706f\u4ecb\u7ecd 6.0\u6fc0\u5149\u6a21\u7ec4\uff0c\u6fc0\u5149\u5934\u76f4\u5f84\u4e3a0.6mm\uff0c\u6709\u6b63\u8d1f\u63a5\u7ebf\u67f1\uff0c\u5de5\u4f5c\u7535\u538b3.3v-5v\uff0c\u53ea\u6709\u5728\u96fe\u6216\u8005\u6709\u5176\u4ed6\u4ecb\u8d28\u7684\u524d\u63d0\u4e0b\u624d\u80fd\u770b\u5230\u5fae\u5f31\u7684\u7ea2\u7ebf\uff0c\u800c\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\u770b\u5230\u7684\u662f\u4e00\u4e2a\u7ea2\u70b9\uff0c\u7ba1\u4f53\u4e3a\u94dc\u6750\u3002\u4e3b\u8981\u7528\u4e8e\u6fc0\u5149\u7c7b\u73a9\u5177\uff0c\u53d1\u5149\u9640\u87ba\uff0c\u5404\u79cd\u6c34\u5e73\u4eea\uff0c\u5730\u7ebf\u4eea\u7b49\u3002\u7279\u522b\u6ce8\u610f\uff1a\u4e0d\u8981\u5bf9\u7740\u4eba\u7684\u773c\u775b\u3002 \u5b9e\u9a8c\u4e00\uff1a\u6fc0\u5149\u9632\u76d7\u7cfb\u7edf \u7a0b\u5e8f\u5982\u4e0b ''' \u6fc0\u5149\u9632\u76d7\u88c5\u7f6e \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6fc0\u5149\u5bf9\u51c6\u73af\u5883\u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 \u5f53\u6709\u7a83\u8d3c\u95ef\u5165\u5c31\u4f1a\u906e\u6321\u5149\u7ebf\uff0c\u6b64\u65f6\u6fc0\u53d1\u8702\u9e23\u5668\u62a5\u8b66 ''' from machine import Pin import time laser = Pin(2, Pin.OUT) # \u521d\u59cb\u5316\u6fc0\u5149\u706f \u5f15\u811a2 light = Pin(4, Pin.IN) # \u521d\u59cb\u5316\u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 \u5f15\u811a4 buzzer = Pin(12, Pin.OUT) # \u521d\u59cb\u5316\u8702\u9e23\u5668\u5f15\u811a12 while True: print(light.value()) if light.value(): buzzer.value(1) else : buzzer.value(0)","title":"36.\u6fc0\u5149\u9632\u76d7"},{"location":"MicroPython/%E6%BF%80%E5%85%89%E9%98%B2%E7%9B%97/#_1","text":"","title":"\u6fc0\u5149\u9632\u76d7"},{"location":"MicroPython/%E6%BF%80%E5%85%89%E9%98%B2%E7%9B%97/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u76f4\u7ebf\u6fc0\u5149\u706f 1 4 \u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 1 5 \u6709\u6e90\u8702\u9e23\u5668 1 6 PH2.0\u53cc\u5934\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u76f4\u7ebf\u6fc0\u5149\u706f 2 2 \u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 4 3 \u6709\u6e90\u8702\u9e23\u5668 12 \u76f4\u7ebf\u6fc0\u5149\u706f\u4ecb\u7ecd 6.0\u6fc0\u5149\u6a21\u7ec4\uff0c\u6fc0\u5149\u5934\u76f4\u5f84\u4e3a0.6mm\uff0c\u6709\u6b63\u8d1f\u63a5\u7ebf\u67f1\uff0c\u5de5\u4f5c\u7535\u538b3.3v-5v\uff0c\u53ea\u6709\u5728\u96fe\u6216\u8005\u6709\u5176\u4ed6\u4ecb\u8d28\u7684\u524d\u63d0\u4e0b\u624d\u80fd\u770b\u5230\u5fae\u5f31\u7684\u7ea2\u7ebf\uff0c\u800c\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\u770b\u5230\u7684\u662f\u4e00\u4e2a\u7ea2\u70b9\uff0c\u7ba1\u4f53\u4e3a\u94dc\u6750\u3002\u4e3b\u8981\u7528\u4e8e\u6fc0\u5149\u7c7b\u73a9\u5177\uff0c\u53d1\u5149\u9640\u87ba\uff0c\u5404\u79cd\u6c34\u5e73\u4eea\uff0c\u5730\u7ebf\u4eea\u7b49\u3002\u7279\u522b\u6ce8\u610f\uff1a\u4e0d\u8981\u5bf9\u7740\u4eba\u7684\u773c\u775b\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E6%BF%80%E5%85%89%E9%98%B2%E7%9B%97/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u6fc0\u5149\u9632\u76d7\u88c5\u7f6e \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6fc0\u5149\u5bf9\u51c6\u73af\u5883\u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 \u5f53\u6709\u7a83\u8d3c\u95ef\u5165\u5c31\u4f1a\u906e\u6321\u5149\u7ebf\uff0c\u6b64\u65f6\u6fc0\u53d1\u8702\u9e23\u5668\u62a5\u8b66 ''' from machine import Pin import time laser = Pin(2, Pin.OUT) # \u521d\u59cb\u5316\u6fc0\u5149\u706f \u5f15\u811a2 light = Pin(4, Pin.IN) # \u521d\u59cb\u5316\u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 \u5f15\u811a4 buzzer = Pin(12, Pin.OUT) # \u521d\u59cb\u5316\u8702\u9e23\u5668\u5f15\u811a12 while True: print(light.value()) if light.value(): buzzer.value(1) else : buzzer.value(0)","title":"\u5b9e\u9a8c\u4e00\uff1a\u6fc0\u5149\u9632\u76d7\u7cfb\u7edf"},{"location":"MicroPython/%E7%81%AB%E7%84%B0%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u706b\u7130\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u706b\u7130\u4f20\u611f\u5668 1 4 \u65e0\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65e0\u6e90\u8702\u9e23\u5668 2 2 \u706b\u7130\u4f20\u611f\u5668 32 \u70ed\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u5728\u516c\u5171\u573a\u6240\uff0c\u6bd4\u5982\u9152\u5e97\uff0c\u5efa\u7b51\u7269\u548c\u5176\u4ed6\u5730\u65b9\u90fd\u914d\u5907\u4e86\u706b\u707e\u62a5\u8b66\u5668\uff0c\u90a3\u4e48\u5b83\u5982\u4f55\u611f\u77e5\u706b\u707e\uff1f \u4f17\u6240\u5468\u77e5\uff0c\u5f53\u706b\u707e\u7206\u53d1\u65f6\uff0c\u4f1a\u6709\u7279\u522b\u5f3a\u70c8\u7684\u7ea2\u5916\u7ebf\uff0c\u8be5\u8bbe\u5907\u53ef\u4ee5\u901a\u8fc7\u7ea2\u5916\u7ebf\u63a2\u6d4b\u706b\u707e\u3002\u200b \u706b\u7130\u4f20\u611f\u5668\u662f\u673a\u5668\u4eba\u4e13\u95e8\u7528\u6765\u641c\u5bfb\u706b\u6e90\u7684\u4f20\u611f\u5668\uff0c\u5f53\u7136\u706b\u7130\u4f20\u611f\u5668\u4e5f\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u5149\u7ebf\u7684\u4eae\u5ea6\uff0c\u53ea\u662f\u672c\u4f20\u611f\u5668\u5bf9\u706b\u7130\u7279\u522b\u7075\u654f\u3002\u706b\u7130\u4f20\u611f\u5668\u5229\u7528\u7ea2\u5916\u7ebf\u5bf9\u5bf9\u706b\u7130\u975e\u5e38\u654f\u611f\u7684\u7279\u70b9\uff0c\u4f7f\u7528\u7279\u5236\u7684\u7ea2\u5916\u7ebf\u63a5\u53d7\u7ba1\u6765\u68c0\u6d4b\u706b\u7130\uff0c\u7136\u540e\u628a\u706b\u7130\u7684\u4eae\u5ea6\u8f6c\u5316\u4e3a\u9ad8\u4f4e\u53d8\u5316\u7684\u7535\u5e73\u4fe1\u53f7\uff0c\u8f93\u5165\u5230\u4e2d\u592e\u5904\u7406\u5668\u4e2d\uff0c\u4e2d\u592e\u5904\u7406\u5668\u6839\u636e\u4fe1\u53f7\u7684\u53d8\u5316\u505a\u51fa\u76f8\u5e94\u7684\u7a0b\u5e8f\u5904\u7406\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u706b\u7130\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u70ed\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 heat = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6b63\u5e38\u72b6\u6001\u4e0b\u663e\u793a\u6570\u5b57\uff1a1\uff1b\u53d1\u73b0\u706b\u60c5\u663e\u793a\u6570\u5b57\uff1a0 \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u706b\u7130\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 fire = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(fire.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6ca1\u6709\u706b\u7130\u6570\u503c >50000\uff0c\u51fa\u73b0\u706b\u7130\uff0c\u6570\u503c < 30000 \u5b9e\u9a8c\u4e8c\uff1a\u706b\u8b66\u62a5\u8b66\u5668 \u6570\u5b57\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u706b\u8b66\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 fire = Pin(32, Pin.IN) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(fire.value()) if fire.value() == 0: beep_pwm() \u6a21\u62df\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u706b\u8b66\u62a5\u8b66\u5668\uff08\u6a21\u62df\u4fe1\u53f7) ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if vol.read_u16() > 50000: led.value(1) else: led.value(0)","title":"25.\u706b\u7130\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%81%AB%E7%84%B0%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u706b\u7130\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%81%AB%E7%84%B0%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u706b\u7130\u4f20\u611f\u5668 1 4 \u65e0\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65e0\u6e90\u8702\u9e23\u5668 2 2 \u706b\u7130\u4f20\u611f\u5668 32 \u70ed\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u5728\u516c\u5171\u573a\u6240\uff0c\u6bd4\u5982\u9152\u5e97\uff0c\u5efa\u7b51\u7269\u548c\u5176\u4ed6\u5730\u65b9\u90fd\u914d\u5907\u4e86\u706b\u707e\u62a5\u8b66\u5668\uff0c\u90a3\u4e48\u5b83\u5982\u4f55\u611f\u77e5\u706b\u707e\uff1f \u4f17\u6240\u5468\u77e5\uff0c\u5f53\u706b\u707e\u7206\u53d1\u65f6\uff0c\u4f1a\u6709\u7279\u522b\u5f3a\u70c8\u7684\u7ea2\u5916\u7ebf\uff0c\u8be5\u8bbe\u5907\u53ef\u4ee5\u901a\u8fc7\u7ea2\u5916\u7ebf\u63a2\u6d4b\u706b\u707e\u3002\u200b \u706b\u7130\u4f20\u611f\u5668\u662f\u673a\u5668\u4eba\u4e13\u95e8\u7528\u6765\u641c\u5bfb\u706b\u6e90\u7684\u4f20\u611f\u5668\uff0c\u5f53\u7136\u706b\u7130\u4f20\u611f\u5668\u4e5f\u53ef\u4ee5\u7528\u6765\u68c0\u6d4b\u5149\u7ebf\u7684\u4eae\u5ea6\uff0c\u53ea\u662f\u672c\u4f20\u611f\u5668\u5bf9\u706b\u7130\u7279\u522b\u7075\u654f\u3002\u706b\u7130\u4f20\u611f\u5668\u5229\u7528\u7ea2\u5916\u7ebf\u5bf9\u5bf9\u706b\u7130\u975e\u5e38\u654f\u611f\u7684\u7279\u70b9\uff0c\u4f7f\u7528\u7279\u5236\u7684\u7ea2\u5916\u7ebf\u63a5\u53d7\u7ba1\u6765\u68c0\u6d4b\u706b\u7130\uff0c\u7136\u540e\u628a\u706b\u7130\u7684\u4eae\u5ea6\u8f6c\u5316\u4e3a\u9ad8\u4f4e\u53d8\u5316\u7684\u7535\u5e73\u4fe1\u53f7\uff0c\u8f93\u5165\u5230\u4e2d\u592e\u5904\u7406\u5668\u4e2d\uff0c\u4e2d\u592e\u5904\u7406\u5668\u6839\u636e\u4fe1\u53f7\u7684\u53d8\u5316\u505a\u51fa\u76f8\u5e94\u7684\u7a0b\u5e8f\u5904\u7406\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u706b\u7130\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%81%AB%E7%84%B0%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u70ed\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 heat = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6b63\u5e38\u72b6\u6001\u4e0b\u663e\u793a\u6570\u5b57\uff1a1\uff1b\u53d1\u73b0\u706b\u60c5\u663e\u793a\u6570\u5b57\uff1a0 \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u706b\u7130\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 fire = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(fire.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6ca1\u6709\u706b\u7130\u6570\u503c >50000\uff0c\u51fa\u73b0\u706b\u7130\uff0c\u6570\u503c < 30000","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E7%81%AB%E7%84%B0%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u6570\u5b57\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u706b\u8b66\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 fire = Pin(32, Pin.IN) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(fire.value()) if fire.value() == 0: beep_pwm() \u6a21\u62df\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u706b\u8b66\u62a5\u8b66\u5668\uff08\u6a21\u62df\u4fe1\u53f7) ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if vol.read_u16() > 50000: led.value(1) else: led.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u706b\u8b66\u62a5\u8b66\u5668"},{"location":"MicroPython/%E7%81%B0%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u7070\u5ea6\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u7070\u5ea6\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7070\u5ea6\u4f20\u611f\u5668 2 2 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 3 \u56db\u4f4d\u6570\u7801\u7ba1-SDA 21 4 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 5 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u7070\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd** \u7070\u5ea6\u4f20\u611f\u5668\u662f\u6a21\u62df\u4f20\u611f\u5668\uff0c\u4e0eArduino \u7ed3\u5408\u4f7f\u7528\uff0c\u53ef\u4ee5\u611f\u77e5\u5730\u9762\u6216\u684c\u9762\u4e0d\u540c\u7684\u989c\u8272\u800c\u4ea7\u751f\u76f8\u5e94\u7684\u4fe1\u53f7\uff0c\u53ef\u5b9e\u73b0\u4e0e\u989c\u8272\u6709\u76f8\u5173\u7684\u4e92\u52a8\u4f5c\u54c1\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5de1\u7ebf\u5c0f\u8f66\u7684\u5de1\u7ebf\u4f20\u611f\u5668\u6216\u8005\u8db3\u7403\u673a\u5668\u4eba\u7684\u573a\u5730\u7070\u5ea6\u8bc6\u522b\u3002\u7070\u5ea6\u4f20\u611f\u5668\u5305\u62ec\u4e00\u4e2a\u767d\u8272\u9ad8\u4eae\u53d1\u5149\u4e8c\u6781\u7ba1\u548c\u4e00\u4e2a\u5149\u654f\u7535\u963b\uff0c\u7531\u4e8e\u53d1\u5149\u4e8c\u6781\u7ba1\u7167\u5c04\u5230\u7070\u5ea6\u4e0d\u540c\u7684\u7eb8\u5f20\u4e0a\u8fd4\u56de\u7684\u5149\u662f\u4e0d\u540c\u7684\uff0c\u5149\u654f\u7535\u963b\u63a5\u6536\u5230\u8fd4\u56de\u7684\u5149\uff0c\u6839\u636e\u5149\u7684\u5f3a\u5ea6\u4e0d\u540c\uff0c\u5149\u654f\u7535\u963b\u7684\u963b\u503c\u4e5f\u4e0d\u540c\uff0c\u4ece\u800c\u5b9e\u73b0\u7070\u5ea6\u503c\u7684\u6d4b\u8bd5\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b** ```python ''' \u7070\u5ea6\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 Grayscale = ADC(Pin(2, Pin.IN),atten = ADC.ATTN_11DB) while True: print(Grayscale.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u989c\u8272\u8d8a\u6df1\uff0c\u503c\u8d8a\u5c0f\uff0c\u4e0d\u540c\u989c\u8272\uff0c\u503c\u7684\u8303\u56f4\u4e0d\u540c \u5b9e\u9a8c\u4e8c\uff1a\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u7070\u5ea6\u503c \u7a0b\u5e8f\u5982\u4e0b from machine import Pin, I2C, ADC from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 import time # ======== \u7070\u5ea6\u4f20\u611f\u5668\u914d\u7f6e ======== grayscale = ADC(Pin(2, Pin.IN),atten = ADC.ATTN_11DB) # ======== TM1650\u6570\u7801\u7ba1\u914d\u7f6e ======== i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) while True: value = grayscale.read_u16() # \u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u7070\u5ea6\u503c display.shownum(value) time.sleep(0.2)","title":"42.\u7070\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%81%B0%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u7070\u5ea6\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%81%B0%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u7070\u5ea6\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7070\u5ea6\u4f20\u611f\u5668 2 2 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 3 \u56db\u4f4d\u6570\u7801\u7ba1-SDA 21 4 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 5 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u7070\u5ea6\u4f20\u611f\u5668\u4ecb\u7ecd** \u7070\u5ea6\u4f20\u611f\u5668\u662f\u6a21\u62df\u4f20\u611f\u5668\uff0c\u4e0eArduino \u7ed3\u5408\u4f7f\u7528\uff0c\u53ef\u4ee5\u611f\u77e5\u5730\u9762\u6216\u684c\u9762\u4e0d\u540c\u7684\u989c\u8272\u800c\u4ea7\u751f\u76f8\u5e94\u7684\u4fe1\u53f7\uff0c\u53ef\u5b9e\u73b0\u4e0e\u989c\u8272\u6709\u76f8\u5173\u7684\u4e92\u52a8\u4f5c\u54c1\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5de1\u7ebf\u5c0f\u8f66\u7684\u5de1\u7ebf\u4f20\u611f\u5668\u6216\u8005\u8db3\u7403\u673a\u5668\u4eba\u7684\u573a\u5730\u7070\u5ea6\u8bc6\u522b\u3002\u7070\u5ea6\u4f20\u611f\u5668\u5305\u62ec\u4e00\u4e2a\u767d\u8272\u9ad8\u4eae\u53d1\u5149\u4e8c\u6781\u7ba1\u548c\u4e00\u4e2a\u5149\u654f\u7535\u963b\uff0c\u7531\u4e8e\u53d1\u5149\u4e8c\u6781\u7ba1\u7167\u5c04\u5230\u7070\u5ea6\u4e0d\u540c\u7684\u7eb8\u5f20\u4e0a\u8fd4\u56de\u7684\u5149\u662f\u4e0d\u540c\u7684\uff0c\u5149\u654f\u7535\u963b\u63a5\u6536\u5230\u8fd4\u56de\u7684\u5149\uff0c\u6839\u636e\u5149\u7684\u5f3a\u5ea6\u4e0d\u540c\uff0c\u5149\u654f\u7535\u963b\u7684\u963b\u503c\u4e5f\u4e0d\u540c\uff0c\u4ece\u800c\u5b9e\u73b0\u7070\u5ea6\u503c\u7684\u6d4b\u8bd5\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%81%B0%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b** ```python ''' \u7070\u5ea6\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 Grayscale = ADC(Pin(2, Pin.IN),atten = ADC.ATTN_11DB) while True: print(Grayscale.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u989c\u8272\u8d8a\u6df1\uff0c\u503c\u8d8a\u5c0f\uff0c\u4e0d\u540c\u989c\u8272\uff0c\u503c\u7684\u8303\u56f4\u4e0d\u540c","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E7%81%B0%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b from machine import Pin, I2C, ADC from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u5e93 import time # ======== \u7070\u5ea6\u4f20\u611f\u5668\u914d\u7f6e ======== grayscale = ADC(Pin(2, Pin.IN),atten = ADC.ATTN_11DB) # ======== TM1650\u6570\u7801\u7ba1\u914d\u7f6e ======== i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) while True: value = grayscale.read_u16() # \u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u7070\u5ea6\u503c display.shownum(value) time.sleep(0.2)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u7070\u5ea6\u503c"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/","text":"\u70b9\u4eaeLED\u706f \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 \u5b9e\u7269\u63a5\u7ebf \u544a\u522b\u9762\u5305\u677f\uff0c\u8f7b\u677e\u63a5\u7ebf\uff01 \u6d89\u53ca\u8bed\u6cd5\u8bb2\u89e3 Pin\u51fd\u6570\u8bb2\u89e3 MicroPython \u4e2d\u53ef\u4f7f\u7528 machine \u6a21\u5757\u4e2d\u7684 Pin \u6a21\u5757\u5bf9 GPIO \u8f93\u51fa\u63a7\u5236\u3002 \u6784\u9020\u51fd\u6570 Pin(id, mode=-1, pull=-1, value, drive, alt) \u76f8\u5173\u53c2\u6570\u8bb2\u89e3\uff1a \u53c2\u6570 \u7c7b\u578b/\u9009\u9879 \u8bf4\u660e id int \u5f15\u811a\u7f16\u53f7 \uff08\u786c\u4ef6\u76f8\u5173\uff09\uff1a - ESP32\uff1a\u4f7f\u7528 GPIO \u7f16\u53f7\uff08\u5982 2 \u5bf9\u5e94 IO2\uff09 - Pico\uff1a\u7269\u7406\u5f15\u811a\u53f7\uff08\u5982 0 \u5bf9\u5e94 GP0\uff09 mode Pin.IN Pin.OUT Pin.OPEN_DRAIN Pin.ALT \u6a21\u5f0f \uff1a - IN \uff1a\u8f93\u5165\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 - OUT \uff1a\u63a8\u633d\u8f93\u51fa - OPEN_DRAIN \uff1a\u5f00\u6f0f\u8f93\u51fa\uff08\u9002\u5408 I2C\uff09 - ALT \uff1a\u590d\u7528\u529f\u80fd\uff08\u5982 UART\uff09 pull Pin.PULL_UP Pin.PULL_DOWN None \u4e0a\u4e0b\u62c9\u7535\u963b \uff08\u4ec5\u8f93\u5165\u6a21\u5f0f\u6709\u6548\uff09\uff1a - \u4e0a\u62c9\uff1a\u9ed8\u8ba4\u9ad8\u7535\u5e73 - \u4e0b\u62c9\uff1a\u9ed8\u8ba4\u4f4e\u7535\u5e73 - None \uff1a\u7981\u7528\uff08\u9700\u5916\u63a5\u7535\u963b\uff09 value 0 / 1 \u521d\u59cb\u7535\u5e73 \uff08\u4ec5\u8f93\u51fa\u6a21\u5f0f\u6709\u6548\uff09\uff1a - 0 \uff1a\u521d\u59cb\u4f4e\u7535\u5e73 - 1 \uff1a\u521d\u59cb\u9ad8\u7535\u5e73 drive 0 \uff08\u5f31\uff09~ 3 \uff08\u5f3a\uff09 \u9a71\u52a8\u80fd\u529b \uff08\u90e8\u5206\u82af\u7247\u652f\u6301\uff09\uff1a \u8bbe\u7f6e\u8f93\u51fa\u7535\u6d41\u5f3a\u5ea6\uff08\u5982 Pico \u7684 drive=Pin.DRIVE_3 \u5bf9\u5e94 12mA\uff09 alt int \uff08\u529f\u80fd\u7f16\u53f7\uff09 \u590d\u7528\u529f\u80fd\u9009\u62e9 \uff1a \u6307\u5b9a\u5f15\u811a\u7684\u7279\u6b8a\u529f\u80fd\uff08\u5982 ESP32 \u7684 alt=5 \u7528\u4e8e SPI CLK\uff09 \u5176\u4ed6\u53c2\u6570\u5728\u521d\u7ea7\u9636\u6bb5\u6d89\u53ca\u76f8\u5bf9\u8f83\u5c11\uff0c\u66f4\u591a\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 \u5b98\u7f51\u6587\u6863 MicroPython GPIO \u63a7\u5236\u793a\u4f8b: from machine import Pin p0 = Pin(0, Pin.OUT) # \u521d\u59cb\u5316 GPIO0 \u4e3a\u8f93\u51fa\u6a21\u5f0f from machine import Pin p0 = Pin(0, Pin.OUT) # \u521d\u59cb\u5316 GPIO0 \u4e3a\u8f93\u51fa\u6a21\u5f0f # \u7535\u5e73\u63a7\u5236\u64cd\u4f5c p0.value(0) # \u8f93\u51fa\u4f4e\u7535\u5e73\uff080V\uff09 p0.value(1) # \u8f93\u51fa\u9ad8\u7535\u5e73\uff083.3V\uff09 # \u7b49\u6548\u64cd\u4f5c\uff08\u63a8\u8350\u5199\u6cd5\uff09 p0.on() # \u7b49\u540c\u4e8e value(1) p0.off() # \u7b49\u540c\u4e8e value(0) # \u521d\u59cb\u5316 GPIO2 \u4e3a\u8f93\u5165\u6a21\u5f0f\uff08\u542f\u7528\u5185\u90e8\u4e0a\u62c9\u7535\u963b\uff09 p2 = Pin(2, Pin.IN, Pin.PULL_UP) # \u8bfb\u53d6\u5f15\u811a\u72b6\u6001 print(\"GPIO2 \u5f53\u524d\u7535\u5e73:\", p2.value()) # \u8fd4\u56de 0\uff08\u4f4e\u7535\u5e73\uff09/1\uff08\u9ad8\u7535\u5e73\uff09 \u4ee3\u7801\u89e3\u6790 \u5f15\u811a\u8f93\u51fa\u63a7\u5236 \u4ee3\u7801 \u8bf4\u660e Pin(0, Pin.OUT) \u5c06 GPIO0 \u914d\u7f6e\u4e3a \u63a8\u633d\u8f93\u51fa\u6a21\u5f0f \uff0c\u53ef\u4e3b\u52a8\u8f93\u51fa\u9ad8/\u4f4e\u7535\u5e73 .value(0) \u8f93\u51fa\u4f4e\u7535\u5e73\uff080V\uff09\uff0c\u5e38\u7528\u4e8e\u5173\u95ed LED \u6216\u7ee7\u7535\u5668 .value(1) \u8f93\u51fa\u9ad8\u7535\u5e73\uff083.3V\uff09\uff0c\u5e38\u7528\u4e8e\u70b9\u4eae LED \u6216\u6fc0\u6d3b\u8bbe\u5907 \u8f93\u5165\u4fe1\u53f7\u68c0\u6d4b \u4ee3\u7801 \u8bf4\u660e Pin(2, Pin.IN, Pin.PULL_UP) \u5c06 GPIO2 \u914d\u7f6e\u4e3a \u8f93\u5165\u6a21\u5f0f \u5e76\u542f\u7528 \u5185\u90e8\u4e0a\u62c9\u7535\u963b \uff0c\u60ac\u7a7a\u65f6\u9ed8\u8ba4\u9ad8\u7535\u5e73 p2.value() \u8bfb\u53d6\u5f53\u524d\u7535\u5e73\u72b6\u6001\uff1a - 1 \uff1a\u9ad8\u7535\u5e73\uff08\u6309\u94ae\u91ca\u653e\uff09 - 0 \uff1a\u4f4e\u7535\u5e73\uff08\u6309\u94ae\u6309\u4e0b\uff09 \u901a\u8fc7\u4e0a\u9762\u7684\u6587\u6863\u6211\u4eec\u77e5\u9053\uff0c\u60f3\u8981\u8ba9\u4e00\u4e2a\u5f15\u811a\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u53ea\u9700\u8981\u627e\u5230\u5bf9\u5e94\u7684 GPIO \u7136\u540e\u901a\u8fc7 on() \u6216\u8005 value(1) \u64cd\u4f5c\u5c31\u53ef\u4ee5\uff0c\u540c\u7406\u5982\u679c\u60f3\u8981\u8f93\u51fa\u4f4e\u7535\u5e73\u8ba9 LED \u706f\u706d\uff0c\u53ea\u9700\u8981\u8c03\u7528 off() \u6216\u8005 value(0) \u5c31\u884c\u3002 \u4e0a\u624b\u5b9e\u9a8c \u5b9e\u9a8c\u4e00\uff1a\u70b9\u4eae\u4e00\u9897 LED\u706f \u6211\u4eec\u60f3\u8981\u70b9\u4eae\u8fd9\u9897 LED \u706f\uff0c\u53ea\u9700\u8981\u5148\u6784\u5efa\u5f15\u811a\u5bf9\u8c61\uff0c\u7136\u540e\u7ed9\u8fd9\u4e2a\u5f15\u811a\u8d4b\u503c\u4e00\u4e2a\u9ad8\u7535\u5e73\u5373\u53ef\u3002 ''' \u70b9\u4eae1\u9897LED\u706f ''' from machine import Pin # \u6784\u5efa p2 \u5f15\u811a\u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa p2 = Pin(2, Pin.OUT) # \u4f7f P2 \u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u70b9\u4eaeLED p2.value(1) \u901a\u8fc7 Thonny \u7f16\u5199\u4e0a\u8ff0\u4ee3\u7801\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u6b64\u65f6\u4f1a\u770b\u5230\u7535\u8def\u4e2d\u7684 LED \u706f\u88ab\u70b9\u4eae\u4e86\u3002 \u5b9e\u9a8c\u4e8c\uff1a\u95ea\u70c1LED\u706f \u6211\u4eec\u5df2\u7ecf\u6210\u529f\u70b9\u4eae\u4e00\u9897 LED \uff0c\u63a5\u4e0b\u6765\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8ba9\u8fd9\u9897 LED \u4e0d\u505c\u7684\u95ea\u70c1\u3002 \u5b9e\u73b0 LED \u95ea\u70c1\u7684\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5728 \u5faa\u73af\u8bed\u53e5 \u4e2d\u4f7f\u7528 \u5ef6\u65f6\u6a21\u5757 \u3002\u5148\u8bbe\u7f6e\u9ad8\u7535\u5e73\uff0c\u5ef6\u65f6 X \u79d2\uff0c\u518d\u8bbe\u7f6e\u4f4e\u7535\u5e73\uff0c\u5ef6\u65f6 X \u79d2\uff0c\u4e4b\u540e\u5c31\u4e0d\u65ad\u5faa\u73af\u8be5\u8bed\u53e5\u5373\u53ef\u3002 \u6211\u4eec\u77e5\u9053\u5faa\u73af\u8bed\u53e5\u4e0e\u4e24\u79cd\uff1a for \u548c while \u5faa\u73af\u8bed\u53e5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8ba9\u706f\u6ce1\u4e00\u76f4\u95ea\u70c1\uff0c\u5219\u9700\u8981\u8bbe\u7f6e\u65e0\u9650\u5faa\u73af\uff0c\u56e0\u6b64\u4f7f\u7528 while \u66f4\u5408\u9002\u3002 # \u5982\u679c while \u7684\u6761\u4ef6\u4e3a True\uff0c\u4e00\u76f4\u4e3a\u771f\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u65e0\u9650\u5faa\u73af\u4e86\u3002 while True: pass \u6982\u8ff0 MicroPython \u7684 time \u6a21\u5757\u63d0\u4f9b\u57fa\u7840\u65f6\u95f4\u7ba1\u7406\u529f\u80fd\uff0c\u4e13\u4e3a\u5d4c\u5165\u5f0f\u8bbe\u5907\u4f18\u5316\uff0c\u652f\u6301\u6beb\u79d2/\u5fae\u79d2\u7ea7\u5ef6\u65f6\u3001\u7cfb\u7edf\u65f6\u95f4\u6233\u83b7\u53d6\u53ca\u65f6\u533a\u8f6c\u6362\u3002\u9002\u7528\u4e8e\u5b9a\u65f6\u4efb\u52a1\u3001\u4f20\u611f\u5668\u6570\u636e\u91c7\u96c6\u540c\u6b65\u7b49\u573a\u666f\u3002 \u6838\u5fc3\u65b9\u6cd5 \u65b9\u6cd5 \u529f\u80fd\u8bf4\u660e time.sleep(seconds) \u963b\u585e\u5ef6\u65f6\uff08\u79d2\u7ea7\uff09\uff0c\u652f\u6301\u6d6e\u70b9\u6570\uff08\u5982 sleep(0.5) \u5ef6\u65f6 500ms\uff09 time.sleep_ms(ms) \u6beb\u79d2\u7ea7\u5ef6\u65f6\uff08\u6574\u6570\u53c2\u6570\uff09 time.sleep_us(us) \u5fae\u79d2\u7ea7\u9ad8\u7cbe\u5ea6\u5ef6\u65f6\uff08ESP32 \u7b49\u652f\u6301\uff09 time.time() \u8fd4\u56de\u7cfb\u7edf\u65f6\u95f4\u6233\uff08\u79d2\u7ea7\uff0c\u4ece 2000/1/1 \u5f00\u59cb\u8ba1\u65f6\uff0c\u4f9d\u8d56 RTC \u6a21\u5757\u6216\u7f51\u7edc\u540c\u6b65\uff09 time.localtime() \u8fd4\u56de\u672c\u5730\u65f6\u95f4\u7684\u5143\u7ec4 (\u5e74, \u6708, \u65e5, \u65f6, \u5206, \u79d2, \u5468, \u5e74\u65e5) time.ticks_ms() \u83b7\u53d6\u7cfb\u7edf\u8fd0\u884c\u6beb\u79d2\u8ba1\u6570\u5668\uff08\u81ea\u52a8\u6ea2\u51fa\u5faa\u73af\uff0c\u7528\u4e8e\u7cbe\u51c6\u76f8\u5bf9\u8ba1\u65f6\uff09 time.ticks_diff(end, start) \u8ba1\u7b97\u4e24\u4e2a ticks \u7684\u65f6\u95f4\u5dee\uff08\u6b63\u786e\u5904\u7406\u8ba1\u6570\u5668\u6ea2\u51fa\uff09 \u5e94\u7528\u573a\u666f : \u5b9a\u65f6\u89e6\u53d1 \uff1a\u7ed3\u5408 Timer \u786c\u4ef6\u5916\u8bbe\u5b9e\u73b0\u5468\u671f\u6027\u4efb\u52a1\uff08\u5982\u6bcf 10s \u4e0a\u62a5\u4f20\u611f\u5668\u6570\u636e\uff09 \u6027\u80fd\u8c03\u8bd5 \uff1a\u4f7f\u7528 ticks_ms() \u6d4b\u91cf\u4ee3\u7801\u6267\u884c\u65f6\u95f4 # \u5bfc\u5165 time \u6a21\u5757 import time # \u5ef6\u65f6 0.5 \u79d2 time.sleep(0.5) # \u5ef6\u65f6 100 \u6beb\u79d2 time.sleep_ms(100) # \u5ef6\u65f6 100 \u5fae\u79d2 time.sleep_us(100) # \u83b7\u53d6\u6beb\u79d2\u8ba1\u65f6\u5668\u5f53\u524d\u503c time_1 = time.ticks_ms() \u8fd9\u91cc\u7684 time \u6a21\u5757\u662f MicroPython \u4e2d\u7684 time \u6a21\u5757\uff0c\u4e0e Python \u4e2d\u7684\u4e0d\u540c\uff0c\u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863 MicroPython Time \u6a21\u5757 \u6240\u4ee5\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a # \u5bfc\u5165time\u6a21\u5757 import time # \u5bfc\u5165 Pin \u6a21\u5757 from machine import Pin # \u6784\u5efa P2 \u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa p2 = Pin(2, Pin.OUT) # \u6c38\u771f\u5faa\u73af while True: # \u4f7f P2 \u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u70b9\u4eae LED p2.on() # \u5ef6\u65f6 0.5 \u79d2 time.sleep(0.5) # \u4f7f P2 \u8f93\u51fa\u4f4e\u7535\u5e73\uff0c\u7184\u706d LED p2.off() time.sleep(0.5) \u8fd0\u884c\u7a0b\u5e8f\uff0cLED \u5c31\u95ea\u70c1\u4e86\u3002 \u5b9e\u9a8c\u4e09\uff1aSOS\u6c42\u6551\u4fe1\u53f7\u706f SOS\u6c42\u6559\u4fe1\u53f7\u7a0b\u5e8f\u8981\u6c42\uff1a LED\u706f\u5148\u5feb\u901f\u4eae\u706d3\u6b21\uff0c\u7136\u540e\u7f13\u6162\u4eae\u706d3\u6b21\uff0c\u518d\u5feb\u901f\u4eae\u706d3\u6b21\uff0c\u5e76\u4e14\u4e00\u76f4\u91cd\u590d\u4e0a\u8ff0\u73b0\u8c61\u3002 \u6848\u4f8b\u5c55\u793a \u53ef\u8054\u7cfb\u6211\u7d22\u8981\u62fc\u642d\u56fe\u7eb8\u3002 \u7b2c\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a ''' \u7b2c\u4e00\u79cd\u5e38\u89c4\u65b9\u6848 \u6c42\u6551\u4fe1\u53f7\u706f \u8981\u6c423\u6b21\u77ed\u95ea\uff08\u95f4\u9694500\u6beb\u79d2\uff09\uff0c\u518d3\u6b21\u957f\u95ea\u70c1\uff08\u95f4\u96941000\u6beb\u79d2\uff09\uff0c\u7136\u540e\u518d\u6b21\u5feb\u95ea \u4ee5\u4e0a\u4e3a\u4e00\u6b21SOS\u4fe1\u53f7 \u95f4\u96945\u79d2\u4e4b\u540e\uff0c\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 ''' import machine # \u5bfc\u5165machine\u6a21\u5757 import time # \u5bfc\u5165time\u6a21\u5757 # \u6784\u5efa Pin2 \u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa pin2 = machine.Pin(2, machine.Pin.OUT) while True: # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(1) time.sleep_ms(500) pin2.value(0) time.sleep_ms(500) # \u5b9e\u73b03\u4e2a\u957f\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(1) time.sleep_ms(1000) pin2.value(0) time.sleep_ms(1000) # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(1) time.sleep_ms(500) pin2.value(0) time.sleep_ms(500) # \u95f4\u96945\u79d2\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 time.sleep(5) \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff08\u4f18\u5316\u7a0b\u5e8f\uff09\uff1a ''' \u7b2c\u4e8c\u79cd\uff1a\u4f18\u5316\u65b9\u6848 \u6c42\u6551\u4fe1\u53f7\u706f \u8981\u6c423\u6b21\u77ed\u95ea\uff08\u95f4\u9694500\u6beb\u79d2\uff09\uff0c\u518d3\u6b21\u957f\u95ea\u70c1\uff08\u95f4\u96941000\u6beb\u79d2\uff09\uff0c\u7136\u540e\u518d\u6b21\u5feb\u95ea \u4ee5\u4e0a\u4e3a\u4e00\u6b21SOS\u4fe1\u53f7 \u95f4\u96945\u79d2\u4e4b\u540e\uff0c\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 ''' import machine # \u5bfc\u5165machine\u6a21\u5757 import time # \u5bfc\u5165time\u6a21\u5757 # \u6784\u5efa Pin2 \u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa pin2 = machine.Pin(2, machine.Pin.OUT) while True: # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3): pin2.value(not(pin2.value())) time.sleep_ms(500) # \u5b9e\u73b03\u4e2a\u957f\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(not(pin2.value())) time.sleep_ms(1000) # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(not(pin2.value())) time.sleep_ms(500) # \u95f4\u96945\u79d2\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 pin2.value(0) time.sleep(5)","title":"2.\u70b9\u4eaeLED\u706f"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#led","text":"","title":"\u70b9\u4eaeLED\u706f"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#_1","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 LED\u706f 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 \u5b9e\u7269\u63a5\u7ebf \u544a\u522b\u9762\u5305\u677f\uff0c\u8f7b\u677e\u63a5\u7ebf\uff01","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#_2","text":"Pin\u51fd\u6570\u8bb2\u89e3 MicroPython \u4e2d\u53ef\u4f7f\u7528 machine \u6a21\u5757\u4e2d\u7684 Pin \u6a21\u5757\u5bf9 GPIO \u8f93\u51fa\u63a7\u5236\u3002 \u6784\u9020\u51fd\u6570 Pin(id, mode=-1, pull=-1, value, drive, alt) \u76f8\u5173\u53c2\u6570\u8bb2\u89e3\uff1a \u53c2\u6570 \u7c7b\u578b/\u9009\u9879 \u8bf4\u660e id int \u5f15\u811a\u7f16\u53f7 \uff08\u786c\u4ef6\u76f8\u5173\uff09\uff1a - ESP32\uff1a\u4f7f\u7528 GPIO \u7f16\u53f7\uff08\u5982 2 \u5bf9\u5e94 IO2\uff09 - Pico\uff1a\u7269\u7406\u5f15\u811a\u53f7\uff08\u5982 0 \u5bf9\u5e94 GP0\uff09 mode Pin.IN Pin.OUT Pin.OPEN_DRAIN Pin.ALT \u6a21\u5f0f \uff1a - IN \uff1a\u8f93\u5165\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 - OUT \uff1a\u63a8\u633d\u8f93\u51fa - OPEN_DRAIN \uff1a\u5f00\u6f0f\u8f93\u51fa\uff08\u9002\u5408 I2C\uff09 - ALT \uff1a\u590d\u7528\u529f\u80fd\uff08\u5982 UART\uff09 pull Pin.PULL_UP Pin.PULL_DOWN None \u4e0a\u4e0b\u62c9\u7535\u963b \uff08\u4ec5\u8f93\u5165\u6a21\u5f0f\u6709\u6548\uff09\uff1a - \u4e0a\u62c9\uff1a\u9ed8\u8ba4\u9ad8\u7535\u5e73 - \u4e0b\u62c9\uff1a\u9ed8\u8ba4\u4f4e\u7535\u5e73 - None \uff1a\u7981\u7528\uff08\u9700\u5916\u63a5\u7535\u963b\uff09 value 0 / 1 \u521d\u59cb\u7535\u5e73 \uff08\u4ec5\u8f93\u51fa\u6a21\u5f0f\u6709\u6548\uff09\uff1a - 0 \uff1a\u521d\u59cb\u4f4e\u7535\u5e73 - 1 \uff1a\u521d\u59cb\u9ad8\u7535\u5e73 drive 0 \uff08\u5f31\uff09~ 3 \uff08\u5f3a\uff09 \u9a71\u52a8\u80fd\u529b \uff08\u90e8\u5206\u82af\u7247\u652f\u6301\uff09\uff1a \u8bbe\u7f6e\u8f93\u51fa\u7535\u6d41\u5f3a\u5ea6\uff08\u5982 Pico \u7684 drive=Pin.DRIVE_3 \u5bf9\u5e94 12mA\uff09 alt int \uff08\u529f\u80fd\u7f16\u53f7\uff09 \u590d\u7528\u529f\u80fd\u9009\u62e9 \uff1a \u6307\u5b9a\u5f15\u811a\u7684\u7279\u6b8a\u529f\u80fd\uff08\u5982 ESP32 \u7684 alt=5 \u7528\u4e8e SPI CLK\uff09 \u5176\u4ed6\u53c2\u6570\u5728\u521d\u7ea7\u9636\u6bb5\u6d89\u53ca\u76f8\u5bf9\u8f83\u5c11\uff0c\u66f4\u591a\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 \u5b98\u7f51\u6587\u6863 MicroPython GPIO \u63a7\u5236\u793a\u4f8b: from machine import Pin p0 = Pin(0, Pin.OUT) # \u521d\u59cb\u5316 GPIO0 \u4e3a\u8f93\u51fa\u6a21\u5f0f from machine import Pin p0 = Pin(0, Pin.OUT) # \u521d\u59cb\u5316 GPIO0 \u4e3a\u8f93\u51fa\u6a21\u5f0f # \u7535\u5e73\u63a7\u5236\u64cd\u4f5c p0.value(0) # \u8f93\u51fa\u4f4e\u7535\u5e73\uff080V\uff09 p0.value(1) # \u8f93\u51fa\u9ad8\u7535\u5e73\uff083.3V\uff09 # \u7b49\u6548\u64cd\u4f5c\uff08\u63a8\u8350\u5199\u6cd5\uff09 p0.on() # \u7b49\u540c\u4e8e value(1) p0.off() # \u7b49\u540c\u4e8e value(0) # \u521d\u59cb\u5316 GPIO2 \u4e3a\u8f93\u5165\u6a21\u5f0f\uff08\u542f\u7528\u5185\u90e8\u4e0a\u62c9\u7535\u963b\uff09 p2 = Pin(2, Pin.IN, Pin.PULL_UP) # \u8bfb\u53d6\u5f15\u811a\u72b6\u6001 print(\"GPIO2 \u5f53\u524d\u7535\u5e73:\", p2.value()) # \u8fd4\u56de 0\uff08\u4f4e\u7535\u5e73\uff09/1\uff08\u9ad8\u7535\u5e73\uff09 \u4ee3\u7801\u89e3\u6790 \u5f15\u811a\u8f93\u51fa\u63a7\u5236 \u4ee3\u7801 \u8bf4\u660e Pin(0, Pin.OUT) \u5c06 GPIO0 \u914d\u7f6e\u4e3a \u63a8\u633d\u8f93\u51fa\u6a21\u5f0f \uff0c\u53ef\u4e3b\u52a8\u8f93\u51fa\u9ad8/\u4f4e\u7535\u5e73 .value(0) \u8f93\u51fa\u4f4e\u7535\u5e73\uff080V\uff09\uff0c\u5e38\u7528\u4e8e\u5173\u95ed LED \u6216\u7ee7\u7535\u5668 .value(1) \u8f93\u51fa\u9ad8\u7535\u5e73\uff083.3V\uff09\uff0c\u5e38\u7528\u4e8e\u70b9\u4eae LED \u6216\u6fc0\u6d3b\u8bbe\u5907 \u8f93\u5165\u4fe1\u53f7\u68c0\u6d4b \u4ee3\u7801 \u8bf4\u660e Pin(2, Pin.IN, Pin.PULL_UP) \u5c06 GPIO2 \u914d\u7f6e\u4e3a \u8f93\u5165\u6a21\u5f0f \u5e76\u542f\u7528 \u5185\u90e8\u4e0a\u62c9\u7535\u963b \uff0c\u60ac\u7a7a\u65f6\u9ed8\u8ba4\u9ad8\u7535\u5e73 p2.value() \u8bfb\u53d6\u5f53\u524d\u7535\u5e73\u72b6\u6001\uff1a - 1 \uff1a\u9ad8\u7535\u5e73\uff08\u6309\u94ae\u91ca\u653e\uff09 - 0 \uff1a\u4f4e\u7535\u5e73\uff08\u6309\u94ae\u6309\u4e0b\uff09 \u901a\u8fc7\u4e0a\u9762\u7684\u6587\u6863\u6211\u4eec\u77e5\u9053\uff0c\u60f3\u8981\u8ba9\u4e00\u4e2a\u5f15\u811a\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u53ea\u9700\u8981\u627e\u5230\u5bf9\u5e94\u7684 GPIO \u7136\u540e\u901a\u8fc7 on() \u6216\u8005 value(1) \u64cd\u4f5c\u5c31\u53ef\u4ee5\uff0c\u540c\u7406\u5982\u679c\u60f3\u8981\u8f93\u51fa\u4f4e\u7535\u5e73\u8ba9 LED \u706f\u706d\uff0c\u53ea\u9700\u8981\u8c03\u7528 off() \u6216\u8005 value(0) \u5c31\u884c\u3002","title":"\u6d89\u53ca\u8bed\u6cd5\u8bb2\u89e3"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#_3","text":"","title":"\u4e0a\u624b\u5b9e\u9a8c"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#led_1","text":"\u6211\u4eec\u60f3\u8981\u70b9\u4eae\u8fd9\u9897 LED \u706f\uff0c\u53ea\u9700\u8981\u5148\u6784\u5efa\u5f15\u811a\u5bf9\u8c61\uff0c\u7136\u540e\u7ed9\u8fd9\u4e2a\u5f15\u811a\u8d4b\u503c\u4e00\u4e2a\u9ad8\u7535\u5e73\u5373\u53ef\u3002 ''' \u70b9\u4eae1\u9897LED\u706f ''' from machine import Pin # \u6784\u5efa p2 \u5f15\u811a\u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa p2 = Pin(2, Pin.OUT) # \u4f7f P2 \u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u70b9\u4eaeLED p2.value(1) \u901a\u8fc7 Thonny \u7f16\u5199\u4e0a\u8ff0\u4ee3\u7801\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u6b64\u65f6\u4f1a\u770b\u5230\u7535\u8def\u4e2d\u7684 LED \u706f\u88ab\u70b9\u4eae\u4e86\u3002","title":"\u5b9e\u9a8c\u4e00\uff1a\u70b9\u4eae\u4e00\u9897 LED\u706f"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#led_2","text":"\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u70b9\u4eae\u4e00\u9897 LED \uff0c\u63a5\u4e0b\u6765\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8ba9\u8fd9\u9897 LED \u4e0d\u505c\u7684\u95ea\u70c1\u3002 \u5b9e\u73b0 LED \u95ea\u70c1\u7684\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5728 \u5faa\u73af\u8bed\u53e5 \u4e2d\u4f7f\u7528 \u5ef6\u65f6\u6a21\u5757 \u3002\u5148\u8bbe\u7f6e\u9ad8\u7535\u5e73\uff0c\u5ef6\u65f6 X \u79d2\uff0c\u518d\u8bbe\u7f6e\u4f4e\u7535\u5e73\uff0c\u5ef6\u65f6 X \u79d2\uff0c\u4e4b\u540e\u5c31\u4e0d\u65ad\u5faa\u73af\u8be5\u8bed\u53e5\u5373\u53ef\u3002 \u6211\u4eec\u77e5\u9053\u5faa\u73af\u8bed\u53e5\u4e0e\u4e24\u79cd\uff1a for \u548c while \u5faa\u73af\u8bed\u53e5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8ba9\u706f\u6ce1\u4e00\u76f4\u95ea\u70c1\uff0c\u5219\u9700\u8981\u8bbe\u7f6e\u65e0\u9650\u5faa\u73af\uff0c\u56e0\u6b64\u4f7f\u7528 while \u66f4\u5408\u9002\u3002 # \u5982\u679c while \u7684\u6761\u4ef6\u4e3a True\uff0c\u4e00\u76f4\u4e3a\u771f\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u65e0\u9650\u5faa\u73af\u4e86\u3002 while True: pass \u6982\u8ff0 MicroPython \u7684 time \u6a21\u5757\u63d0\u4f9b\u57fa\u7840\u65f6\u95f4\u7ba1\u7406\u529f\u80fd\uff0c\u4e13\u4e3a\u5d4c\u5165\u5f0f\u8bbe\u5907\u4f18\u5316\uff0c\u652f\u6301\u6beb\u79d2/\u5fae\u79d2\u7ea7\u5ef6\u65f6\u3001\u7cfb\u7edf\u65f6\u95f4\u6233\u83b7\u53d6\u53ca\u65f6\u533a\u8f6c\u6362\u3002\u9002\u7528\u4e8e\u5b9a\u65f6\u4efb\u52a1\u3001\u4f20\u611f\u5668\u6570\u636e\u91c7\u96c6\u540c\u6b65\u7b49\u573a\u666f\u3002 \u6838\u5fc3\u65b9\u6cd5 \u65b9\u6cd5 \u529f\u80fd\u8bf4\u660e time.sleep(seconds) \u963b\u585e\u5ef6\u65f6\uff08\u79d2\u7ea7\uff09\uff0c\u652f\u6301\u6d6e\u70b9\u6570\uff08\u5982 sleep(0.5) \u5ef6\u65f6 500ms\uff09 time.sleep_ms(ms) \u6beb\u79d2\u7ea7\u5ef6\u65f6\uff08\u6574\u6570\u53c2\u6570\uff09 time.sleep_us(us) \u5fae\u79d2\u7ea7\u9ad8\u7cbe\u5ea6\u5ef6\u65f6\uff08ESP32 \u7b49\u652f\u6301\uff09 time.time() \u8fd4\u56de\u7cfb\u7edf\u65f6\u95f4\u6233\uff08\u79d2\u7ea7\uff0c\u4ece 2000/1/1 \u5f00\u59cb\u8ba1\u65f6\uff0c\u4f9d\u8d56 RTC \u6a21\u5757\u6216\u7f51\u7edc\u540c\u6b65\uff09 time.localtime() \u8fd4\u56de\u672c\u5730\u65f6\u95f4\u7684\u5143\u7ec4 (\u5e74, \u6708, \u65e5, \u65f6, \u5206, \u79d2, \u5468, \u5e74\u65e5) time.ticks_ms() \u83b7\u53d6\u7cfb\u7edf\u8fd0\u884c\u6beb\u79d2\u8ba1\u6570\u5668\uff08\u81ea\u52a8\u6ea2\u51fa\u5faa\u73af\uff0c\u7528\u4e8e\u7cbe\u51c6\u76f8\u5bf9\u8ba1\u65f6\uff09 time.ticks_diff(end, start) \u8ba1\u7b97\u4e24\u4e2a ticks \u7684\u65f6\u95f4\u5dee\uff08\u6b63\u786e\u5904\u7406\u8ba1\u6570\u5668\u6ea2\u51fa\uff09 \u5e94\u7528\u573a\u666f : \u5b9a\u65f6\u89e6\u53d1 \uff1a\u7ed3\u5408 Timer \u786c\u4ef6\u5916\u8bbe\u5b9e\u73b0\u5468\u671f\u6027\u4efb\u52a1\uff08\u5982\u6bcf 10s \u4e0a\u62a5\u4f20\u611f\u5668\u6570\u636e\uff09 \u6027\u80fd\u8c03\u8bd5 \uff1a\u4f7f\u7528 ticks_ms() \u6d4b\u91cf\u4ee3\u7801\u6267\u884c\u65f6\u95f4 # \u5bfc\u5165 time \u6a21\u5757 import time # \u5ef6\u65f6 0.5 \u79d2 time.sleep(0.5) # \u5ef6\u65f6 100 \u6beb\u79d2 time.sleep_ms(100) # \u5ef6\u65f6 100 \u5fae\u79d2 time.sleep_us(100) # \u83b7\u53d6\u6beb\u79d2\u8ba1\u65f6\u5668\u5f53\u524d\u503c time_1 = time.ticks_ms() \u8fd9\u91cc\u7684 time \u6a21\u5757\u662f MicroPython \u4e2d\u7684 time \u6a21\u5757\uff0c\u4e0e Python \u4e2d\u7684\u4e0d\u540c\uff0c\u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863 MicroPython Time \u6a21\u5757 \u6240\u4ee5\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a # \u5bfc\u5165time\u6a21\u5757 import time # \u5bfc\u5165 Pin \u6a21\u5757 from machine import Pin # \u6784\u5efa P2 \u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa p2 = Pin(2, Pin.OUT) # \u6c38\u771f\u5faa\u73af while True: # \u4f7f P2 \u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u70b9\u4eae LED p2.on() # \u5ef6\u65f6 0.5 \u79d2 time.sleep(0.5) # \u4f7f P2 \u8f93\u51fa\u4f4e\u7535\u5e73\uff0c\u7184\u706d LED p2.off() time.sleep(0.5) \u8fd0\u884c\u7a0b\u5e8f\uff0cLED \u5c31\u95ea\u70c1\u4e86\u3002","title":"\u5b9e\u9a8c\u4e8c\uff1a\u95ea\u70c1LED\u706f"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#sos","text":"SOS\u6c42\u6559\u4fe1\u53f7\u7a0b\u5e8f\u8981\u6c42\uff1a LED\u706f\u5148\u5feb\u901f\u4eae\u706d3\u6b21\uff0c\u7136\u540e\u7f13\u6162\u4eae\u706d3\u6b21\uff0c\u518d\u5feb\u901f\u4eae\u706d3\u6b21\uff0c\u5e76\u4e14\u4e00\u76f4\u91cd\u590d\u4e0a\u8ff0\u73b0\u8c61\u3002 \u6848\u4f8b\u5c55\u793a \u53ef\u8054\u7cfb\u6211\u7d22\u8981\u62fc\u642d\u56fe\u7eb8\u3002","title":"\u5b9e\u9a8c\u4e09\uff1aSOS\u6c42\u6551\u4fe1\u53f7\u706f"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#_4","text":"''' \u7b2c\u4e00\u79cd\u5e38\u89c4\u65b9\u6848 \u6c42\u6551\u4fe1\u53f7\u706f \u8981\u6c423\u6b21\u77ed\u95ea\uff08\u95f4\u9694500\u6beb\u79d2\uff09\uff0c\u518d3\u6b21\u957f\u95ea\u70c1\uff08\u95f4\u96941000\u6beb\u79d2\uff09\uff0c\u7136\u540e\u518d\u6b21\u5feb\u95ea \u4ee5\u4e0a\u4e3a\u4e00\u6b21SOS\u4fe1\u53f7 \u95f4\u96945\u79d2\u4e4b\u540e\uff0c\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 ''' import machine # \u5bfc\u5165machine\u6a21\u5757 import time # \u5bfc\u5165time\u6a21\u5757 # \u6784\u5efa Pin2 \u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa pin2 = machine.Pin(2, machine.Pin.OUT) while True: # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(1) time.sleep_ms(500) pin2.value(0) time.sleep_ms(500) # \u5b9e\u73b03\u4e2a\u957f\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(1) time.sleep_ms(1000) pin2.value(0) time.sleep_ms(1000) # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(1) time.sleep_ms(500) pin2.value(0) time.sleep_ms(500) # \u95f4\u96945\u79d2\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 time.sleep(5)","title":"\u7b2c\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a"},{"location":"MicroPython/%E7%82%B9%E4%BA%AELED%E7%81%AF/#_5","text":"''' \u7b2c\u4e8c\u79cd\uff1a\u4f18\u5316\u65b9\u6848 \u6c42\u6551\u4fe1\u53f7\u706f \u8981\u6c423\u6b21\u77ed\u95ea\uff08\u95f4\u9694500\u6beb\u79d2\uff09\uff0c\u518d3\u6b21\u957f\u95ea\u70c1\uff08\u95f4\u96941000\u6beb\u79d2\uff09\uff0c\u7136\u540e\u518d\u6b21\u5feb\u95ea \u4ee5\u4e0a\u4e3a\u4e00\u6b21SOS\u4fe1\u53f7 \u95f4\u96945\u79d2\u4e4b\u540e\uff0c\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 ''' import machine # \u5bfc\u5165machine\u6a21\u5757 import time # \u5bfc\u5165time\u6a21\u5757 # \u6784\u5efa Pin2 \u5bf9\u8c61\uff0cGPIO2\u8f93\u51fa pin2 = machine.Pin(2, machine.Pin.OUT) while True: # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3): pin2.value(not(pin2.value())) time.sleep_ms(500) # \u5b9e\u73b03\u4e2a\u957f\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(not(pin2.value())) time.sleep_ms(1000) # \u5b9e\u73b03\u6b21\u77ed\u95f4\u9694\u95ea\u70c1 for i in range(0, 3, 1): pin2.value(not(pin2.value())) time.sleep_ms(500) # \u95f4\u96945\u79d2\u91cd\u590d\u53d1\u9001SOS\u6c42\u6551\u4fe1\u53f7 pin2.value(0) time.sleep(5)","title":"\u7b2c\u4e8c\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff08\u4f18\u5316\u7a0b\u5e8f\uff09\uff1a"},{"location":"MicroPython/%E7%83%AD%E6%95%8F%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u70ed\u654f\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u70ed\u654f\u4f20\u611f\u5668 1 4 \u65e0\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65e0\u6e90\u8702\u9e23\u5668 2 2 \u70ed\u654f\u4f20\u611f\u5668 32 \u70ed\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u70ed\u654f\u7535\u963b\u5668\u662f\u654f\u611f\u5143\u4ef6\u7684\u4e00\u7c7b\uff0c\u6309\u7167\u6e29\u5ea6\u7cfb\u6570\u4e0d\u540c\u5206\u4e3a\u6b63\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(PTC)\u548c\u8d1f\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(NTC)\u3002\u70ed\u654f\u7535\u963b\u5668\u7684\u5178\u578b\u7279\u70b9\u662f\u5bf9\u6e29\u5ea6\u654f\u611f\uff0c\u4e0d\u540c\u7684\u6e29\u5ea6\u4e0b\u8868\u73b0\u51fa\u4e0d\u540c\u7684\u7535\u963b\u503c\u3002\u6b63\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(PTC)\u5728\u6e29\u5ea6\u8d8a\u9ad8\u65f6\u7535\u963b\u503c\u8d8a\u5927\uff0c\u8d1f\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(NTC)\u5728\u6e29\u5ea6\u8d8a\u9ad8\u65f6\u7535\u963b\u503c\u8d8a\u4f4e\uff0c\u5b83\u4eec\u540c\u5c5e\u4e8e\u534a\u5bfc\u4f53\u5668\u4ef6\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u4fe1\u53f7\u68c0\u6d4b ```python ''' \u70ed\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 heat = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u5e38\u6e29\u72b6\u6001\u4e0b\uff0c\u6570\u5b57< 20000\uff0c\u9ad8\u6e29\u72b6\u6001\u4e0b \u6570\u503c >22000 \u5b9e\u9a8c\u4e8c\uff1a\u9ad8\u6e29\u62a5\u8b66\u5668 \u7a0b\u5e8f\u5982\u4e0b ''' \u9ad8\u6e29\u62a5\u8b66\u5668 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 heat = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(heat.read_u16()) if heat.read_u16() > 25000: beep_pwm()","title":"24.\u70ed\u654f\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%83%AD%E6%95%8F%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u70ed\u654f\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%83%AD%E6%95%8F%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u70ed\u654f\u4f20\u611f\u5668 1 4 \u65e0\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u65e0\u6e90\u8702\u9e23\u5668 2 2 \u70ed\u654f\u4f20\u611f\u5668 32 \u70ed\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u70ed\u654f\u7535\u963b\u5668\u662f\u654f\u611f\u5143\u4ef6\u7684\u4e00\u7c7b\uff0c\u6309\u7167\u6e29\u5ea6\u7cfb\u6570\u4e0d\u540c\u5206\u4e3a\u6b63\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(PTC)\u548c\u8d1f\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(NTC)\u3002\u70ed\u654f\u7535\u963b\u5668\u7684\u5178\u578b\u7279\u70b9\u662f\u5bf9\u6e29\u5ea6\u654f\u611f\uff0c\u4e0d\u540c\u7684\u6e29\u5ea6\u4e0b\u8868\u73b0\u51fa\u4e0d\u540c\u7684\u7535\u963b\u503c\u3002\u6b63\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(PTC)\u5728\u6e29\u5ea6\u8d8a\u9ad8\u65f6\u7535\u963b\u503c\u8d8a\u5927\uff0c\u8d1f\u6e29\u5ea6\u7cfb\u6570\u70ed\u654f\u7535\u963b\u5668(NTC)\u5728\u6e29\u5ea6\u8d8a\u9ad8\u65f6\u7535\u963b\u503c\u8d8a\u4f4e\uff0c\u5b83\u4eec\u540c\u5c5e\u4e8e\u534a\u5bfc\u4f53\u5668\u4ef6\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%83%AD%E6%95%8F%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u4fe1\u53f7\u68c0\u6d4b ```python ''' \u70ed\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 heat = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u5e38\u6e29\u72b6\u6001\u4e0b\uff0c\u6570\u5b57< 20000\uff0c\u9ad8\u6e29\u72b6\u6001\u4e0b \u6570\u503c >22000","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E7%83%AD%E6%95%8F%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u9ad8\u6e29\u62a5\u8b66\u5668 ''' from machine import Pin, ADC, PWM import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 heat = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 # \u7b2c\u4e00\u4e2a\u8702\u9e23\u5668\u62a5\u8b66\u7a0b\u5e8f def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) while True: print(heat.read_u16()) if heat.read_u16() > 25000: beep_pwm()","title":"\u5b9e\u9a8c\u4e8c\uff1a\u9ad8\u6e29\u62a5\u8b66\u5668"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E5%85%89%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u58f0\u97f3\u4f20\u611f\u5668 32 \u5149\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u73af\u5883\u4eae\u5ea6\u4f20\u611f\u5668\uff0c\u53c8\u79f0\u73af\u4fdd\u578b\u5149\u654f\u7535\u963b\u3002\u66ff\u4ee3\u5149\u654f\u7535\u963b CdS\uff0c\u7b26\u5408 RoHS \u6307\u4ee4/\u65e0\u94c5/\u65e0\u9549\u3002\u7279\u5236\u6ee4\u5149\u73af\u6c27\u6811\u8102\u5c01\u88c5\uff0c\u5149\u8c31\u54cd\u5e94\u7279\u6027\u7c7b\u4f3c\u4e8e\u4eba\u773c\uff1b\u968f\u5149\u7167\u5ea6\u53d8\u5316\u7ebf\u6027\u8f93\u51fa\uff1b\u5177\u6709\u4e00\u5b9a\u7684\u6e29\u5ea6\u7a33\u5b9a\u6027\uff1b\u4f4e\u6697\u7535\u6d41\uff0c\u4f4e\u5de5\u4f5c\u7167\u5ea6\uff1b\u53ef\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u79cd\u5149\u63a7\u7535\u8def\uff0c\u6bd4\u5982\u63a7\u5236\u548c\u8c03\u8282\u706f\u5149\uff0c\u8c03\u8282\u80cc\u666f\u5149\uff0c\u5982\u7535\u89c6\uff0cPDA\uff0c\u7167\u76f8\u673a\uff0cLCD/LED \u663e\u793a\u5668\u548c\u79fb\u52a8\u7535\u8bdd\u7b49\uff1b\u63a7\u5236\u73a9\u5177\u548c\u7167\u660e\u8bbe\u5907\u3002\u73af\u5883\u4eae\u5ea6\u4f20\u611f\u5668\u5bf9\u73af\u5883\u5149\u7ebf\u6700\u654f\u611f\uff0c\u4e00\u822c\u7528\u6765\u68c0\u6d4b\u5468\u56f4\u73af\u5883\u7684\u5149\u7ebf\u4eae\u5ea6\u7b49 \u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u5149\u654f\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362D\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u5149\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vol = Pin(32, Pin.IN) while True: print(vol.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6697\u5149\u7ebf\u72b6\u6001\u4e0b\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u5f53\u5728\u5149\u4eae\u7684\u73af\u5883\uff0c\u8fd4\u56de\u503c\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u5149\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u5b89\u9759\u65f6\u5019\u7684\u6570\u5b57\u8303\u56f4\u5927\u6982\u4e3a\uff1a50000\u4ee5\u4e0a 2. \u6709\u7a81\u53d1\u58f0\u54cd\u7684\u65f6\u5019\u6570\u503c\u4f1a\u4f4e\u4e8e10000\u4e00\u4e0b \u5b9e\u9a8c\u4e8c\uff1a\u667a\u80fd\u8def\u706f \u667a\u80fd\u8def\u706f\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u667a\u80fd\u8def\u706f\uff08\u6570\u5b57\u4fe1\u53f7\u4fe1\u53f7\uff09 \u6bd4\u6697\u7684\u73af\u5883\u4e0b\u706f\u4eae\uff0c\u5149\u4eae\u7684\u73af\u5883\u4e0b\u706f\u706d ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = Pin(32, Pin.IN) while True: if vol.value() == 1: led.value(1) else: led.value(0) \u667a\u80fd\u8def\u706f\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u667a\u80fd\u8def\u706f\uff08\u6a21\u62df\u4fe1\u53f7\u4fe1\u53f7\uff09 \u6bd4\u6697\u7684\u73af\u5883\u4e0b\u706f\u4eae\uff0c\u5149\u4eae\u7684\u73af\u5883\u4e0b\u706f\u706d ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if vol.read_u16() > 50000: led.value(1) else: led.value(0)","title":"23.\u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E5%85%89%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E5%85%89%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u73af\u5883\u5149\u7ebf\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u58f0\u97f3\u4f20\u611f\u5668 32 \u5149\u654f\u4f20\u611f\u5668\u4ecb\u7ecd \u73af\u5883\u4eae\u5ea6\u4f20\u611f\u5668\uff0c\u53c8\u79f0\u73af\u4fdd\u578b\u5149\u654f\u7535\u963b\u3002\u66ff\u4ee3\u5149\u654f\u7535\u963b CdS\uff0c\u7b26\u5408 RoHS \u6307\u4ee4/\u65e0\u94c5/\u65e0\u9549\u3002\u7279\u5236\u6ee4\u5149\u73af\u6c27\u6811\u8102\u5c01\u88c5\uff0c\u5149\u8c31\u54cd\u5e94\u7279\u6027\u7c7b\u4f3c\u4e8e\u4eba\u773c\uff1b\u968f\u5149\u7167\u5ea6\u53d8\u5316\u7ebf\u6027\u8f93\u51fa\uff1b\u5177\u6709\u4e00\u5b9a\u7684\u6e29\u5ea6\u7a33\u5b9a\u6027\uff1b\u4f4e\u6697\u7535\u6d41\uff0c\u4f4e\u5de5\u4f5c\u7167\u5ea6\uff1b\u53ef\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u79cd\u5149\u63a7\u7535\u8def\uff0c\u6bd4\u5982\u63a7\u5236\u548c\u8c03\u8282\u706f\u5149\uff0c\u8c03\u8282\u80cc\u666f\u5149\uff0c\u5982\u7535\u89c6\uff0cPDA\uff0c\u7167\u76f8\u673a\uff0cLCD/LED \u663e\u793a\u5668\u548c\u79fb\u52a8\u7535\u8bdd\u7b49\uff1b\u63a7\u5236\u73a9\u5177\u548c\u7167\u660e\u8bbe\u5907\u3002\u73af\u5883\u4eae\u5ea6\u4f20\u611f\u5668\u5bf9\u73af\u5883\u5149\u7ebf\u6700\u654f\u611f\uff0c\u4e00\u822c\u7528\u6765\u68c0\u6d4b\u5468\u56f4\u73af\u5883\u7684\u5149\u7ebf\u4eae\u5ea6\u7b49 \u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u5149\u654f\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362D\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E5%85%89%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u5149\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vol = Pin(32, Pin.IN) while True: print(vol.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6697\u5149\u7ebf\u72b6\u6001\u4e0b\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u5f53\u5728\u5149\u4eae\u7684\u73af\u5883\uff0c\u8fd4\u56de\u503c\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u5149\u654f\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(vol.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u5b89\u9759\u65f6\u5019\u7684\u6570\u5b57\u8303\u56f4\u5927\u6982\u4e3a\uff1a50000\u4ee5\u4e0a 2. \u6709\u7a81\u53d1\u58f0\u54cd\u7684\u65f6\u5019\u6570\u503c\u4f1a\u4f4e\u4e8e10000\u4e00\u4e0b","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E5%85%89%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u667a\u80fd\u8def\u706f\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u667a\u80fd\u8def\u706f\uff08\u6570\u5b57\u4fe1\u53f7\u4fe1\u53f7\uff09 \u6bd4\u6697\u7684\u73af\u5883\u4e0b\u706f\u4eae\uff0c\u5149\u4eae\u7684\u73af\u5883\u4e0b\u706f\u706d ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = Pin(32, Pin.IN) while True: if vol.value() == 1: led.value(1) else: led.value(0) \u667a\u80fd\u8def\u706f\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c1\uff1a\u667a\u80fd\u8def\u706f\uff08\u6a21\u62df\u4fe1\u53f7\u4fe1\u53f7\uff09 \u6bd4\u6697\u7684\u73af\u5883\u4e0b\u706f\u4eae\uff0c\u5149\u4eae\u7684\u73af\u5883\u4e0b\u706f\u706d ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 vol = Pin(32, Pin.IN) led = Pin(2,Pin.OUT) vol = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if vol.read_u16() > 50000: led.value(1) else: led.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u667a\u80fd\u8def\u706f"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","text":"\u73af\u5883\u642d\u5efa MicroPython\u7b80\u4ecb MicroPython\u662fPython 3\u7684\u7cbe\u7b80\u9ad8\u6548\u79fb\u690d\u7248\u672c\uff0c\u4e13\u4e3a\u5fae\u63a7\u5236\u5668\u53ca\u8d44\u6e90\u53d7\u9650\u8bbe\u5907\u8bbe\u8ba1\uff0c\u7531Damien George\u4e8e2013\u5e74\u53d1\u8d77\u5f00\u6e90\u9879\u76ee\u3002\u5b83\u4fdd\u7559\u4e86Python\u7b80\u6d01\u6613\u61c2\u7684\u8bed\u6cd5\u7279\u6027\uff0c\u652f\u6301\u4ea4\u4e92\u5f0f\u7f16\u7a0b\uff08REPL\uff09\uff0c\u5f00\u53d1\u8005\u53ef\u901a\u8fc7\u4e32\u53e3\u76f4\u63a5\u7f16\u5199\u4ee3\u7801\u5e76\u5b9e\u65f6\u8c03\u8bd5\uff0c\u663e\u8457\u964d\u4f4e\u5d4c\u5165\u5f0f\u5f00\u53d1\u95e8\u69db\u3002\u5176\u6838\u5fc3\u4f18\u52bf\u5728\u4e8e\u786c\u4ef6\u76f4\u63a7\u80fd\u529b\u2014\u2014\u901a\u8fc7\u6807\u51c6\u5e93\u76f4\u63a5\u64cd\u4f5cGPIO\u3001PWM\u3001I2C\u7b49\u5916\u8bbe\uff0c\u65e0\u9700\u5e95\u5c42\u5bc4\u5b58\u5668\u914d\u7f6e\uff0c\u9002\u7528\u4e8e\u7269\u8054\u7f51\u7ec8\u7aef\u3001\u667a\u80fd\u786c\u4ef6\u7b49\u573a\u666f\u3002\u76f8\u6bd4\u4f20\u7edfC/C++\u5f00\u53d1\uff0cMicroPython\u727a\u7272\u90e8\u5206\u6027\u80fd\u6362\u53d6\u66f4\u9ad8\u5f00\u53d1\u6548\u7387\uff0c\u5178\u578b\u5185\u5b58\u5360\u7528\u4ec5256KB\uff0c\u652f\u6301ESP32\u3001STM32\u3001Raspberry Pi Pico\u7b49\u4e3b\u6d41\u82af\u7247\u3002\u793e\u533a\u751f\u6001\u6d3b\u8dc3\uff0c\u63d0\u4f9bThonny IDE\u3001WebREPL\u7b49\u5de5\u5177\u53ca\u4e0a\u5343\u4e2a\u5f00\u6e90\u6a21\u5757\uff0c\u6db5\u76d6\u4f20\u611f\u5668\u9a71\u52a8\u3001\u7f51\u7edc \u901a\u4fe1\u7b49\u529f\u80fd\uff0c\u6210\u4e3a\u521b\u5ba2\u6559\u80b2\u3001\u5de5\u4e1a\u539f\u578b\u5f00\u53d1\u7684\u70ed\u95e8\u9009\u62e9\u3002 \u5f00\u53d1\u677f\u4ecb\u7ecd \u8be5\u5f00\u53d1\u677f\u4f7f\u7528\u7684\u662f\u4e50\u946b\u516c\u53f82023\u5e74\u53d1\u5e03\u7684\u539f\u88c5\u5168\u65b0ESP32-WROOM-32E-N4/N8/N16\u3002\u76f8\u6bd4\u65e7\u7248\u672c\uff0c\u6539\u5584\u4e86\u82af\u7247\u5236\u4f5c\u5de5\u827a\uff0c\u51cf\u5c11\u4e86\u529f\u8017\u635f\u5931\uff0c\u63d0\u9ad8\u4e86\u4fe1\u53f7\u8d28\u91cf\u7b49\uff0c\u4fdd\u8bc1\u4e86\u7a33\u5b9a\u4f18\u79c0\u7684\u4f7f\u7528\u4f53\u9a8c\u3002\u5185\u7f6e\u4e3b\u9891240MHz\u7684\u53cc\u6838Xtensa\u00ae 32-bit LX6\u5904\u7406\u5668\uff0c448KB ROM\uff0c520KB SRAM , 16KB RTC SRAM\uff0c\u5916\u6269Flash\u53ef\u90094M\u30018M\u300116M\uff0c\u4ee5\u53ca\u652f\u6301\u4e30\u5bcc\u7684I/O\u63a5\u53e3\uff0c\u540c\u65f6\u652f\u6301Arduino\u7b49\u591a\u79cd\u5e38\u89c1\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f7f\u5176\u62e5\u6709\u5f3a\u5927\u51fa\u8272\u7684\u6027\u80fd\u548c\u6613\u7528\u6027\u3002 \u6280\u672f\u53c2\u6570 \u53c2\u6570\u9879 \u89c4\u683c\u63cf\u8ff0 \u5fae\u63a7\u5236\u5668 ESP32-WROOM-32E \u5de5\u4f5c\u7535\u538b 5V \u8f93\u5165\u7535\u538b\uff08\u63a8\u8350\uff09 6-9V\uff08DC\u76f4\u6d41\uff09 \u6570\u5b57\u5f15\u811a 20\u4e2a \u6a21\u62df\u8f93\u5165\u5f15\u811a 6 \u4e2a\uff0832,33,34,35,36,39\uff09 \u4e0b\u8f7d\u63a5\u53e3 USB Type-C \u65e0\u7ebf\u4f20\u8f93\u534f\u8bae WiFi 802.11 b/g/n \u84dd\u7259\u6807\u51c6 4.2BR/EDR/BLE\u6807\u51c6 \u82af\u7247\u65f6\u949f\u9891\u7387 240MHz \u5916\u6269Flash 4MB SRAM 520KB \u5185\u7f6eROM 448KB \u7279\u5f81: \u4f7f\u7528\u7684\u662f\u4e50\u946b\u516c\u53f82024\u5e74\u53d1\u5e03\u7684\u539f\u88c5\u5168\u65b0ESP32-S3-WROOM-1\u6a21\u7ec4 \u52a0\u5f3a\u4f9b\u7535\uff0cG|V\u80fd\u591f\u63d0\u4f9b\u6700\u59275V1A/3.3V1A\u7684\u8f93\u51fa\u80fd\u529b \u677f\u8f7d\u7535\u8def\u4fdd\u62a4\u548c\u7535\u6e90\u9009\u62e9\u7535\u8def Type-C\u901a\u4fe1\u63a5\u53e3\uff0c\u65e0\u9700\u533a\u5206\u6b63\u53cd\uff0c\u4f7f\u7528\u66f4\u65b9\u4fbf \u652f\u6301\u4e50\u9ad8\u7535\u6c60\u76d2\u8f93\u5165\u63a5\u53e3\uff0c\u5141\u8bb86-12VDC\u8f93\u5165 \u677f\u8f7d2.54\u95f4\u8dddG|V|S\u6269\u5c55\u6392\u9488\u63a5\u53e3\uff0c\u514d\u6269\u5c55\u677f\u4f7f\u7528 \u5f00\u53d1\u677f\u89e3\u6790 \u9009\u62e9Thonny\u5f00\u53d1\u5de5\u5177\u7684\u4e09\u5927\u7406\u7531\uff1a \u96f6\u914d\u7f6e\u6781\u7b80\u4f53\u9a8c Thonny\u5185\u7f6ePython\u89e3\u91ca\u5668\u4e0e\u5305\u7ba1\u7406\u5668\uff0c\u5f00\u7bb1\u5373\u7528\uff0c\u65e0\u9700\u73af\u5883\u53d8\u91cf\u914d\u7f6e\uff0c\u907f\u514d\u65b0\u624b\u5728\u73af\u5883\u642d\u5efa\u4e2d\u53d7\u632b\u3002\u5176\u754c\u9762\u53bb\u9664\u4e86\u590d\u6742\u529f\u80fd\uff0c\u805a\u7126\u4ee3\u7801\u7f16\u5199\u4e0e\u8c03\u8bd5\uff0c\u964d\u4f4e\u8ba4\u77e5\u8d1f\u8377\u3002 \u6559\u5b66\u53cb\u597d\u578b\u8c03\u8bd5\u5668 \u72ec\u521b\u7684\u300c\u53d8\u91cf\u53ef\u89c6\u5316\u300d\u529f\u80fd\u5b9e\u65f6\u5c55\u793a\u5185\u5b58\u6570\u636e\u53d8\u5316\uff0c\u914d\u5408\u5355\u6b65\u6267\u884c\u3001\u65ad\u70b9\u8c03\u8bd5\uff0c\u76f4\u89c2\u5448\u73b0\u4ee3\u7801\u6267\u884c\u903b\u8f91\u3002\u4f8b\u5982\u5faa\u73af\u8fc7\u7a0b\u4e2d\uff0c\u53d8\u91cf\u503c\u968f\u6b65\u9aa4\u9ad8\u4eae\u66f4\u65b0\uff0c\u5e2e\u52a9\u7406\u89e3\u7a0b\u5e8f\u8fd0\u884c\u673a\u5236\u3002 \u5d4c\u5165\u5f0f\u5f00\u53d1\u65e0\u7f1d\u8854\u63a5 \u539f\u751f\u652f\u6301MicroPython\uff0c\u53ef\u76f4\u8fdeESP32\u3001\u6811\u8393\u6d3ePico\u7b49\u786c\u4ef6\uff0c\u81ea\u52a8\u8bc6\u522b\u4e32\u53e3\u8bbe\u5907\uff0c\u63d0\u4f9bREPL\u4ea4\u4e92\u7ec8\u7aef\u3002\u6559\u5e08\u53ef\u4e00\u952e\u90e8\u7f72\u4ee3\u7801\u81f3\u5fae\u63a7\u5236\u5668\uff0c\u7ed3\u5408\u786c\u4ef6\u6559\u5b66\u573a\u666f\uff0c\u63d0\u5347\u5b9e\u8df5\u8da3\u5473\u6027\u3002 \u4e3b\u6d41\u5de5\u5177\u5bf9\u6bd4\uff1a \u5de5\u5177 \u4f18\u52bf \u4e0d\u8db3 \u9002\u7528\u4eba\u7fa4 VS Code/PyCharm - \u529f\u80fd\u5168\u9762\uff08\u4ee3\u7801\u8865\u5168\u3001\u63d2\u4ef6\u751f\u6001\uff09 - \u652f\u6301\u5927\u578b\u9879\u76ee\u7ba1\u7406 - \u914d\u7f6e\u590d\u6742\uff08\u9700\u624b\u52a8\u5b89\u88c5\u89e3\u91ca\u5668/\u6269\u5c55\uff09 - \u5b66\u4e60\u66f2\u7ebf\u9661\u5ced \u4e2d\u9ad8\u7ea7\u5f00\u53d1\u8005 IDLE - Python \u81ea\u5e26\uff0c\u65e0\u9700\u5b89\u88c5 - \u65e0\u8c03\u8bd5\u8f85\u52a9\u529f\u80fd - \u754c\u9762\u7b80\u964b \u4e34\u65f6\u7b80\u5355\u811a\u672c Thonny - \u96f6\u914d\u7f6e\u5f00\u7bb1\u5373\u7528 - \u53ef\u89c6\u5316\u8c03\u8bd5\u5668 - \u5d4c\u5165\u5f0f\u5f00\u53d1\u652f\u6301 - \u4e0d\u9002\u5408\u5927\u578b\u9879\u76ee \u7f16\u7a0b\u65b0\u624b/\u6559\u80b2\u573a\u666f \u5b9e\u6d4b\u6559\u5b66\u6570\u636e \u9879\u76ee\u5b8c\u6210\u8017\u65f6\u51cf\u5c11 40%\uff08Thonny vs \u4f20\u7edfIDE\uff09 \u4ee3\u7801\u9519\u8bef\u7387\u4e0b\u964d 35% \u6240\u4ee5\u63a8\u8350\u4f7f\u7528Thonny\u4f5c\u4e3aPython/MicroPython\u5165\u95e8\u9996\u9009\u5de5\u5177 Thonny\u8f6f\u4ef6\u7684\u5b89\u88c5 \u6211\u4eec\u53ef\u4ee5\u5728 Thonny \u5b98\u7f51\u4e0b\u8f7d\uff1a https://thonny.org/ \u4e0b\u8f7d\u597d\u4e4b\u540e\uff0c\u9f20\u6807\u53f3\u952e\u70b9\u51fb Thonny \u5b89\u88c5\u7a0b\u5e8f\uff0c\u9009\u62e9\u4ee5\u7ba1\u7406\u5458\u6a21\u5f0f\u8fd0\u884c\uff0c\u4e4b\u540e\u5c31\u65e0\u8111\u70b9\u51fb Next\uff0c\u9009\u62e9\u597d\u5b58\u653e\u8def\u5f84\u5373\u53ef\u3002 \u2757\ufe0f **\u91cd\u8981\u63d0\u793a** \u8def\u5f84\u683c\u5f0f\u8981\u6c42\uff1a - \u4ec5\u4f7f\u7528**\u82f1\u6587/\u6570\u5b57** - \u7981\u6b62 `\u4e2d\u6587`\u3001`!`\u3001`#` \u7b49\u5b57\u7b26 \u5982\u679c\u80fd\u6b63\u5e38\u6253\u5f00\uff0c\u8bf4\u660e\u5b89\u88c5\u6210\u529f\u3002 \u4e4b\u6240\u4ee5\u5728\u4e0b\u9762\u7684 shell \u4ea4\u4e92\u73af\u5883\u4e2d\u6709\u7ea2\u8272\u62a5\u9519\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u7684 ESP32 \u4e2d\u4e0d\u5b58\u5728 MicroPython \u56fa\u4ef6\uff0c\u56e0\u6b64\uff0c\u4e0d\u7528\u62c5\u5fc3\uff0c\u54b1\u4eec\u4e0b\u4e00\u6b65\u5c31\u662f\u70e7\u5f55 ESP32 MicroPython \u56fa\u4ef6\u4e86\u3002 \u914d\u7f6eMicroPython\u5f00\u53d1\u73af\u5883 \u9996\u5148\uff0c\u5728 Thonny \u4e2d\u663e\u793a\u672c\u5730\u4e0e\u5f00\u53d1\u677f\u4e2d\u7684\u5b9e\u65f6\u6587\u4ef6\u6d4f\u89c8\u7a97\u53e3\u3002 \u6253\u5f00 Thonny \u8f6f\u4ef6\uff0c\u70b9\u51fb\u89c6\u56fe\u9009\u62e9\u6587\u4ef6\uff0c\u5982\u4e0b\uff1a \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u770b\u5230\u4e86\u5de6\u4fa7\u51fa\u73b0\u672c\u5730\u548c\u5f00\u53d1\u677f\u7684\u5b9e\u65f6\u6587\u4ef6\u6d4f\u89c8\u7a97\u53e3\uff1a \u8fd9\u65f6\uff0c\u6211\u4eec\u770b\u5230\u5728\u5355\u7247\u673a\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u6587\u4ef6\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u4ea4\u4e92\u73af\u5883\u4e2d\u62a5\u9519\u7684\u539f\u56e0 - \u6ca1\u6709 MicroPython \u56fa\u4ef6\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e\u89e3\u91ca\u5668\u5e76\u70e7\u5f55\u56fa\u4ef6\u5230\u5355\u7247\u673a\u4e2d\u3002 \u70b9\u51fb\u53f3\u4e0b\u89d2\uff0c\u9009\u62e9\u914d\u7f6e\u89e3\u91ca\u5668\u3002 \u5728\u89e3\u91ca\u5668\u9875\u9762\uff0c\u9009\u62e9 MicroPython(ESP32) \u548c\u5f53\u524d\u5355\u7247\u673a\u5360\u7528\u7684\u7aef\u53e3\u3002 \u5728\u70b9\u51fb OK \u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u628a MicroPython \u56fa\u4ef6\u70e7\u5f55\u5230 ESP32 \u5355\u7247\u673a\u4e2d\u3002\u70b9\u51fb install or update MicroPython \u5728\u5f39\u51fa\u7684\u7a97\u53e3\u4e2d\u70b9\u51fb\u8fd9\u91cc\u3002 \u56fa\u4ef6\u9700\u8981\u5728 MicroPython\u7684\u5b98\u7f51\u4e0b\u8f7d https://micropython.org/download/ESP32_GENERIC/ \u4e0b\u8f7d\u597d\u56fa\u4ef6\u5907\u7528 \u70b9\u51fb\u5b89\u88c5\uff0c\u7b49\u5f85\u5b89\u88c5\u5b8c\u6bd5\u5373\u53ef\u3002 \u81f3\u6b64\u4f30\u8ba1\u70e7\u5f55\u5b8c\u6210\u3002 \u6211\u4eec\u6765\u5bf9\u9875\u9762\u8fdb\u884c\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u8ba9\u754c\u9762\u66f4\u7b26\u5408\u6211\u4eec\u7684\u4e60\u60ef \u9009\u62e9\u8bbe\u7f6e\u6210\u81ea\u5df1\u559c\u6b22\u7684\u9875\u9762\u663e\u793a\u6548\u679c \u52fe\u9009\u4ee3\u7801\u63d0\u793a\u529f\u80fd\uff0c\u5927\u5927\u63d0\u4f9b\u4ee3\u7801\u4e66\u5199\u6548\u7387 \u5728\u89e3\u91ca\u5668\u6807\u7b7e\u4e2d\u9009\u62e9\u597d\u5bf9\u5e94\u7684\u7aef\u53e3\u3002 \u5728\u89e3\u91ca\u5668\u6807\u7b7e\u4e2d\u9009\u62e9\u597d\u5bf9\u5e94\u7684\u7aef\u53e3\u3002 \u8f6f\u4ef6\u754c\u9762\u4ecb\u7ecd\u3002","title":"1.\u73af\u5883\u642d\u5efa"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_1","text":"","title":"\u73af\u5883\u642d\u5efa"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#micropython","text":"MicroPython\u662fPython 3\u7684\u7cbe\u7b80\u9ad8\u6548\u79fb\u690d\u7248\u672c\uff0c\u4e13\u4e3a\u5fae\u63a7\u5236\u5668\u53ca\u8d44\u6e90\u53d7\u9650\u8bbe\u5907\u8bbe\u8ba1\uff0c\u7531Damien George\u4e8e2013\u5e74\u53d1\u8d77\u5f00\u6e90\u9879\u76ee\u3002\u5b83\u4fdd\u7559\u4e86Python\u7b80\u6d01\u6613\u61c2\u7684\u8bed\u6cd5\u7279\u6027\uff0c\u652f\u6301\u4ea4\u4e92\u5f0f\u7f16\u7a0b\uff08REPL\uff09\uff0c\u5f00\u53d1\u8005\u53ef\u901a\u8fc7\u4e32\u53e3\u76f4\u63a5\u7f16\u5199\u4ee3\u7801\u5e76\u5b9e\u65f6\u8c03\u8bd5\uff0c\u663e\u8457\u964d\u4f4e\u5d4c\u5165\u5f0f\u5f00\u53d1\u95e8\u69db\u3002\u5176\u6838\u5fc3\u4f18\u52bf\u5728\u4e8e\u786c\u4ef6\u76f4\u63a7\u80fd\u529b\u2014\u2014\u901a\u8fc7\u6807\u51c6\u5e93\u76f4\u63a5\u64cd\u4f5cGPIO\u3001PWM\u3001I2C\u7b49\u5916\u8bbe\uff0c\u65e0\u9700\u5e95\u5c42\u5bc4\u5b58\u5668\u914d\u7f6e\uff0c\u9002\u7528\u4e8e\u7269\u8054\u7f51\u7ec8\u7aef\u3001\u667a\u80fd\u786c\u4ef6\u7b49\u573a\u666f\u3002\u76f8\u6bd4\u4f20\u7edfC/C++\u5f00\u53d1\uff0cMicroPython\u727a\u7272\u90e8\u5206\u6027\u80fd\u6362\u53d6\u66f4\u9ad8\u5f00\u53d1\u6548\u7387\uff0c\u5178\u578b\u5185\u5b58\u5360\u7528\u4ec5256KB\uff0c\u652f\u6301ESP32\u3001STM32\u3001Raspberry Pi Pico\u7b49\u4e3b\u6d41\u82af\u7247\u3002\u793e\u533a\u751f\u6001\u6d3b\u8dc3\uff0c\u63d0\u4f9bThonny IDE\u3001WebREPL\u7b49\u5de5\u5177\u53ca\u4e0a\u5343\u4e2a\u5f00\u6e90\u6a21\u5757\uff0c\u6db5\u76d6\u4f20\u611f\u5668\u9a71\u52a8\u3001\u7f51\u7edc \u901a\u4fe1\u7b49\u529f\u80fd\uff0c\u6210\u4e3a\u521b\u5ba2\u6559\u80b2\u3001\u5de5\u4e1a\u539f\u578b\u5f00\u53d1\u7684\u70ed\u95e8\u9009\u62e9\u3002 \u5f00\u53d1\u677f\u4ecb\u7ecd \u8be5\u5f00\u53d1\u677f\u4f7f\u7528\u7684\u662f\u4e50\u946b\u516c\u53f82023\u5e74\u53d1\u5e03\u7684\u539f\u88c5\u5168\u65b0ESP32-WROOM-32E-N4/N8/N16\u3002\u76f8\u6bd4\u65e7\u7248\u672c\uff0c\u6539\u5584\u4e86\u82af\u7247\u5236\u4f5c\u5de5\u827a\uff0c\u51cf\u5c11\u4e86\u529f\u8017\u635f\u5931\uff0c\u63d0\u9ad8\u4e86\u4fe1\u53f7\u8d28\u91cf\u7b49\uff0c\u4fdd\u8bc1\u4e86\u7a33\u5b9a\u4f18\u79c0\u7684\u4f7f\u7528\u4f53\u9a8c\u3002\u5185\u7f6e\u4e3b\u9891240MHz\u7684\u53cc\u6838Xtensa\u00ae 32-bit LX6\u5904\u7406\u5668\uff0c448KB ROM\uff0c520KB SRAM , 16KB RTC SRAM\uff0c\u5916\u6269Flash\u53ef\u90094M\u30018M\u300116M\uff0c\u4ee5\u53ca\u652f\u6301\u4e30\u5bcc\u7684I/O\u63a5\u53e3\uff0c\u540c\u65f6\u652f\u6301Arduino\u7b49\u591a\u79cd\u5e38\u89c1\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f7f\u5176\u62e5\u6709\u5f3a\u5927\u51fa\u8272\u7684\u6027\u80fd\u548c\u6613\u7528\u6027\u3002 \u6280\u672f\u53c2\u6570 \u53c2\u6570\u9879 \u89c4\u683c\u63cf\u8ff0 \u5fae\u63a7\u5236\u5668 ESP32-WROOM-32E \u5de5\u4f5c\u7535\u538b 5V \u8f93\u5165\u7535\u538b\uff08\u63a8\u8350\uff09 6-9V\uff08DC\u76f4\u6d41\uff09 \u6570\u5b57\u5f15\u811a 20\u4e2a \u6a21\u62df\u8f93\u5165\u5f15\u811a 6 \u4e2a\uff0832,33,34,35,36,39\uff09 \u4e0b\u8f7d\u63a5\u53e3 USB Type-C \u65e0\u7ebf\u4f20\u8f93\u534f\u8bae WiFi 802.11 b/g/n \u84dd\u7259\u6807\u51c6 4.2BR/EDR/BLE\u6807\u51c6 \u82af\u7247\u65f6\u949f\u9891\u7387 240MHz \u5916\u6269Flash 4MB SRAM 520KB \u5185\u7f6eROM 448KB \u7279\u5f81: \u4f7f\u7528\u7684\u662f\u4e50\u946b\u516c\u53f82024\u5e74\u53d1\u5e03\u7684\u539f\u88c5\u5168\u65b0ESP32-S3-WROOM-1\u6a21\u7ec4 \u52a0\u5f3a\u4f9b\u7535\uff0cG|V\u80fd\u591f\u63d0\u4f9b\u6700\u59275V1A/3.3V1A\u7684\u8f93\u51fa\u80fd\u529b \u677f\u8f7d\u7535\u8def\u4fdd\u62a4\u548c\u7535\u6e90\u9009\u62e9\u7535\u8def Type-C\u901a\u4fe1\u63a5\u53e3\uff0c\u65e0\u9700\u533a\u5206\u6b63\u53cd\uff0c\u4f7f\u7528\u66f4\u65b9\u4fbf \u652f\u6301\u4e50\u9ad8\u7535\u6c60\u76d2\u8f93\u5165\u63a5\u53e3\uff0c\u5141\u8bb86-12VDC\u8f93\u5165 \u677f\u8f7d2.54\u95f4\u8dddG|V|S\u6269\u5c55\u6392\u9488\u63a5\u53e3\uff0c\u514d\u6269\u5c55\u677f\u4f7f\u7528 \u5f00\u53d1\u677f\u89e3\u6790","title":"MicroPython\u7b80\u4ecb"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#thonny","text":"\u96f6\u914d\u7f6e\u6781\u7b80\u4f53\u9a8c Thonny\u5185\u7f6ePython\u89e3\u91ca\u5668\u4e0e\u5305\u7ba1\u7406\u5668\uff0c\u5f00\u7bb1\u5373\u7528\uff0c\u65e0\u9700\u73af\u5883\u53d8\u91cf\u914d\u7f6e\uff0c\u907f\u514d\u65b0\u624b\u5728\u73af\u5883\u642d\u5efa\u4e2d\u53d7\u632b\u3002\u5176\u754c\u9762\u53bb\u9664\u4e86\u590d\u6742\u529f\u80fd\uff0c\u805a\u7126\u4ee3\u7801\u7f16\u5199\u4e0e\u8c03\u8bd5\uff0c\u964d\u4f4e\u8ba4\u77e5\u8d1f\u8377\u3002 \u6559\u5b66\u53cb\u597d\u578b\u8c03\u8bd5\u5668 \u72ec\u521b\u7684\u300c\u53d8\u91cf\u53ef\u89c6\u5316\u300d\u529f\u80fd\u5b9e\u65f6\u5c55\u793a\u5185\u5b58\u6570\u636e\u53d8\u5316\uff0c\u914d\u5408\u5355\u6b65\u6267\u884c\u3001\u65ad\u70b9\u8c03\u8bd5\uff0c\u76f4\u89c2\u5448\u73b0\u4ee3\u7801\u6267\u884c\u903b\u8f91\u3002\u4f8b\u5982\u5faa\u73af\u8fc7\u7a0b\u4e2d\uff0c\u53d8\u91cf\u503c\u968f\u6b65\u9aa4\u9ad8\u4eae\u66f4\u65b0\uff0c\u5e2e\u52a9\u7406\u89e3\u7a0b\u5e8f\u8fd0\u884c\u673a\u5236\u3002 \u5d4c\u5165\u5f0f\u5f00\u53d1\u65e0\u7f1d\u8854\u63a5 \u539f\u751f\u652f\u6301MicroPython\uff0c\u53ef\u76f4\u8fdeESP32\u3001\u6811\u8393\u6d3ePico\u7b49\u786c\u4ef6\uff0c\u81ea\u52a8\u8bc6\u522b\u4e32\u53e3\u8bbe\u5907\uff0c\u63d0\u4f9bREPL\u4ea4\u4e92\u7ec8\u7aef\u3002\u6559\u5e08\u53ef\u4e00\u952e\u90e8\u7f72\u4ee3\u7801\u81f3\u5fae\u63a7\u5236\u5668\uff0c\u7ed3\u5408\u786c\u4ef6\u6559\u5b66\u573a\u666f\uff0c\u63d0\u5347\u5b9e\u8df5\u8da3\u5473\u6027\u3002","title":"\u9009\u62e9Thonny\u5f00\u53d1\u5de5\u5177\u7684\u4e09\u5927\u7406\u7531\uff1a"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_2","text":"\u5de5\u5177 \u4f18\u52bf \u4e0d\u8db3 \u9002\u7528\u4eba\u7fa4 VS Code/PyCharm - \u529f\u80fd\u5168\u9762\uff08\u4ee3\u7801\u8865\u5168\u3001\u63d2\u4ef6\u751f\u6001\uff09 - \u652f\u6301\u5927\u578b\u9879\u76ee\u7ba1\u7406 - \u914d\u7f6e\u590d\u6742\uff08\u9700\u624b\u52a8\u5b89\u88c5\u89e3\u91ca\u5668/\u6269\u5c55\uff09 - \u5b66\u4e60\u66f2\u7ebf\u9661\u5ced \u4e2d\u9ad8\u7ea7\u5f00\u53d1\u8005 IDLE - Python \u81ea\u5e26\uff0c\u65e0\u9700\u5b89\u88c5 - \u65e0\u8c03\u8bd5\u8f85\u52a9\u529f\u80fd - \u754c\u9762\u7b80\u964b \u4e34\u65f6\u7b80\u5355\u811a\u672c Thonny - \u96f6\u914d\u7f6e\u5f00\u7bb1\u5373\u7528 - \u53ef\u89c6\u5316\u8c03\u8bd5\u5668 - \u5d4c\u5165\u5f0f\u5f00\u53d1\u652f\u6301 - \u4e0d\u9002\u5408\u5927\u578b\u9879\u76ee \u7f16\u7a0b\u65b0\u624b/\u6559\u80b2\u573a\u666f","title":"\u4e3b\u6d41\u5de5\u5177\u5bf9\u6bd4\uff1a"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_3","text":"\u9879\u76ee\u5b8c\u6210\u8017\u65f6\u51cf\u5c11 40%\uff08Thonny vs \u4f20\u7edfIDE\uff09 \u4ee3\u7801\u9519\u8bef\u7387\u4e0b\u964d 35% \u6240\u4ee5\u63a8\u8350\u4f7f\u7528Thonny\u4f5c\u4e3aPython/MicroPython\u5165\u95e8\u9996\u9009\u5de5\u5177","title":"\u5b9e\u6d4b\u6559\u5b66\u6570\u636e"},{"location":"MicroPython/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#thonny_1","text":"\u6211\u4eec\u53ef\u4ee5\u5728 Thonny \u5b98\u7f51\u4e0b\u8f7d\uff1a https://thonny.org/ \u4e0b\u8f7d\u597d\u4e4b\u540e\uff0c\u9f20\u6807\u53f3\u952e\u70b9\u51fb Thonny \u5b89\u88c5\u7a0b\u5e8f\uff0c\u9009\u62e9\u4ee5\u7ba1\u7406\u5458\u6a21\u5f0f\u8fd0\u884c\uff0c\u4e4b\u540e\u5c31\u65e0\u8111\u70b9\u51fb Next\uff0c\u9009\u62e9\u597d\u5b58\u653e\u8def\u5f84\u5373\u53ef\u3002 \u2757\ufe0f **\u91cd\u8981\u63d0\u793a** \u8def\u5f84\u683c\u5f0f\u8981\u6c42\uff1a - \u4ec5\u4f7f\u7528**\u82f1\u6587/\u6570\u5b57** - \u7981\u6b62 `\u4e2d\u6587`\u3001`!`\u3001`#` \u7b49\u5b57\u7b26 \u5982\u679c\u80fd\u6b63\u5e38\u6253\u5f00\uff0c\u8bf4\u660e\u5b89\u88c5\u6210\u529f\u3002 \u4e4b\u6240\u4ee5\u5728\u4e0b\u9762\u7684 shell \u4ea4\u4e92\u73af\u5883\u4e2d\u6709\u7ea2\u8272\u62a5\u9519\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u7684 ESP32 \u4e2d\u4e0d\u5b58\u5728 MicroPython \u56fa\u4ef6\uff0c\u56e0\u6b64\uff0c\u4e0d\u7528\u62c5\u5fc3\uff0c\u54b1\u4eec\u4e0b\u4e00\u6b65\u5c31\u662f\u70e7\u5f55 ESP32 MicroPython \u56fa\u4ef6\u4e86\u3002 \u914d\u7f6eMicroPython\u5f00\u53d1\u73af\u5883 \u9996\u5148\uff0c\u5728 Thonny \u4e2d\u663e\u793a\u672c\u5730\u4e0e\u5f00\u53d1\u677f\u4e2d\u7684\u5b9e\u65f6\u6587\u4ef6\u6d4f\u89c8\u7a97\u53e3\u3002 \u6253\u5f00 Thonny \u8f6f\u4ef6\uff0c\u70b9\u51fb\u89c6\u56fe\u9009\u62e9\u6587\u4ef6\uff0c\u5982\u4e0b\uff1a \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u770b\u5230\u4e86\u5de6\u4fa7\u51fa\u73b0\u672c\u5730\u548c\u5f00\u53d1\u677f\u7684\u5b9e\u65f6\u6587\u4ef6\u6d4f\u89c8\u7a97\u53e3\uff1a \u8fd9\u65f6\uff0c\u6211\u4eec\u770b\u5230\u5728\u5355\u7247\u673a\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u6587\u4ef6\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u4ea4\u4e92\u73af\u5883\u4e2d\u62a5\u9519\u7684\u539f\u56e0 - \u6ca1\u6709 MicroPython \u56fa\u4ef6\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e\u89e3\u91ca\u5668\u5e76\u70e7\u5f55\u56fa\u4ef6\u5230\u5355\u7247\u673a\u4e2d\u3002 \u70b9\u51fb\u53f3\u4e0b\u89d2\uff0c\u9009\u62e9\u914d\u7f6e\u89e3\u91ca\u5668\u3002 \u5728\u89e3\u91ca\u5668\u9875\u9762\uff0c\u9009\u62e9 MicroPython(ESP32) \u548c\u5f53\u524d\u5355\u7247\u673a\u5360\u7528\u7684\u7aef\u53e3\u3002 \u5728\u70b9\u51fb OK \u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u628a MicroPython \u56fa\u4ef6\u70e7\u5f55\u5230 ESP32 \u5355\u7247\u673a\u4e2d\u3002\u70b9\u51fb install or update MicroPython \u5728\u5f39\u51fa\u7684\u7a97\u53e3\u4e2d\u70b9\u51fb\u8fd9\u91cc\u3002 \u56fa\u4ef6\u9700\u8981\u5728 MicroPython\u7684\u5b98\u7f51\u4e0b\u8f7d https://micropython.org/download/ESP32_GENERIC/ \u4e0b\u8f7d\u597d\u56fa\u4ef6\u5907\u7528 \u70b9\u51fb\u5b89\u88c5\uff0c\u7b49\u5f85\u5b89\u88c5\u5b8c\u6bd5\u5373\u53ef\u3002 \u81f3\u6b64\u4f30\u8ba1\u70e7\u5f55\u5b8c\u6210\u3002 \u6211\u4eec\u6765\u5bf9\u9875\u9762\u8fdb\u884c\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u8ba9\u754c\u9762\u66f4\u7b26\u5408\u6211\u4eec\u7684\u4e60\u60ef \u9009\u62e9\u8bbe\u7f6e\u6210\u81ea\u5df1\u559c\u6b22\u7684\u9875\u9762\u663e\u793a\u6548\u679c \u52fe\u9009\u4ee3\u7801\u63d0\u793a\u529f\u80fd\uff0c\u5927\u5927\u63d0\u4f9b\u4ee3\u7801\u4e66\u5199\u6548\u7387 \u5728\u89e3\u91ca\u5668\u6807\u7b7e\u4e2d\u9009\u62e9\u597d\u5bf9\u5e94\u7684\u7aef\u53e3\u3002 \u5728\u89e3\u91ca\u5668\u6807\u7b7e\u4e2d\u9009\u62e9\u597d\u5bf9\u5e94\u7684\u7aef\u53e3\u3002 \u8f6f\u4ef6\u754c\u9762\u4ecb\u7ecd\u3002","title":"Thonny\u8f6f\u4ef6\u7684\u5b89\u88c5"},{"location":"MicroPython/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA/","text":"\u76f4\u6d41\u7535\u673a \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6309\u952e 1 4 \u76f4\u6d41\u7535\u673a 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6309\u952e 2 2 \u76f4\u6d41\u7535\u673a - A 17 3 \u76f4\u6d41\u7535\u673a - B 16 \u5b9e\u7269\u63a5\u7ebf \u4e0a\u624b\u5b9e\u9a8c \u5b9e\u9a8c\u4e00\uff1a\u6b63\u53cd\u8f6c\u6d4b\u8bd5 \u5b9e\u9a8c\u8981\u6c42\uff1a \u6b63\u8f6c2\u79d2\uff0c\u53cd\u88c52\u79d2\uff0c\u7136\u540e\u505c\u6b62 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin, PWM import time pin16 = Pin(16,Pin.OUT) pin17 = Pin(17,Pin.OUT) pin2 = Pin(2,Pin.IN) # \u6b63\u8f6c2\u79d2 pin16.value(1) pin17.value(0) time.sleep(2) # \u53cd\u8f6c2\u79d2 pin16.value(0) pin17.value(1) time.sleep(2) # \u505c\u6b62 pin16.value(0) pin17.value(0) \u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u6309\u952e\u63a7\u5236\u7535\u673a\u8f6c\u52a8 \u7a0b\u5e8f\u8981\u6c42 \u6309\u952e\u6309\u4e0b\u540e\u7535\u673a\u5f00\u59cb\u8f6c\u52a8\uff0c\u518d\u6b21\u6309\u4e0b\u540e\u7535\u673a\u7535\u673a\u505c\u6b62\u8f6c\u52a8 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time pin2 = Pin(2,Pin.IN) pin16 = Pin(16,Pin.OUT) pin17 = Pin(17,Pin.OUT) while True: while pin2.value() == 1: # \u6309\u952e\u9632\u6296 pass while pin2.value() == 0: pin16.value(1) pin17.value(0) while pin2.value() == 1: # \u6309\u952e\u9632\u6296 pass while pin2.value() == 0: pin16.value(0) pin17.value(0) \u5b9e\u9a8c\u4e09\uff1a\u4f7f\u7528\u65cb\u94ae\u7535\u4f4d\u5668\u63a7\u5236\u7535\u673a\u8f6c\u901f \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u65cb\u94ae\u7f16\u7801\u5668 1 4 \u76f4\u6d41\u7535\u673a 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5b9e\u7269\u642d\u5efa ADC\uff08\u6570\u6a21\u8f6c\u6362\u5668\uff09\u7b80\u4ecb\uff1a ADC\uff08Analog to Digital Converter\uff09\u5373\u6570\u6a21\u8f6c\u6362\u5668\uff0c\u5176\u529f\u80fd\u662f\u5c06\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\u3002ESP32\u5355\u7247\u673a\u53ef\u4f7f\u7528ADC1\u3001ADC2\u4e24\u7ec4ADC\uff0c\u6bcf\u7ec4\u6709\u591a\u8defADC\u8f93\u5165\u7aef\uff0c\u6ca1\u8defADC\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5355\u72ec\u7684ADC\uff0cADC1\u7ec4\u7684ADC\u8f93\u5165\u7aef\u670932~39\u5f15\u811a\uff0cADC2\u7ec4\u7684ADC\u8f93\u5165\u7aef\u67092\u30014\u300112~15\u300125~27\u5f15\u811a\uff0cESP32\u4e2dADC\u9ed8\u8ba4\u662f\u5c060~1.0v\u7684\u7535\u538b\u8f6c\u6362\u62100~4095\u3002 ADC\u7684\u7c7b\u548c\u51fd\u6570 \u6784\u5efaADC\u5bf9\u8c61 machine.ADC(Pin(id)) id \u4e3aADC\u4f7f\u7528\u7684\u5f15\u811a ADC\u7ec4\u522b \u53ef\u7528GPIO\u5f15\u811a \u9ed8\u8ba4\u91cf\u7a0b \u5206\u8fa8\u7387 \u6ce8\u610f\u4e8b\u9879 ADC1 32, 33, 34, 35, 36, 37, 38, 39 0-1.0V \u2192 0-4095 12\u4f4d WiFi\u5f00\u542f\u65f6\u4ecd\u53ef\u7528 ADC2 0, 2, 4, 12, 13, 14, 15, 25, 26, 27 0-1.0V \u2192 0-4095 12\u4f4d \u542f\u7528WiFi\u540e\u4e0d\u53ef\u7528 2. ADC\u7684\u8870\u51cf ADC\u9ed8\u8ba4\u53ea\u80fd\u8f93\u5165\u8f6c\u63620~1v\u7684\u7535\u538b\uff0c\u8981\u6d4b\u91cf\u5176\u4ed6\u8303\u56f4\u7684\u7535\u538b\u53ef\u4ee5\u5bf9\u8f93\u5165\u7535\u538b\u8fdb\u884c\u8870\u51cf\u3002ADC\u8870\u51cf\u4f7f\u7528ADC\u7c7b\u4e2d\u7684 atten() \u51fd\u6570\uff1a ADC.atten(atten) \u5e8f\u53f7 \u53c2\u6570\u503c \u8870\u51cf\u91cf \u6d4b\u91cf\u8303\u56f4 1 ADC.ATTEN_0DB 0 \u8870\u51cf 0~1.0v 2 ADC.ATTEN_2_5DB 2.5dB \u8870\u51cf 0~1.34v 3 ADC.ATTEN_6DB 6dB \u8870\u51cf 0~2v 4 ADC.ATTEN_11DB 11dB \u8870\u51cf 0~3.6v ADC\u7684\u5206\u8fa8\u7387 ADC\u5206\u8fa8\u7387\u6307ADC\u503c\u7684\u4f4d\u6570\uff0c\u4f4d\u6570\u8d8a\u591a\uff0cADC\u503c\u53cd\u5e94\u7684\u6a21\u62df\u7535\u538b\u503c\u8d8a\u7cbe\u786e\u3002ADC\u5206\u8fa8\u7387\u4f7f\u7528ADC\u7c7b\u4e2d\u7684 width() \u51fd\u6570\uff0c\u8bed\u6cd5\u683c\u5f0f\uff1a ADC.width(bits) bits\u7528\u4e8e\u6307\u5b9a\u5206\u8fa8\u7387\u3002 \u5e8f\u53f7 \u53c2\u6570\u503c \u4f4d \u503c\u8303\u56f4 1 ADC.WIDTH_9BIT 9 0~511 2 ADC.WIDTH_10BIT 10 0~1023 3 ADC.WIDTH_11BIT 11 0~2047 4 ADC.WIDTH_12BIT 12 0~4095 \u8bfb\u53d6ADC\u503c \u8bfb\u53d6ADC\u503c\uff0c\u4f7f\u7528ADC\u7c7b\u4e2d\u7684 read() \u51fd\u6570\uff1a ADC.read() \u8be5\u51fd\u6570\u8fd4\u56de\u6307\u5b9a\u5206\u8fa8\u7387\u7684\u6a21\u62df\u7535\u538b\u8f6c\u6362\u6210\u7684ADC\u503c\uff0c\u9ed8\u8ba4\u5206\u8fa8\u7387\u4e3a12\u4f4d\uff0cADC\u7684\u503c\u8303\u56f4\u4e3a0~4095 \u5e8f\u53f7 \u8fd4\u56de\u503c\u7c7b\u578b ADC\u503c\u8303\u56f4 1 ADC.read() 0~4095\uff08\u6574\u6570\uff09 2 ADC.read_uv() \u6beb\u4f0f 3 ADC.read_u16() 0~65536\uff08\u6574\u6570\uff09 - \u4ee3\u7801\u793a\u4f8b: # \u4ecemachine\u6a21\u5757\u4e2d\u5bfc\u5165Pin\u7c7b\u548cADC\u7c7b from machine import Pin,ADC # \u793a\u4f8b\u5316\u4e00\u4e2aADC\u5bf9\u8c61 adc1 = ADC(Pin(35)) adc1.read() # \u6309\u7167\u9ed8\u8ba4\u914d\u7f6e\u8bfb\u53d6\u7535\u538b\u8f6c\u6362\u6210ADC\u503c\uff080~4095\u8868\u793a0~1.0V\u7535\u538b\uff09 # \u5c06ADC\u8870\u51cf\u91cf\u8bbe\u7f6e\u4e3a11DB\uff0c\u8f6c\u6362\u62100~3.6v\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b adc1.atten(ADC.ATTN_11DB) adc1.read() # \u6309\u7167\u7684\u65b0\u8870\u51cf\u91cf\u8bfb\u53d6\u8f6c\u6362\u540e\u7684ADC\u503c \u5b9e\u9a8c\u7a0b\u5e8f\u4ee3\u7801\uff1a from machine import Pin,ADC,PWM import time # \u521d\u59cb\u5316\u5f15\u811a encoder = ADC(Pin(32)) # \u65cb\u94ae\u63a532\u53f7\u5f15\u811a # \u5c06ADC\u8870\u51cf\u91cf\u8bbe\u7f6e\u4e3a11DB\uff0c\u8f6c\u6362\u62100~3.6v\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b encoder.atten(ADC.ATTN_11DB) motor_a = PWM(Pin(17), freq=1000) # \u7535\u673a\u5f15\u811aA motor_b = PWM(Pin(16), freq=1000) # \u7535\u673a\u5f15\u811aB value = 0 # \u521d\u59cb\u503c\u4e3a0 speed = 0 # \u521d\u59cb\u901f\u5ea6\u4e3a0 # \u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min while True: value = encoder.read() # \u503c\u7684\u8303\u56f4\u4e3a0~4095 speed = int(math_map(value,0,4095,0,1023)) print(speed) motor_a.duty(speed) motor_b.duty(0)","title":"8.\u76f4\u6d41\u7535\u673a"},{"location":"MicroPython/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA/#_1","text":"","title":"\u76f4\u6d41\u7535\u673a"},{"location":"MicroPython/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u6309\u952e 1 4 \u76f4\u6d41\u7535\u673a 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6309\u952e 2 2 \u76f4\u6d41\u7535\u673a - A 17 3 \u76f4\u6d41\u7535\u673a - B 16 \u5b9e\u7269\u63a5\u7ebf","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA/#_3","text":"","title":"\u4e0a\u624b\u5b9e\u9a8c"},{"location":"MicroPython/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA/#_4","text":"\u5b9e\u9a8c\u8981\u6c42\uff1a \u6b63\u8f6c2\u79d2\uff0c\u53cd\u88c52\u79d2\uff0c\u7136\u540e\u505c\u6b62 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin, PWM import time pin16 = Pin(16,Pin.OUT) pin17 = Pin(17,Pin.OUT) pin2 = Pin(2,Pin.IN) # \u6b63\u8f6c2\u79d2 pin16.value(1) pin17.value(0) time.sleep(2) # \u53cd\u8f6c2\u79d2 pin16.value(0) pin17.value(1) time.sleep(2) # \u505c\u6b62 pin16.value(0) pin17.value(0)","title":"\u5b9e\u9a8c\u4e00\uff1a\u6b63\u53cd\u8f6c\u6d4b\u8bd5"},{"location":"MicroPython/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA/#_5","text":"\u7a0b\u5e8f\u8981\u6c42 \u6309\u952e\u6309\u4e0b\u540e\u7535\u673a\u5f00\u59cb\u8f6c\u52a8\uff0c\u518d\u6b21\u6309\u4e0b\u540e\u7535\u673a\u7535\u673a\u505c\u6b62\u8f6c\u52a8 \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin import time pin2 = Pin(2,Pin.IN) pin16 = Pin(16,Pin.OUT) pin17 = Pin(17,Pin.OUT) while True: while pin2.value() == 1: # \u6309\u952e\u9632\u6296 pass while pin2.value() == 0: pin16.value(1) pin17.value(0) while pin2.value() == 1: # \u6309\u952e\u9632\u6296 pass while pin2.value() == 0: pin16.value(0) pin17.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u4f7f\u7528\u6309\u952e\u63a7\u5236\u7535\u673a\u8f6c\u52a8"},{"location":"MicroPython/%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA/#_6","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u65cb\u94ae\u7f16\u7801\u5668 1 4 \u76f4\u6d41\u7535\u673a 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5b9e\u7269\u642d\u5efa ADC\uff08\u6570\u6a21\u8f6c\u6362\u5668\uff09\u7b80\u4ecb\uff1a ADC\uff08Analog to Digital Converter\uff09\u5373\u6570\u6a21\u8f6c\u6362\u5668\uff0c\u5176\u529f\u80fd\u662f\u5c06\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\u3002ESP32\u5355\u7247\u673a\u53ef\u4f7f\u7528ADC1\u3001ADC2\u4e24\u7ec4ADC\uff0c\u6bcf\u7ec4\u6709\u591a\u8defADC\u8f93\u5165\u7aef\uff0c\u6ca1\u8defADC\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5355\u72ec\u7684ADC\uff0cADC1\u7ec4\u7684ADC\u8f93\u5165\u7aef\u670932~39\u5f15\u811a\uff0cADC2\u7ec4\u7684ADC\u8f93\u5165\u7aef\u67092\u30014\u300112~15\u300125~27\u5f15\u811a\uff0cESP32\u4e2dADC\u9ed8\u8ba4\u662f\u5c060~1.0v\u7684\u7535\u538b\u8f6c\u6362\u62100~4095\u3002 ADC\u7684\u7c7b\u548c\u51fd\u6570 \u6784\u5efaADC\u5bf9\u8c61 machine.ADC(Pin(id)) id \u4e3aADC\u4f7f\u7528\u7684\u5f15\u811a ADC\u7ec4\u522b \u53ef\u7528GPIO\u5f15\u811a \u9ed8\u8ba4\u91cf\u7a0b \u5206\u8fa8\u7387 \u6ce8\u610f\u4e8b\u9879 ADC1 32, 33, 34, 35, 36, 37, 38, 39 0-1.0V \u2192 0-4095 12\u4f4d WiFi\u5f00\u542f\u65f6\u4ecd\u53ef\u7528 ADC2 0, 2, 4, 12, 13, 14, 15, 25, 26, 27 0-1.0V \u2192 0-4095 12\u4f4d \u542f\u7528WiFi\u540e\u4e0d\u53ef\u7528 2. ADC\u7684\u8870\u51cf ADC\u9ed8\u8ba4\u53ea\u80fd\u8f93\u5165\u8f6c\u63620~1v\u7684\u7535\u538b\uff0c\u8981\u6d4b\u91cf\u5176\u4ed6\u8303\u56f4\u7684\u7535\u538b\u53ef\u4ee5\u5bf9\u8f93\u5165\u7535\u538b\u8fdb\u884c\u8870\u51cf\u3002ADC\u8870\u51cf\u4f7f\u7528ADC\u7c7b\u4e2d\u7684 atten() \u51fd\u6570\uff1a ADC.atten(atten) \u5e8f\u53f7 \u53c2\u6570\u503c \u8870\u51cf\u91cf \u6d4b\u91cf\u8303\u56f4 1 ADC.ATTEN_0DB 0 \u8870\u51cf 0~1.0v 2 ADC.ATTEN_2_5DB 2.5dB \u8870\u51cf 0~1.34v 3 ADC.ATTEN_6DB 6dB \u8870\u51cf 0~2v 4 ADC.ATTEN_11DB 11dB \u8870\u51cf 0~3.6v ADC\u7684\u5206\u8fa8\u7387 ADC\u5206\u8fa8\u7387\u6307ADC\u503c\u7684\u4f4d\u6570\uff0c\u4f4d\u6570\u8d8a\u591a\uff0cADC\u503c\u53cd\u5e94\u7684\u6a21\u62df\u7535\u538b\u503c\u8d8a\u7cbe\u786e\u3002ADC\u5206\u8fa8\u7387\u4f7f\u7528ADC\u7c7b\u4e2d\u7684 width() \u51fd\u6570\uff0c\u8bed\u6cd5\u683c\u5f0f\uff1a ADC.width(bits) bits\u7528\u4e8e\u6307\u5b9a\u5206\u8fa8\u7387\u3002 \u5e8f\u53f7 \u53c2\u6570\u503c \u4f4d \u503c\u8303\u56f4 1 ADC.WIDTH_9BIT 9 0~511 2 ADC.WIDTH_10BIT 10 0~1023 3 ADC.WIDTH_11BIT 11 0~2047 4 ADC.WIDTH_12BIT 12 0~4095 \u8bfb\u53d6ADC\u503c \u8bfb\u53d6ADC\u503c\uff0c\u4f7f\u7528ADC\u7c7b\u4e2d\u7684 read() \u51fd\u6570\uff1a ADC.read() \u8be5\u51fd\u6570\u8fd4\u56de\u6307\u5b9a\u5206\u8fa8\u7387\u7684\u6a21\u62df\u7535\u538b\u8f6c\u6362\u6210\u7684ADC\u503c\uff0c\u9ed8\u8ba4\u5206\u8fa8\u7387\u4e3a12\u4f4d\uff0cADC\u7684\u503c\u8303\u56f4\u4e3a0~4095 \u5e8f\u53f7 \u8fd4\u56de\u503c\u7c7b\u578b ADC\u503c\u8303\u56f4 1 ADC.read() 0~4095\uff08\u6574\u6570\uff09 2 ADC.read_uv() \u6beb\u4f0f 3 ADC.read_u16() 0~65536\uff08\u6574\u6570\uff09 - \u4ee3\u7801\u793a\u4f8b: # \u4ecemachine\u6a21\u5757\u4e2d\u5bfc\u5165Pin\u7c7b\u548cADC\u7c7b from machine import Pin,ADC # \u793a\u4f8b\u5316\u4e00\u4e2aADC\u5bf9\u8c61 adc1 = ADC(Pin(35)) adc1.read() # \u6309\u7167\u9ed8\u8ba4\u914d\u7f6e\u8bfb\u53d6\u7535\u538b\u8f6c\u6362\u6210ADC\u503c\uff080~4095\u8868\u793a0~1.0V\u7535\u538b\uff09 # \u5c06ADC\u8870\u51cf\u91cf\u8bbe\u7f6e\u4e3a11DB\uff0c\u8f6c\u6362\u62100~3.6v\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b adc1.atten(ADC.ATTN_11DB) adc1.read() # \u6309\u7167\u7684\u65b0\u8870\u51cf\u91cf\u8bfb\u53d6\u8f6c\u6362\u540e\u7684ADC\u503c \u5b9e\u9a8c\u7a0b\u5e8f\u4ee3\u7801\uff1a from machine import Pin,ADC,PWM import time # \u521d\u59cb\u5316\u5f15\u811a encoder = ADC(Pin(32)) # \u65cb\u94ae\u63a532\u53f7\u5f15\u811a # \u5c06ADC\u8870\u51cf\u91cf\u8bbe\u7f6e\u4e3a11DB\uff0c\u8f6c\u6362\u62100~3.6v\u8303\u56f4\u7684\u6a21\u62df\u7535\u538b encoder.atten(ADC.ATTN_11DB) motor_a = PWM(Pin(17), freq=1000) # \u7535\u673a\u5f15\u811aA motor_b = PWM(Pin(16), freq=1000) # \u7535\u673a\u5f15\u811aB value = 0 # \u521d\u59cb\u503c\u4e3a0 speed = 0 # \u521d\u59cb\u901f\u5ea6\u4e3a0 # \u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04\u51fd\u6570 def math_map(x, in_min, in_max, out_min, out_max): \"\"\" \u5c06 x \u4ece [in_min, in_max] \u7ebf\u6027\u6620\u5c04\u5230 [out_min, out_max] \"\"\" return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min while True: value = encoder.read() # \u503c\u7684\u8303\u56f4\u4e3a0~4095 speed = int(math_map(value,0,4095,0,1023)) print(speed) motor_a.duty(speed) motor_b.duty(0)","title":"\u5b9e\u9a8c\u4e09\uff1a\u4f7f\u7528\u65cb\u94ae\u7535\u4f4d\u5668\u63a7\u5236\u7535\u673a\u8f6c\u901f"},{"location":"MicroPython/%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98/","text":"\u77e9\u9635\u952e\u76d8 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u77e9\u9635\u952e\u76d8 1 4 \u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8702\u9e23\u5668 2 2 \u77e9\u9635\u952e\u76d8 32 \u77e9\u9635\u952e\u76d8\u4ecb\u7ecd 12\u952e\u77e9\u9635\u952e\u76d8\u542b12\u4e2a\u56db\u811a\u6309\u952e\uff0c\u4f9d\u9760\u91d1\u5c5e\u5f39\u7247\u6765\u4fdd\u62a4\u53d7\u529b\u60c5\u51b5\uff0c\u6bcf\u4e2a\u6309\u952e\u7684\u56db\u4e2a\u5f15\u811a\u6392\u5217\u6210\u77e9\u9635\u7684\u5f62\u5f0f\u3002\u572812\u952e\u77e9\u9635\u952e\u76d8\u6a21\u5757\u4e2d\uff0c\u5f53\u67d0\u4e2a\u6309\u94ae\u88ab\u6309\u538b\u65f6\uff0c\u7535\u8def\u5bfc\u901a\uff1b\u5f53\u64a4\u9500\u8fd9\u79cd\u538b\u529b\u7684\u65f6\u5019\uff0c\u7535\u8def\u65ad\u5f00\u3002\u8fd9\u4e2a\u65bd\u538b\u7684\u529b\uff0c\u5c31\u662f\u7528\u6211\u4eec\u7684\u624b\u53bb\u5f00\u6309\u94ae\u3001\u5173\u6309\u94ae\u7684\u52a8\u4f5c\u300212\u952e\u77e9\u9635\u952e\u76d8\u5171\u7528\u4e00\u4e2a\u6a21\u62df\u4fe1\u53f7\u8f93\u5165\uff0c\u5f53\u4e0d\u540c\u6309\u952e\u88ab\u6309\u4e0b\u65f6\u6240\u8f93\u51fa\u7684\u6a21\u62df\u503c\u4e0d\u540c\uff0c\u7531\u6b64\u53ef\u4ee5\u5224\u65ad\u662f\u54ea\u4e2a\u6309\u94ae\u88ab\u6309\u4e0b\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2aGPIO\u53e3\u5c31\u53ef\u4ee5\u63a7\u523612\u952e\u77e9\u9635\u952e\u76d8\u6a21\u5757\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u9700\u8981\u4f7f\u7528IO\u63a5\u53e3\u3002 \u5b9e\u9a8c\u4e00\uff1a\u89e3\u7801\u77e9\u9635\u952e\u76d8 \u7a0b\u5e8f\u5982\u4e0b ''' \u89e3\u7801\u77e9\u9635\u952e\u76d8 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(adc.read_u16()) time.sleep(0.5) \u6ce8\u610f\u4e8b\u9879\uff1a \u5c06\u77e9\u9635\u952e\u76d8\u5e73\u653e\uff0c\u9632\u6b62\u6309\u538b\u65f6\u6296\u52a8\u5bfc\u81f4\u6570\u503c\u4e0d\u7a33\u5b9a \u6309\u538b\u65f6\u5c3d\u91cf\u4fdd\u6301\u7528\u529b\u7a33\u5b9a\uff0c\u9632\u6b62\u6296\u52a8 \u6328\u4e2a\u4e2a\u6d4b\u8bd5\u6309\u952e\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u8bb0\u5f55\u4ed6\u4eec\u7684\u53d6\u503c\u8303\u56f4 [ (0, 2000, '1'), (2001, 3000, '2'), (4001, 5000, '3'), (6001, 7000, '4'), (7501, 9000, '5'), (9501, 10500, '6'), (11001, 12000, '7'), (12001, 13000, '8'), (13001, 14000, '9'), (14001, 15000, '*'), (15501, 16500, '0'), (17001, 19000, '#') ] \u5b9e\u9a8c\u4e8c\uff1a\u68c0\u9a8c\u89e3\u7801\u7684\u503c\u662f\u5426\u9700\u8981\u8c03\u6574 \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c2\uff1a\u68c0\u9a8c\u89e3\u7801\u7684\u503c\u662f\u5426\u9700\u8981\u8c03\u6574 \u6bcf\u6309\u4e0b\u4e00\u4e2a\u6309\u952e\uff0c\u4f1a\u6253\u5370\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5e76\u53d1\u51fa\u6ef4\u7684\u4e00\u58f0 \u5982\u679c\u6709\u504f\u5dee\u624b\u52a8\u8fdb\u884c\u8c03\u6574 ''' from machine import Pin,ADC import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO2\uff09 buzzer = Pin(2, Pin.OUT) # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if 0<= adc.read_u16() <= 2000: print(\"\u6570\u5b571\") buzzer.on() elif 2000< adc.read_u16() <= 3000: print(\"\u6570\u5b572\") buzzer.on() elif 4000< adc.read_u16() <= 5000: print(\"\u6570\u5b573\") buzzer.on() elif 6000< adc.read_u16() <= 7000: print(\"\u6570\u5b574\") buzzer.on() elif 7500< adc.read_u16() <= 9000: print(\"\u6570\u5b575\") buzzer.on() elif 9500< adc.read_u16() <= 10500: print(\"\u6570\u5b576\") buzzer.on() elif 11000< adc.read_u16() <= 12000: print(\"\u6570\u5b577\") buzzer.on() elif 12000< adc.read_u16() <= 13000: print(\"\u6570\u5b578\") buzzer.on() elif 13000< adc.read_u16() <= 14000: print(\"\u6570\u5b579\") buzzer.on() elif 14000< adc.read_u16() <= 15000: print(\"\u6570\u5b57 *\") buzzer.on() elif 15500< adc.read_u16() <= 16500: print(\"\u6570\u5b570\") buzzer.on() elif 17000< adc.read_u16() <= 19000: print(\"\u6570\u5b57#\") buzzer.on() time.sleep(0.2) buzzer.off() \u5b9e\u9a8c\u4e09\uff1a\u6821\u9a8c\u5bc6\u7801 \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c3\uff1a\u5bc6\u7801\u6821\u9a8c password\uff1a\u4e3a\u81ea\u884c\u8bbe\u7f6e\u7684\u521d\u59cb\u5bc6\u7801 input_password\uff1a\u8f93\u5165\u7684\u6821\u9a8c\u5bc6\u7801 ''' from machine import Pin,ADC import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO2\uff09 buzzer = Pin(2, Pin.OUT) # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) password = [1,2,3,4] # \u521d\u59cb\u5bc6\u7801 input_password =[] while len(input_password) < 4: if 0<= adc.read_u16() <= 2000: print(\"\u6570\u5b571\",end='') buzzer.on() input_password.append(1) elif 2000< adc.read_u16() <= 3000: print(\"\u6570\u5b572\",end='') buzzer.on() input_password.append(2) elif 4000< adc.read_u16() <= 5000: print(\"\u6570\u5b573\",end='') buzzer.on() input_password.append(3) elif 6000< adc.read_u16() <= 7000: print(\"\u6570\u5b574\",end='') buzzer.on() input_password.append(4) elif 7500< adc.read_u16() <= 9000: print(\"\u6570\u5b575\",end='') buzzer.on() input_password.append(5) elif 9500< adc.read_u16() <= 10500: print(\"\u6570\u5b576\",end='') buzzer.on() input_password.append(6) elif 11000< adc.read_u16() <= 12000: print(\"\u6570\u5b577\",end='') buzzer.on() input_password.append(7) elif 12000< adc.read_u16() <= 13000: print(\"\u6570\u5b578\",end='') buzzer.on() input_password.append(8) elif 13000< adc.read_u16() <= 14000: print(\"\u6570\u5b579\",end='') buzzer.on() input_password.append(9) elif 14000< adc.read_u16() <= 15000: print(\"\u6570\u5b57*\",end='') buzzer.on() input_password.append('*') elif 15500< adc.read_u16() <= 16500: print(\"\u6570\u5b570\",end='') buzzer.on() b.append(0) elif 17000< adc.read_u16() <= 19000: print(\"\u6570\u5b57#\",end='') buzzer.on() input_password.append('#') time.sleep(0.2) buzzer.off() print(f'\u6211\u8f93\u5165\u7684\u5bc6\u7801\u662f\uff1a{input_password}') ''' \u6821\u9a8c\u5bc6\u7801\uff1a\u6821\u9a8c\u6210\u529f\uff0c\u8702\u9e23\u5668\u53d1\u51fa\u4e09\u58f0\uff0c\u5931\u8d25\u63d0\u793a\u201c\u5bc6\u7801\u9519\u8bef ''' if password == input_password: print('\u5bc6\u7801\u8f93\u5165\u6b63\u786e') for i in range(3): buzzer.on() time.sleep(0.2) buzzer.off() time.sleep(0.2) else: print('\u5bc6\u7801\u9519\u8bef') \u5b9e\u9a8c\u56db\uff1a\u6821\u9a8c\u5bc6\u7801\uff08\u9762\u5411\u5bf9\u8c61\u7684\u5b9e\u73b0\u65b9\u5f0f\uff09 \u5c01\u88c5\u7a0b\u5e8f \u5bf9\u4e4b\u524d\u7684\u51fd\u6570\u8fdb\u884c\u5c01\u88c5\uff0c\u5e76\u4fdd\u5b58\u5230\u81ea\u5efa\u7c7b\u6587\u4ef6\u76ee\u5f55 common \u4e2d\uff0c\u6211\u8fd9\u91cc\u8d77\u540d\u53eb DigitalKeypad ```python from machine import Pin, ADC import time class DigitalKeypad: \"\"\"\u6570\u5b57\u952e\u76d8\u8f93\u5165\u5904\u7406\u7c7b\uff0c\u652f\u6301\u7279\u6b8a\u529f\u80fd\u952e\u548c\u8f93\u5165\u7ba1\u7406 \u5c5e\u6027\uff1a current_input (list): \u5f53\u524d\u8f93\u5165\u7f13\u5b58\u5217\u8868 input_history (list): \u5386\u53f2\u8f93\u5165\u8bb0\u5f55\u5b58\u50a8\u5217\u8868 latest_confirmed (list): \u6700\u65b0\u786e\u8ba4\u7684\u8f93\u5165\u5217\u8868 \"\"\" def __init__(self, adc_pin, buzzer_pin): # \u521d\u59cb\u5316\u786c\u4ef6\u7ec4\u4ef6 self._adc = ADC(Pin(adc_pin, Pin.IN), atten=ADC.ATTN_11DB) self._buzzer = Pin(buzzer_pin, Pin.OUT) # \u5b9a\u4e49\u6309\u952e\u9608\u503c\u8868\uff08\u4e0b\u9650\uff0c\u4e0a\u9650\uff0c\u663e\u793a\u6807\u7b7e\uff09 self._key_thresholds = [ (0, 2000, '1'), (2001, 3000, '2'), (4001, 5000, '3'), (6001, 7000, '4'), (7501, 9000, '5'), (9501, 10500, '6'), (11001, 12000, '7'), (12001, 13000, '8'), (13001, 14000, '9'), (14001, 15000, '*'), (15501, 16500, '0'), (17001, 19000, '#') ] # \u521d\u59cb\u5316\u8f93\u5165\u72b6\u6001 self.current_input = [] # \u5f53\u524d\u8f93\u5165\u7f13\u5b58 self.input_history = [] # \u5386\u53f2\u8bb0\u5f55\u5b58\u50a8 self.latest_confirmed = [] # \u6700\u65b0\u786e\u8ba4\u7684\u8f93\u5165 self._is_inputting = False # \u8f93\u5165\u72b6\u6001\u6807\u5fd7 def _read_key(self): \"\"\"\u8bfb\u53d6\u5f53\u524d\u6309\u4e0b\u7684\u6309\u952e\"\"\" value = self._adc.read_u16() for low, high, char in self._key_thresholds: if low <= value <= high: return char return None def _beep(self, duration=0.1): \"\"\"\u8702\u9e23\u5668\u63d0\u793a\u97f3\"\"\" self._buzzer.on() time.sleep(duration) self._buzzer.off() def poll(self): \"\"\"\u542f\u52a8\u8f93\u5165\u8f6e\u8be2\u76d1\u63a7\uff08\u963b\u585e\u5f0f\uff09\"\"\" print(\"\u8f93\u5165\u7cfb\u7edf\u5c31\u7eea\uff08*\u6e05\u7a7a/#\u786e\u8ba4\uff09\") while True: key = self._read_key() if key == '#': return self.confirm_input() break if key: self._beep() self._process_input(key) time.sleep(0.1) def _process_input(self, key): \"\"\"\u5904\u7406\u8f93\u5165\u903b\u8f91\"\"\" if key == '*': self.current_input.clear() print(\"\\n\u8f93\u5165\u5df2\u91cd\u7f6e\") elif key == '#': return self.confirm_input() else: self.current_input.append(int(key)) print(f\"\u5f53\u524d\u8f93\u5165\uff1a{self.current_input}\") def confirm_input(self): \"\"\"\u786e\u8ba4\u5f53\u524d\u8f93\u5165\u5e76\u8fd4\u56de\u7ed3\u679c\u5217\u8868\"\"\" if not self.current_input: print(\"\\n\u65e0\u8f93\u5165\u5185\u5bb9\") return None confirmed = self.current_input.copy() self.input_history.append(confirmed) self.latest_confirmed = confirmed self.current_input.clear() print(f\"\\n\u5df2\u786e\u8ba4\u8f93\u5165\uff1a{confirmed}\") return confirmed # \u4f7f\u7528\u793a\u4f8b if name == \" main \": keypad = DigitalKeypad(32, 2) try: while True: # \u975e\u963b\u585e\u65b9\u5f0f\u83b7\u53d6\u8f93\u5165 result = keypad.confirm_input() if result: print(\"\u83b7\u53d6\u5230\u786e\u8ba4\u8f93\u5165\uff1a\", result) # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u5904\u7406\u903b\u8f91 time.sleep(0.1) except KeyboardInterrupt: print(\"\\n\u8f93\u5165\u5386\u53f2\u8bb0\u5f55\uff1a\", keypad.input_history) ``` \u8c03\u7528\u7c7b\u5b8c\u6210\u7a0b\u5e8f ```python ''' \u5b9e\u9a8c4\uff1a\u5bc6\u7801\u6821\u9a8c:\uff08\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0\u65b9\u5f0f\uff09 password\uff1a\u4e3a\u81ea\u884c\u8bbe\u7f6e\u7684\u521d\u59cb\u5bc6\u7801 input_password\uff1a\u8f93\u5165\u7684\u6821\u9a8c\u5bc6\u7801 ''' from machine import Pin, ADC import time # \u5bfc\u5165\u5e93\u6587\u4ef6 from common.DigitalKeypad import DigitalKeypad # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO2\uff09 buzzer = Pin(2, Pin.OUT) # \u6784\u5efa\u77e9\u9635\u952e\u76d8\u5bf9\u8c61 keypad = DigitalKeypad(32, 2) password = [1,2,3,4] # \u8bbe\u7f6e\u521d\u59cb\u5bc6\u7801 # \u83b7\u53d6\u952e\u76d8\u8f93\u5165\u7684\u5bc6\u7801 input_password = keypad.poll() print(f'\u6211\u8f93\u5165\u7684\u5bc6\u7801\u662f\uff1a{input_password}') ''' \u6821\u9a8c\u5bc6\u7801\uff1a\u6821\u9a8c\u6210\u529f\uff0c\u8702\u9e23\u5668\u53d1\u51fa\u4e09\u58f0\uff0c\u5931\u8d25\u63d0\u793a\u201c\u5bc6\u7801\u9519\u8bef ''' if input_password == password: print('\u5bc6\u7801\u8f93\u5165\u6b63\u786e') for i in range(3): buzzer.on() time.sleep(0.2) buzzer.off() time.sleep(0.2) else: print('\u5bc6\u7801\u9519\u8bef') ```","title":"\u77e9\u9635\u952e\u76d8"},{"location":"MicroPython/%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98/#_1","text":"","title":"\u77e9\u9635\u952e\u76d8"},{"location":"MicroPython/%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u77e9\u9635\u952e\u76d8 1 4 \u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8702\u9e23\u5668 2 2 \u77e9\u9635\u952e\u76d8 32 \u77e9\u9635\u952e\u76d8\u4ecb\u7ecd 12\u952e\u77e9\u9635\u952e\u76d8\u542b12\u4e2a\u56db\u811a\u6309\u952e\uff0c\u4f9d\u9760\u91d1\u5c5e\u5f39\u7247\u6765\u4fdd\u62a4\u53d7\u529b\u60c5\u51b5\uff0c\u6bcf\u4e2a\u6309\u952e\u7684\u56db\u4e2a\u5f15\u811a\u6392\u5217\u6210\u77e9\u9635\u7684\u5f62\u5f0f\u3002\u572812\u952e\u77e9\u9635\u952e\u76d8\u6a21\u5757\u4e2d\uff0c\u5f53\u67d0\u4e2a\u6309\u94ae\u88ab\u6309\u538b\u65f6\uff0c\u7535\u8def\u5bfc\u901a\uff1b\u5f53\u64a4\u9500\u8fd9\u79cd\u538b\u529b\u7684\u65f6\u5019\uff0c\u7535\u8def\u65ad\u5f00\u3002\u8fd9\u4e2a\u65bd\u538b\u7684\u529b\uff0c\u5c31\u662f\u7528\u6211\u4eec\u7684\u624b\u53bb\u5f00\u6309\u94ae\u3001\u5173\u6309\u94ae\u7684\u52a8\u4f5c\u300212\u952e\u77e9\u9635\u952e\u76d8\u5171\u7528\u4e00\u4e2a\u6a21\u62df\u4fe1\u53f7\u8f93\u5165\uff0c\u5f53\u4e0d\u540c\u6309\u952e\u88ab\u6309\u4e0b\u65f6\u6240\u8f93\u51fa\u7684\u6a21\u62df\u503c\u4e0d\u540c\uff0c\u7531\u6b64\u53ef\u4ee5\u5224\u65ad\u662f\u54ea\u4e2a\u6309\u94ae\u88ab\u6309\u4e0b\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2aGPIO\u53e3\u5c31\u53ef\u4ee5\u63a7\u523612\u952e\u77e9\u9635\u952e\u76d8\u6a21\u5757\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u9700\u8981\u4f7f\u7528IO\u63a5\u53e3\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u89e3\u7801\u77e9\u9635\u952e\u76d8 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: print(adc.read_u16()) time.sleep(0.5) \u6ce8\u610f\u4e8b\u9879\uff1a \u5c06\u77e9\u9635\u952e\u76d8\u5e73\u653e\uff0c\u9632\u6b62\u6309\u538b\u65f6\u6296\u52a8\u5bfc\u81f4\u6570\u503c\u4e0d\u7a33\u5b9a \u6309\u538b\u65f6\u5c3d\u91cf\u4fdd\u6301\u7528\u529b\u7a33\u5b9a\uff0c\u9632\u6b62\u6296\u52a8 \u6328\u4e2a\u4e2a\u6d4b\u8bd5\u6309\u952e\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u8bb0\u5f55\u4ed6\u4eec\u7684\u53d6\u503c\u8303\u56f4 [ (0, 2000, '1'), (2001, 3000, '2'), (4001, 5000, '3'), (6001, 7000, '4'), (7501, 9000, '5'), (9501, 10500, '6'), (11001, 12000, '7'), (12001, 13000, '8'), (13001, 14000, '9'), (14001, 15000, '*'), (15501, 16500, '0'), (17001, 19000, '#') ]","title":"\u5b9e\u9a8c\u4e00\uff1a\u89e3\u7801\u77e9\u9635\u952e\u76d8"},{"location":"MicroPython/%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98/#_4","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c2\uff1a\u68c0\u9a8c\u89e3\u7801\u7684\u503c\u662f\u5426\u9700\u8981\u8c03\u6574 \u6bcf\u6309\u4e0b\u4e00\u4e2a\u6309\u952e\uff0c\u4f1a\u6253\u5370\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5e76\u53d1\u51fa\u6ef4\u7684\u4e00\u58f0 \u5982\u679c\u6709\u504f\u5dee\u624b\u52a8\u8fdb\u884c\u8c03\u6574 ''' from machine import Pin,ADC import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO2\uff09 buzzer = Pin(2, Pin.OUT) # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) while True: if 0<= adc.read_u16() <= 2000: print(\"\u6570\u5b571\") buzzer.on() elif 2000< adc.read_u16() <= 3000: print(\"\u6570\u5b572\") buzzer.on() elif 4000< adc.read_u16() <= 5000: print(\"\u6570\u5b573\") buzzer.on() elif 6000< adc.read_u16() <= 7000: print(\"\u6570\u5b574\") buzzer.on() elif 7500< adc.read_u16() <= 9000: print(\"\u6570\u5b575\") buzzer.on() elif 9500< adc.read_u16() <= 10500: print(\"\u6570\u5b576\") buzzer.on() elif 11000< adc.read_u16() <= 12000: print(\"\u6570\u5b577\") buzzer.on() elif 12000< adc.read_u16() <= 13000: print(\"\u6570\u5b578\") buzzer.on() elif 13000< adc.read_u16() <= 14000: print(\"\u6570\u5b579\") buzzer.on() elif 14000< adc.read_u16() <= 15000: print(\"\u6570\u5b57 *\") buzzer.on() elif 15500< adc.read_u16() <= 16500: print(\"\u6570\u5b570\") buzzer.on() elif 17000< adc.read_u16() <= 19000: print(\"\u6570\u5b57#\") buzzer.on() time.sleep(0.2) buzzer.off()","title":"\u5b9e\u9a8c\u4e8c\uff1a\u68c0\u9a8c\u89e3\u7801\u7684\u503c\u662f\u5426\u9700\u8981\u8c03\u6574"},{"location":"MicroPython/%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98/#_5","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c3\uff1a\u5bc6\u7801\u6821\u9a8c password\uff1a\u4e3a\u81ea\u884c\u8bbe\u7f6e\u7684\u521d\u59cb\u5bc6\u7801 input_password\uff1a\u8f93\u5165\u7684\u6821\u9a8c\u5bc6\u7801 ''' from machine import Pin,ADC import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO2\uff09 buzzer = Pin(2, Pin.OUT) # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 adc = ADC(Pin(32, Pin.IN),atten=ADC.ATTN_11DB) password = [1,2,3,4] # \u521d\u59cb\u5bc6\u7801 input_password =[] while len(input_password) < 4: if 0<= adc.read_u16() <= 2000: print(\"\u6570\u5b571\",end='') buzzer.on() input_password.append(1) elif 2000< adc.read_u16() <= 3000: print(\"\u6570\u5b572\",end='') buzzer.on() input_password.append(2) elif 4000< adc.read_u16() <= 5000: print(\"\u6570\u5b573\",end='') buzzer.on() input_password.append(3) elif 6000< adc.read_u16() <= 7000: print(\"\u6570\u5b574\",end='') buzzer.on() input_password.append(4) elif 7500< adc.read_u16() <= 9000: print(\"\u6570\u5b575\",end='') buzzer.on() input_password.append(5) elif 9500< adc.read_u16() <= 10500: print(\"\u6570\u5b576\",end='') buzzer.on() input_password.append(6) elif 11000< adc.read_u16() <= 12000: print(\"\u6570\u5b577\",end='') buzzer.on() input_password.append(7) elif 12000< adc.read_u16() <= 13000: print(\"\u6570\u5b578\",end='') buzzer.on() input_password.append(8) elif 13000< adc.read_u16() <= 14000: print(\"\u6570\u5b579\",end='') buzzer.on() input_password.append(9) elif 14000< adc.read_u16() <= 15000: print(\"\u6570\u5b57*\",end='') buzzer.on() input_password.append('*') elif 15500< adc.read_u16() <= 16500: print(\"\u6570\u5b570\",end='') buzzer.on() b.append(0) elif 17000< adc.read_u16() <= 19000: print(\"\u6570\u5b57#\",end='') buzzer.on() input_password.append('#') time.sleep(0.2) buzzer.off() print(f'\u6211\u8f93\u5165\u7684\u5bc6\u7801\u662f\uff1a{input_password}') ''' \u6821\u9a8c\u5bc6\u7801\uff1a\u6821\u9a8c\u6210\u529f\uff0c\u8702\u9e23\u5668\u53d1\u51fa\u4e09\u58f0\uff0c\u5931\u8d25\u63d0\u793a\u201c\u5bc6\u7801\u9519\u8bef ''' if password == input_password: print('\u5bc6\u7801\u8f93\u5165\u6b63\u786e') for i in range(3): buzzer.on() time.sleep(0.2) buzzer.off() time.sleep(0.2) else: print('\u5bc6\u7801\u9519\u8bef')","title":"\u5b9e\u9a8c\u4e09\uff1a\u6821\u9a8c\u5bc6\u7801"},{"location":"MicroPython/%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98/#_6","text":"\u5c01\u88c5\u7a0b\u5e8f \u5bf9\u4e4b\u524d\u7684\u51fd\u6570\u8fdb\u884c\u5c01\u88c5\uff0c\u5e76\u4fdd\u5b58\u5230\u81ea\u5efa\u7c7b\u6587\u4ef6\u76ee\u5f55 common \u4e2d\uff0c\u6211\u8fd9\u91cc\u8d77\u540d\u53eb DigitalKeypad ```python from machine import Pin, ADC import time class DigitalKeypad: \"\"\"\u6570\u5b57\u952e\u76d8\u8f93\u5165\u5904\u7406\u7c7b\uff0c\u652f\u6301\u7279\u6b8a\u529f\u80fd\u952e\u548c\u8f93\u5165\u7ba1\u7406 \u5c5e\u6027\uff1a current_input (list): \u5f53\u524d\u8f93\u5165\u7f13\u5b58\u5217\u8868 input_history (list): \u5386\u53f2\u8f93\u5165\u8bb0\u5f55\u5b58\u50a8\u5217\u8868 latest_confirmed (list): \u6700\u65b0\u786e\u8ba4\u7684\u8f93\u5165\u5217\u8868 \"\"\" def __init__(self, adc_pin, buzzer_pin): # \u521d\u59cb\u5316\u786c\u4ef6\u7ec4\u4ef6 self._adc = ADC(Pin(adc_pin, Pin.IN), atten=ADC.ATTN_11DB) self._buzzer = Pin(buzzer_pin, Pin.OUT) # \u5b9a\u4e49\u6309\u952e\u9608\u503c\u8868\uff08\u4e0b\u9650\uff0c\u4e0a\u9650\uff0c\u663e\u793a\u6807\u7b7e\uff09 self._key_thresholds = [ (0, 2000, '1'), (2001, 3000, '2'), (4001, 5000, '3'), (6001, 7000, '4'), (7501, 9000, '5'), (9501, 10500, '6'), (11001, 12000, '7'), (12001, 13000, '8'), (13001, 14000, '9'), (14001, 15000, '*'), (15501, 16500, '0'), (17001, 19000, '#') ] # \u521d\u59cb\u5316\u8f93\u5165\u72b6\u6001 self.current_input = [] # \u5f53\u524d\u8f93\u5165\u7f13\u5b58 self.input_history = [] # \u5386\u53f2\u8bb0\u5f55\u5b58\u50a8 self.latest_confirmed = [] # \u6700\u65b0\u786e\u8ba4\u7684\u8f93\u5165 self._is_inputting = False # \u8f93\u5165\u72b6\u6001\u6807\u5fd7 def _read_key(self): \"\"\"\u8bfb\u53d6\u5f53\u524d\u6309\u4e0b\u7684\u6309\u952e\"\"\" value = self._adc.read_u16() for low, high, char in self._key_thresholds: if low <= value <= high: return char return None def _beep(self, duration=0.1): \"\"\"\u8702\u9e23\u5668\u63d0\u793a\u97f3\"\"\" self._buzzer.on() time.sleep(duration) self._buzzer.off() def poll(self): \"\"\"\u542f\u52a8\u8f93\u5165\u8f6e\u8be2\u76d1\u63a7\uff08\u963b\u585e\u5f0f\uff09\"\"\" print(\"\u8f93\u5165\u7cfb\u7edf\u5c31\u7eea\uff08*\u6e05\u7a7a/#\u786e\u8ba4\uff09\") while True: key = self._read_key() if key == '#': return self.confirm_input() break if key: self._beep() self._process_input(key) time.sleep(0.1) def _process_input(self, key): \"\"\"\u5904\u7406\u8f93\u5165\u903b\u8f91\"\"\" if key == '*': self.current_input.clear() print(\"\\n\u8f93\u5165\u5df2\u91cd\u7f6e\") elif key == '#': return self.confirm_input() else: self.current_input.append(int(key)) print(f\"\u5f53\u524d\u8f93\u5165\uff1a{self.current_input}\") def confirm_input(self): \"\"\"\u786e\u8ba4\u5f53\u524d\u8f93\u5165\u5e76\u8fd4\u56de\u7ed3\u679c\u5217\u8868\"\"\" if not self.current_input: print(\"\\n\u65e0\u8f93\u5165\u5185\u5bb9\") return None confirmed = self.current_input.copy() self.input_history.append(confirmed) self.latest_confirmed = confirmed self.current_input.clear() print(f\"\\n\u5df2\u786e\u8ba4\u8f93\u5165\uff1a{confirmed}\") return confirmed # \u4f7f\u7528\u793a\u4f8b if name == \" main \": keypad = DigitalKeypad(32, 2) try: while True: # \u975e\u963b\u585e\u65b9\u5f0f\u83b7\u53d6\u8f93\u5165 result = keypad.confirm_input() if result: print(\"\u83b7\u53d6\u5230\u786e\u8ba4\u8f93\u5165\uff1a\", result) # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u5904\u7406\u903b\u8f91 time.sleep(0.1) except KeyboardInterrupt: print(\"\\n\u8f93\u5165\u5386\u53f2\u8bb0\u5f55\uff1a\", keypad.input_history) ``` \u8c03\u7528\u7c7b\u5b8c\u6210\u7a0b\u5e8f ```python ''' \u5b9e\u9a8c4\uff1a\u5bc6\u7801\u6821\u9a8c:\uff08\u9762\u5411\u5bf9\u8c61\u5b9e\u73b0\u65b9\u5f0f\uff09 password\uff1a\u4e3a\u81ea\u884c\u8bbe\u7f6e\u7684\u521d\u59cb\u5bc6\u7801 input_password\uff1a\u8f93\u5165\u7684\u6821\u9a8c\u5bc6\u7801 ''' from machine import Pin, ADC import time # \u5bfc\u5165\u5e93\u6587\u4ef6 from common.DigitalKeypad import DigitalKeypad # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO2\uff09 buzzer = Pin(2, Pin.OUT) # \u6784\u5efa\u77e9\u9635\u952e\u76d8\u5bf9\u8c61 keypad = DigitalKeypad(32, 2) password = [1,2,3,4] # \u8bbe\u7f6e\u521d\u59cb\u5bc6\u7801 # \u83b7\u53d6\u952e\u76d8\u8f93\u5165\u7684\u5bc6\u7801 input_password = keypad.poll() print(f'\u6211\u8f93\u5165\u7684\u5bc6\u7801\u662f\uff1a{input_password}') ''' \u6821\u9a8c\u5bc6\u7801\uff1a\u6821\u9a8c\u6210\u529f\uff0c\u8702\u9e23\u5668\u53d1\u51fa\u4e09\u58f0\uff0c\u5931\u8d25\u63d0\u793a\u201c\u5bc6\u7801\u9519\u8bef ''' if input_password == password: print('\u5bc6\u7801\u8f93\u5165\u6b63\u786e') for i in range(3): buzzer.on() time.sleep(0.2) buzzer.off() time.sleep(0.2) else: print('\u5bc6\u7801\u9519\u8bef') ```","title":"\u5b9e\u9a8c\u56db\uff1a\u6821\u9a8c\u5bc6\u7801\uff08\u9762\u5411\u5bf9\u8c61\u7684\u5b9e\u73b0\u65b9\u5f0f\uff09"},{"location":"MicroPython/%E7%A2%B0%E6%92%9E%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u78b0\u649e\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u78b0\u649e\u4f20\u611f\u5668 1 4 \u6709\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6709\u6e90\u8702\u9e23\u5668 2 2 \u78b0\u649e\u4f20\u611f\u5668 4 \u78b0\u649e\u4f20\u611f\u5668 \u78b0\u649e\u5f00\u5173\u6a21\u5757\u5b9e\u8d28\u4e3a\u4e00\u4e2a\u5fae\u578b\u5feb\u52a8\u5f00\u5173\uff0c\u5373\u5e7f\u4e3a\u4eba\u77e5\u7684\u5fae\u578b\u5f00\u5173\uff0c\u662f\u4e00\u79cd\u7531\u5f88\u5c0f\u7684\u7269\u7406\u538b\u529b\u542f\u52a8\u7684\u7535\u5b50\u5f00\u5173\u3002\u5b83\u80fd\u591f\u76f4\u63a5\u8fde\u5728\u5355\u7247\u673a\u4e0a\u3002\u5b83\u5c06\u8d1f\u8f7d\u7535\u963b\u540c LED \u6307\u793a\u706f\u6574\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u4f7f\u5f97\u5bf9\u4ed6\u8fdb\u884c\u6d4b\u8bd5\u66f4\u4e3a\u7b80\u5355\u3002\u5f53\u6709\u7269\u7406\u538b\u529b\u89e6\u53d1\u5f00\u5173\u95ed\u5408\u65f6\uff0c\u677f\u4e0a\u7684 LED \u6307\u793a\u706f\u4f1a\u4eae\u8d77\u3002\u78b0\u649e\u5f00\u5173\u7684\u539f\u7406\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\u539f\u7406\u56fe\uff0c\u5f53\u88ab\u5916\u529b\u89e6\u53d1\u95ed\u5408\u65f6\uff0c\u5f00\u5173\u95ed\u5408\uff0c\u6a21\u5757\u8f93\u51fa\u4f4e\u7535\u5e73\uff1b\u5f53\u64a4\u9500\u5916\u529b\u65f6\uff0c\u5f00\u5173\u88ab\u6253\u5f00\uff0c\u6a21\u5757\u8f93\u51fa\u9ad8\u7535\u5e73\u3002 \u5b9e\u9a8c\u4e00\uff1a\u78b0\u649e\u62a5\u8b66\u5668 \u7a0b\u5e8f\u5982\u4e0b ```python ''' \u78b0\u649e\u62a5\u8b66\u5668 \u6c34\u53d1\u751f\u78b0\u649e\u65f6\u53d1\u51fa\u8b66\u62a5\u58f0 ''' from machine import Pin import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 levcollision = Pin(4, Pin.IN) while True: if levcollision.value() == 0: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2) ```","title":"45.\u78b0\u649e\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%A2%B0%E6%92%9E%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u78b0\u649e\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%A2%B0%E6%92%9E%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u78b0\u649e\u4f20\u611f\u5668 1 4 \u6709\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u6709\u6e90\u8702\u9e23\u5668 2 2 \u78b0\u649e\u4f20\u611f\u5668 4 \u78b0\u649e\u4f20\u611f\u5668 \u78b0\u649e\u5f00\u5173\u6a21\u5757\u5b9e\u8d28\u4e3a\u4e00\u4e2a\u5fae\u578b\u5feb\u52a8\u5f00\u5173\uff0c\u5373\u5e7f\u4e3a\u4eba\u77e5\u7684\u5fae\u578b\u5f00\u5173\uff0c\u662f\u4e00\u79cd\u7531\u5f88\u5c0f\u7684\u7269\u7406\u538b\u529b\u542f\u52a8\u7684\u7535\u5b50\u5f00\u5173\u3002\u5b83\u80fd\u591f\u76f4\u63a5\u8fde\u5728\u5355\u7247\u673a\u4e0a\u3002\u5b83\u5c06\u8d1f\u8f7d\u7535\u963b\u540c LED \u6307\u793a\u706f\u6574\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u4f7f\u5f97\u5bf9\u4ed6\u8fdb\u884c\u6d4b\u8bd5\u66f4\u4e3a\u7b80\u5355\u3002\u5f53\u6709\u7269\u7406\u538b\u529b\u89e6\u53d1\u5f00\u5173\u95ed\u5408\u65f6\uff0c\u677f\u4e0a\u7684 LED \u6307\u793a\u706f\u4f1a\u4eae\u8d77\u3002\u78b0\u649e\u5f00\u5173\u7684\u539f\u7406\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\u539f\u7406\u56fe\uff0c\u5f53\u88ab\u5916\u529b\u89e6\u53d1\u95ed\u5408\u65f6\uff0c\u5f00\u5173\u95ed\u5408\uff0c\u6a21\u5757\u8f93\u51fa\u4f4e\u7535\u5e73\uff1b\u5f53\u64a4\u9500\u5916\u529b\u65f6\uff0c\u5f00\u5173\u88ab\u6253\u5f00\uff0c\u6a21\u5757\u8f93\u51fa\u9ad8\u7535\u5e73\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%A2%B0%E6%92%9E%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u7a0b\u5e8f\u5982\u4e0b ```python ''' \u78b0\u649e\u62a5\u8b66\u5668 \u6c34\u53d1\u751f\u78b0\u649e\u65f6\u53d1\u51fa\u8b66\u62a5\u58f0 ''' from machine import Pin import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 levcollision = Pin(4, Pin.IN) while True: if levcollision.value() == 0: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2) ```","title":"\u5b9e\u9a8c\u4e00\uff1a\u78b0\u649e\u62a5\u8b66\u5668"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7%E6%A8%A1%E5%9D%97/","text":"\u7ea2\u5916\u9065\u63a7\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 1 4 OLED\u663e\u793a\u5c4f 1 5 PH2.0\u6570\u636e\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 4 2 LED\u706f 13 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 \u7ea2\u5916\u63a5\u6536\u7ba1\u662f\u76f4\u63a5\u5c06\u7535\u80fd\u8f6c\u5316\u4e3a\u8fd1\u7ea2\u5916\u5149\u7684\u5668\u4ef6\uff0c\u5c5e\u4e8e\u4e8c\u6781\u7ba1\u7c7b\u3002\u5b83\u7684\u7ed3\u6784\u548c\u539f\u7406\u4e0e\u4e00\u822c\u7684\u53d1\u5149\u4e8c\u6781\u7ba1\u76f8\u4f3c\uff0c\u53ea\u662f\u534a\u5bfc\u4f53\u6750\u6599\u6709\u6240\u4e0d\u540c\u3002\u7ea2\u5916\u63a5\u6536\u5934\u662f\u4e00\u79cd\u63a5\u6536\u3001\u653e\u5927\u3001\u89e3\u8c03\u88c5\u7f6e\uff0c\u5185\u90e8\u96c6\u6210\u7535\u8def\u5df2\u5b8c\u6210\u89e3\u8c03\uff0c\u8f93\u51fa\u662f\u6570\u5b57\u4fe1\u53f7\u3002\u7ea2\u5916\u63a5\u6536\u5934\u7531 IC \u548c PD \u4e24\u90e8\u5206\u7ec4\u6210\u3002IC \u662f\u63a5\u6536\u5934\u7684\u5904\u7406\u5143\u4ef6\uff0c\u4e3b\u8981\u7531\u7845\u6676\u4f53\u548c\u7535\u8def\u7ec4\u6210\u3002\u5b83\u662f\u4e00\u4e2a\u9ad8\u5ea6\u96c6\u6210\u7684\u8bbe\u5907\u3002PD \u662f\u4e00\u79cd\u5149\u7535\u4e8c\u6781\u7ba1\uff0c\u4e3b\u8981\u529f\u80fd\u662f\u63a5\u6536\u5149\u4fe1\u53f7\u3002\u7ea2\u5916\u63a5\u6536\u9700\u5148\u8fdb\u884c\u89e3\u8c03\uff0c\u89e3\u8c03\u7684\u8fc7\u7a0b\u662f\u901a\u8fc7\u7ea2\u5916\u63a5\u6536\u7ba1\u8fdb\u884c\u63a5\u6536\u7684\u3002\u5176\u57fa\u672c\u5de5\u4f5c\u8fc7\u7a0b\u4e3a\uff1a\u5f53\u7ea2\u5916\u63a5\u6536\u6a21\u5757\u63a5\u6536\u5230\u8c03\u5236\u4fe1\u53f7\u65f6\uff0c\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u5426\u5219\u8f93\u51fa\u4e3a\u4f4e\u7535\u5e73\uff0c\u662f\u8c03\u5236\u7684\u9006\u8fc7\u7a0b\u3002\u7ea2\u5916\u63a5\u6536\u5934\u8f93\u51fa\u7684\u539f\u59cb\u6570\u636e\u4fe1\u53f7,\u6b63\u597d\u548c\u53d1\u5c04\u7aef\u5012\u5411\u3002\u4e5f\u5c31\u662f\u4ee5\u524d\u53d1\u5c04\u7aef\u539f\u59cb\u4fe1\u53f7\u662f\u9ad8\u7535\u5e73\uff0c\u90a3\u63a5\u6536\u5934\u8f93\u51fa\u7684\u5c31\u662f\u4f4e\u7535\u5e73\u3002\u53cd\u4e4b\u7ea2\u5916\u9065\u63a7\u5668\u53d1\u51fa\u7684\u4fe1\u53f7\u662f\u4e00\u8fde\u4e32\u7684\u4e8c\u8fdb\u5236\u8109\u51b2\u7801\u3002\u4e3a\u4e86\u4f7f\u5176\u5728\u65e0\u7ebf\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u514d\u53d7\u5176\u4ed6\u7ea2\u5916\u4fe1\u53f7\u7684\u5e72\u6270\uff0c\u901a\u5e38\u90fd\u662f\u5148\u5c06\u5176\u8c03\u5236\u5728\u7279\u5b9a\u7684\u8f7d\u6ce2\u9891\u7387\u201438kHZ \u4e0a\u7136\u540e\u518d\u7ecf\u7ea2\u5916\u53d1\u5c04\u4e8c\u6781\u7ba1\u53d1\u5c04\u51fa\u53bb\uff0c\u7ea2\u5916\u4f20\u611f\u5668\u7684\u96c6\u6210\u63a5\u6536\u548c\u8c03\u5236\u7ea2\u5916\u7ebf\u3002\u800c\u7ea2\u5916\u7ebf\u63a5\u6536\u88c5\u7f6e\u5219\u8981\u6ee4\u9664\u5176\u4ed6\u6742\u6ce2\uff0c\u53e6\u63a5\u6536\u8be5\u7279\u5b9a\u9891\u7387\u7684\u4fe1\u53f7\u5e76\u5c06\u5176\u8fd8\u539f\u6210\u4e8c\u8fdb\u5236\u8109\u51b2\u7801\uff0c\u4e5f\u5c31\u662f\u89e3\u8c03\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aNECRemote.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import Pin, Timer import time class NECRemote: def __init__(self, pin_num): # \u786c\u4ef6\u521d\u59cb\u5316 self.ired=Pin(pin_num,Pin.IN,Pin.PULL_UP) self.iredData=[0,0,0,0] def ired_irq(self,ired): iredHtime=0 if self.ired.value()==0: tc=1000 while (not self.ired.value()) and tc: time.sleep_us(10) tc-=1 if tc==0: return if self.ired.value()==1: tc=500 while self.ired.value() and tc: time.sleep_us(10) tc-=1 if tc==0: return for i in range(4): for j in range(8): tc=60 while (self.ired.value()==0) and tc: time.sleep_us(10) tc-=1 if tc==0: return tc=20 while self.ired.value()==1: time.sleep_us(100) iredHtime+=1 if iredHtime>20: return self.iredData[i]>>=1 if iredHtime>=8: self.iredData[i]|=0x80 iredHtime=0 if self.iredData[2]!=~self.iredData[3]: for i in range(4): self.iredData[i]=0 return if __name__==\"__main__\": nec= NECRemote(4) led=Pin(13,Pin.OUT) nec.ired.irq(nec.ired_irq,Pin.IRQ_FALLING) while True: kctr=nec.iredData[2] print(kctr) if kctr == 69: led.value(1) else: led.value(0) time.sleep_ms(100) \u5b9e\u9a8c\u4e00\uff1a\u4f7f\u7528\u9065\u63a7\u5668\u63a7\u5236LED\u706f \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u9065\u63a7\u5668\u63a7\u5236LED\u706f\u7684\u72b6\u6001 \u4f7f\u7528\u4e00\u4e2a\u952e\u5f00\u542fLED\u706f\uff0c\u6309\u4e0b\u5176\u4ed6\u6309\u952e\u5173\u95ed ''' from machine import Pin, Timer from common.NECRemote import NECRemote # \u5bfc\u5165\u5e93\u6587\u4ef6 import time # \u5b9e\u4f8b\u5316\u9065\u63a7\u5668\u5bf9\u8c61 nec= NECRemote(4) nec.ired.irq(nec.ired_irq,Pin.IRQ_FALLING) # \u4f7f\u7528\u56de\u5230\u51fd\u6570\u6267\u884c\u89e3\u7801\u7a0b\u5e8f led=Pin(13,Pin.OUT) while True: kctr=nec.iredData[2] # \u83b7\u53d6\u952e\u7801\uff08\u5341\u8fdb\u5236\uff09 print(kctr) if kctr == 69: led.value(1) else: led.value(0) time.sleep_ms(100)","title":"48.\u7ea2\u5916\u9065\u63a7\u6a21\u5757"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u7ea2\u5916\u9065\u63a7\u6a21\u5757"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7%E6%A8%A1%E5%9D%97/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 1 4 OLED\u663e\u793a\u5c4f 1 5 PH2.0\u6570\u636e\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 4 2 LED\u706f 13 \u7ea2\u5916\u9065\u63a7\u6a21\u5757 \u7ea2\u5916\u63a5\u6536\u7ba1\u662f\u76f4\u63a5\u5c06\u7535\u80fd\u8f6c\u5316\u4e3a\u8fd1\u7ea2\u5916\u5149\u7684\u5668\u4ef6\uff0c\u5c5e\u4e8e\u4e8c\u6781\u7ba1\u7c7b\u3002\u5b83\u7684\u7ed3\u6784\u548c\u539f\u7406\u4e0e\u4e00\u822c\u7684\u53d1\u5149\u4e8c\u6781\u7ba1\u76f8\u4f3c\uff0c\u53ea\u662f\u534a\u5bfc\u4f53\u6750\u6599\u6709\u6240\u4e0d\u540c\u3002\u7ea2\u5916\u63a5\u6536\u5934\u662f\u4e00\u79cd\u63a5\u6536\u3001\u653e\u5927\u3001\u89e3\u8c03\u88c5\u7f6e\uff0c\u5185\u90e8\u96c6\u6210\u7535\u8def\u5df2\u5b8c\u6210\u89e3\u8c03\uff0c\u8f93\u51fa\u662f\u6570\u5b57\u4fe1\u53f7\u3002\u7ea2\u5916\u63a5\u6536\u5934\u7531 IC \u548c PD \u4e24\u90e8\u5206\u7ec4\u6210\u3002IC \u662f\u63a5\u6536\u5934\u7684\u5904\u7406\u5143\u4ef6\uff0c\u4e3b\u8981\u7531\u7845\u6676\u4f53\u548c\u7535\u8def\u7ec4\u6210\u3002\u5b83\u662f\u4e00\u4e2a\u9ad8\u5ea6\u96c6\u6210\u7684\u8bbe\u5907\u3002PD \u662f\u4e00\u79cd\u5149\u7535\u4e8c\u6781\u7ba1\uff0c\u4e3b\u8981\u529f\u80fd\u662f\u63a5\u6536\u5149\u4fe1\u53f7\u3002\u7ea2\u5916\u63a5\u6536\u9700\u5148\u8fdb\u884c\u89e3\u8c03\uff0c\u89e3\u8c03\u7684\u8fc7\u7a0b\u662f\u901a\u8fc7\u7ea2\u5916\u63a5\u6536\u7ba1\u8fdb\u884c\u63a5\u6536\u7684\u3002\u5176\u57fa\u672c\u5de5\u4f5c\u8fc7\u7a0b\u4e3a\uff1a\u5f53\u7ea2\u5916\u63a5\u6536\u6a21\u5757\u63a5\u6536\u5230\u8c03\u5236\u4fe1\u53f7\u65f6\uff0c\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u5426\u5219\u8f93\u51fa\u4e3a\u4f4e\u7535\u5e73\uff0c\u662f\u8c03\u5236\u7684\u9006\u8fc7\u7a0b\u3002\u7ea2\u5916\u63a5\u6536\u5934\u8f93\u51fa\u7684\u539f\u59cb\u6570\u636e\u4fe1\u53f7,\u6b63\u597d\u548c\u53d1\u5c04\u7aef\u5012\u5411\u3002\u4e5f\u5c31\u662f\u4ee5\u524d\u53d1\u5c04\u7aef\u539f\u59cb\u4fe1\u53f7\u662f\u9ad8\u7535\u5e73\uff0c\u90a3\u63a5\u6536\u5934\u8f93\u51fa\u7684\u5c31\u662f\u4f4e\u7535\u5e73\u3002\u53cd\u4e4b\u7ea2\u5916\u9065\u63a7\u5668\u53d1\u51fa\u7684\u4fe1\u53f7\u662f\u4e00\u8fde\u4e32\u7684\u4e8c\u8fdb\u5236\u8109\u51b2\u7801\u3002\u4e3a\u4e86\u4f7f\u5176\u5728\u65e0\u7ebf\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u514d\u53d7\u5176\u4ed6\u7ea2\u5916\u4fe1\u53f7\u7684\u5e72\u6270\uff0c\u901a\u5e38\u90fd\u662f\u5148\u5c06\u5176\u8c03\u5236\u5728\u7279\u5b9a\u7684\u8f7d\u6ce2\u9891\u7387\u201438kHZ \u4e0a\u7136\u540e\u518d\u7ecf\u7ea2\u5916\u53d1\u5c04\u4e8c\u6781\u7ba1\u53d1\u5c04\u51fa\u53bb\uff0c\u7ea2\u5916\u4f20\u611f\u5668\u7684\u96c6\u6210\u63a5\u6536\u548c\u8c03\u5236\u7ea2\u5916\u7ebf\u3002\u800c\u7ea2\u5916\u7ebf\u63a5\u6536\u88c5\u7f6e\u5219\u8981\u6ee4\u9664\u5176\u4ed6\u6742\u6ce2\uff0c\u53e6\u63a5\u6536\u8be5\u7279\u5b9a\u9891\u7387\u7684\u4fe1\u53f7\u5e76\u5c06\u5176\u8fd8\u539f\u6210\u4e8c\u8fdb\u5236\u8109\u51b2\u7801\uff0c\u4e5f\u5c31\u662f\u89e3\u8c03\u3002 \u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 \u6211\u4eec\u5728common\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aNECRemote.py\u3002\u4fdd\u5b58\u5982\u4e0b\u4ee3\u7801 from machine import Pin, Timer import time class NECRemote: def __init__(self, pin_num): # \u786c\u4ef6\u521d\u59cb\u5316 self.ired=Pin(pin_num,Pin.IN,Pin.PULL_UP) self.iredData=[0,0,0,0] def ired_irq(self,ired): iredHtime=0 if self.ired.value()==0: tc=1000 while (not self.ired.value()) and tc: time.sleep_us(10) tc-=1 if tc==0: return if self.ired.value()==1: tc=500 while self.ired.value() and tc: time.sleep_us(10) tc-=1 if tc==0: return for i in range(4): for j in range(8): tc=60 while (self.ired.value()==0) and tc: time.sleep_us(10) tc-=1 if tc==0: return tc=20 while self.ired.value()==1: time.sleep_us(100) iredHtime+=1 if iredHtime>20: return self.iredData[i]>>=1 if iredHtime>=8: self.iredData[i]|=0x80 iredHtime=0 if self.iredData[2]!=~self.iredData[3]: for i in range(4): self.iredData[i]=0 return if __name__==\"__main__\": nec= NECRemote(4) led=Pin(13,Pin.OUT) nec.ired.irq(nec.ired_irq,Pin.IRQ_FALLING) while True: kctr=nec.iredData[2] print(kctr) if kctr == 69: led.value(1) else: led.value(0) time.sleep_ms(100)","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%A5%E6%8E%A7%E6%A8%A1%E5%9D%97/#led","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' \u9065\u63a7\u5668\u63a7\u5236LED\u706f\u7684\u72b6\u6001 \u4f7f\u7528\u4e00\u4e2a\u952e\u5f00\u542fLED\u706f\uff0c\u6309\u4e0b\u5176\u4ed6\u6309\u952e\u5173\u95ed ''' from machine import Pin, Timer from common.NECRemote import NECRemote # \u5bfc\u5165\u5e93\u6587\u4ef6 import time # \u5b9e\u4f8b\u5316\u9065\u63a7\u5668\u5bf9\u8c61 nec= NECRemote(4) nec.ired.irq(nec.ired_irq,Pin.IRQ_FALLING) # \u4f7f\u7528\u56de\u5230\u51fd\u6570\u6267\u884c\u89e3\u7801\u7a0b\u5e8f led=Pin(13,Pin.OUT) while True: kctr=nec.iredData[2] # \u83b7\u53d6\u952e\u7801\uff08\u5341\u8fdb\u5236\uff09 print(kctr) if kctr == 69: led.value(1) else: led.value(0) time.sleep_ms(100)","title":"\u5b9e\u9a8c\u4e00\uff1a\u4f7f\u7528\u9065\u63a7\u5668\u63a7\u5236LED\u706f"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%BF%E9%9A%9C%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668 2 2 LED\u706f 4 \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668\u4ecb\u7ecd \u8be5\u4f20\u611f\u5668\u6a21\u5757\u5bf9\u73af\u5883\u5149\u9002\u5e94\u80fd\u529b\u5f3a\uff0c\u5176\u5177\u6709\u4e00\u5bf9\u7ea2\u5916\u7ebf\u53d1\u5c04\u4e0e\u63a5\u6536\u7ba1\uff0c\u53d1\u5c04\u7ba1\u53d1\u5c04\u51fa\u4e00\u5b9a\u9891\u7387\u7684\u7ea2\u5916\u7ebf\uff0c\u5f53\u68c0\u6d4b\u65b9\u5411\u9047\u5230\u969c\u788d\u7269\uff08\u53cd\u5c04\u9762\uff09\u65f6\uff0c\u7ea2\u5916\u7ebf\u53cd\u5c04\u56de\u6765\u88ab\u63a5\u6536\u7ba1\u63a5\u6536\uff0c\u7ecf\u8fc7\u6bd4\u8f83\u5668\u7535\u8def\u5904\u7406\u4e4b\u540e\uff0c\u84dd\u8272\u6307\u793a\u706f\u4f1a\u4eae\u8d77\uff0c\u540c\u65f6\u4fe1\u53f7\u8f93\u51fa\u63a5\u53e3\u8f93\u51fa\u6570\u5b57\u4fe1\u53f7\uff08\u4e00\u4e2a\u4f4e\u7535\u5e73\u4fe1\u53f7\uff09\uff0c\u53ef\u901a\u8fc7\u7535\u4f4d\u5668\u65cb\u94ae\u8c03\u8282\u68c0\u6d4b\u8ddd\u79bb\uff0c\u6709\u6548\u8ddd\u79bb\u8303\u56f4 2~30cm\uff0c\u5de5\u4f5c\u7535\u538b\u4e3a 3.3V-5V\u3002\u8be5\u4f20\u611f\u5668\u7684\u63a2\u6d4b\u8ddd\u79bb\u53ef\u4ee5\u901a\u8fc7\u7535\u4f4d\u5668\u8c03\u8282\u3001\u5177\u6709\u5e72\u6270\u5c0f\u3001\u4fbf\u4e8e\u88c5\u914d\u3001\u4f7f\u7528\u65b9\u4fbf\u7b49\u7279\u70b9\uff0c\u53ef\u4ee5\u5e7f\u6cdb\u5e94\u7528\u4e8e\u673a\u5668\u4eba\u907f\u969c\u3001\u907f\u969c\u5c0f\u8f66\u3001\u6d41\u6c34\u7ebf\u8ba1\u6570\u53ca\u9ed1\u767d\u7ebf\u5faa\u8ff9\u7b49\u4f17\u591a\u573a\u5408\u3002 \u9ed1\u8272\u4f1a\u5438\u6536\u7ea2\u5916\u5149\uff0c\u6240\u4ee5\u4e00\u822c\u8ba4\u4e3a\u9ed1\u8272\u4e3a\u65e0\u969c\u788d\u7684\u60c5\u51b5\uff0c\u4e00\u822c\u7528\u6765\u505a\u5c0f\u8f66\u7684\u5de1\u7ebf\u5f15\u5bfc \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u7ea2\u5916\u907f\u9707\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 2 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 infrared = Pin(2, Pin.IN) while True: print(infrared.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6ca1\u6709\u969c\u788d\u7269\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u6709\u969c\u788d\u7269\uff0c\u8fd4\u56de\u503c\u4e3a\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 infrared = ADC(Pin(2, Pin.IN),atten=ADC.ATTN_11DB) while True: print(infrared.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u6ca1\u6709\u969c\u788d\u7269\u65f6\u7684\u6570\u503c\u8f83\u5927\uff0c30000\u4ee5\u4e0a 2. \u6709\u969c\u788d\u7269\u65f6\u5019\u6570\u503c\u964d\u4f4e 3000\u4ee5\u4e0b \u5b9e\u9a8c\u4e8c\uff1a\u969c\u788d\u7269\u62a5\u8b66\u5668 \u6570\u5b57\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u969c\u788d\u7269\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 \u5f53\u6709\u969c\u788d\u7269\u9760\u8fd1\u65f6\u5019\u706f\u4eae\uff0c\u969c\u788d\u7269\u79bb\u5f00\u706f\u706d ''' from machine import Pin import time infrared = Pin(2, Pin.IN) # \u521d\u59cb\u5316\u7ea2\u5916\u907f\u969c\u4f20\u611f\u56682\u53f7\u7ba1\u811a led = Pin(4, Pin.OUT) # \u521d\u59cb\u5316LED\u706f4\u53f7\u7ba1\u811a while True: if not infrared.value(): led.value(1) else : led.value(0) \u6a21\u62df\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u969c\u788d\u7269\u62a5\u8b66\u5668\uff08\u6a21\u62df\u4fe1\u53f7\uff09 \u5f53\u6709\u969c\u788d\u7269\u9760\u8fd1\u65f6\u5019\u706f\u4eae\uff0c\u969c\u788d\u7269\u79bb\u5f00\u706f\u706d ''' from machine import Pin,ADC import time infrared = ADC(Pin(2, Pin.IN),atten=ADC.ATTN_11DB) # \u521d\u59cb\u5316\u7ea2\u5916\u907f\u969c\u4f20\u611f\u56682\u53f7\u7ba1\u811a led = Pin(4, Pin.OUT) # \u521d\u59cb\u5316LED\u706f4\u53f7\u7ba1\u811a while True: if infrared.read_u16() < 30000: led.value(1) else : led.value(0)","title":"37.\u7ea2\u5916\u907f\u9707\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%BF%E9%9A%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%BF%E9%9A%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668 2 2 LED\u706f 4 \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668\u4ecb\u7ecd \u8be5\u4f20\u611f\u5668\u6a21\u5757\u5bf9\u73af\u5883\u5149\u9002\u5e94\u80fd\u529b\u5f3a\uff0c\u5176\u5177\u6709\u4e00\u5bf9\u7ea2\u5916\u7ebf\u53d1\u5c04\u4e0e\u63a5\u6536\u7ba1\uff0c\u53d1\u5c04\u7ba1\u53d1\u5c04\u51fa\u4e00\u5b9a\u9891\u7387\u7684\u7ea2\u5916\u7ebf\uff0c\u5f53\u68c0\u6d4b\u65b9\u5411\u9047\u5230\u969c\u788d\u7269\uff08\u53cd\u5c04\u9762\uff09\u65f6\uff0c\u7ea2\u5916\u7ebf\u53cd\u5c04\u56de\u6765\u88ab\u63a5\u6536\u7ba1\u63a5\u6536\uff0c\u7ecf\u8fc7\u6bd4\u8f83\u5668\u7535\u8def\u5904\u7406\u4e4b\u540e\uff0c\u84dd\u8272\u6307\u793a\u706f\u4f1a\u4eae\u8d77\uff0c\u540c\u65f6\u4fe1\u53f7\u8f93\u51fa\u63a5\u53e3\u8f93\u51fa\u6570\u5b57\u4fe1\u53f7\uff08\u4e00\u4e2a\u4f4e\u7535\u5e73\u4fe1\u53f7\uff09\uff0c\u53ef\u901a\u8fc7\u7535\u4f4d\u5668\u65cb\u94ae\u8c03\u8282\u68c0\u6d4b\u8ddd\u79bb\uff0c\u6709\u6548\u8ddd\u79bb\u8303\u56f4 2~30cm\uff0c\u5de5\u4f5c\u7535\u538b\u4e3a 3.3V-5V\u3002\u8be5\u4f20\u611f\u5668\u7684\u63a2\u6d4b\u8ddd\u79bb\u53ef\u4ee5\u901a\u8fc7\u7535\u4f4d\u5668\u8c03\u8282\u3001\u5177\u6709\u5e72\u6270\u5c0f\u3001\u4fbf\u4e8e\u88c5\u914d\u3001\u4f7f\u7528\u65b9\u4fbf\u7b49\u7279\u70b9\uff0c\u53ef\u4ee5\u5e7f\u6cdb\u5e94\u7528\u4e8e\u673a\u5668\u4eba\u907f\u969c\u3001\u907f\u969c\u5c0f\u8f66\u3001\u6d41\u6c34\u7ebf\u8ba1\u6570\u53ca\u9ed1\u767d\u7ebf\u5faa\u8ff9\u7b49\u4f17\u591a\u573a\u5408\u3002 \u9ed1\u8272\u4f1a\u5438\u6536\u7ea2\u5916\u5149\uff0c\u6240\u4ee5\u4e00\u822c\u8ba4\u4e3a\u9ed1\u8272\u4e3a\u65e0\u969c\u788d\u7684\u60c5\u51b5\uff0c\u4e00\u822c\u7528\u6765\u505a\u5c0f\u8f66\u7684\u5de1\u7ebf\u5f15\u5bfc \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u7ea2\u5916\u907f\u9707\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u5230\u84dd\u8272\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%BF%E9%9A%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u7ea2\u5916\u907f\u969c\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 2 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 infrared = Pin(2, Pin.IN) while True: print(infrared.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6ca1\u6709\u969c\u788d\u7269\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u6709\u969c\u788d\u7269\uff0c\u8fd4\u56de\u503c\u4e3a\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 infrared = ADC(Pin(2, Pin.IN),atten=ADC.ATTN_11DB) while True: print(infrared.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u6ca1\u6709\u969c\u788d\u7269\u65f6\u7684\u6570\u503c\u8f83\u5927\uff0c30000\u4ee5\u4e0a 2. \u6709\u969c\u788d\u7269\u65f6\u5019\u6570\u503c\u964d\u4f4e 3000\u4ee5\u4e0b","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E7%BA%A2%E5%A4%96%E9%81%BF%E9%9A%9C%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u6570\u5b57\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u969c\u788d\u7269\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 \u5f53\u6709\u969c\u788d\u7269\u9760\u8fd1\u65f6\u5019\u706f\u4eae\uff0c\u969c\u788d\u7269\u79bb\u5f00\u706f\u706d ''' from machine import Pin import time infrared = Pin(2, Pin.IN) # \u521d\u59cb\u5316\u7ea2\u5916\u907f\u969c\u4f20\u611f\u56682\u53f7\u7ba1\u811a led = Pin(4, Pin.OUT) # \u521d\u59cb\u5316LED\u706f4\u53f7\u7ba1\u811a while True: if not infrared.value(): led.value(1) else : led.value(0) \u6a21\u62df\u4fe1\u53f7\u7a0b\u5e8f\u5982\u4e0b ''' \u969c\u788d\u7269\u62a5\u8b66\u5668\uff08\u6a21\u62df\u4fe1\u53f7\uff09 \u5f53\u6709\u969c\u788d\u7269\u9760\u8fd1\u65f6\u5019\u706f\u4eae\uff0c\u969c\u788d\u7269\u79bb\u5f00\u706f\u706d ''' from machine import Pin,ADC import time infrared = ADC(Pin(2, Pin.IN),atten=ADC.ATTN_11DB) # \u521d\u59cb\u5316\u7ea2\u5916\u907f\u969c\u4f20\u611f\u56682\u53f7\u7ba1\u811a led = Pin(4, Pin.OUT) # \u521d\u59cb\u5316LED\u706f4\u53f7\u7ba1\u811a while True: if infrared.read_u16() < 30000: led.value(1) else : led.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u969c\u788d\u7269\u62a5\u8b66\u5668"},{"location":"MicroPython/%E8%88%B5%E6%9C%BA/","text":"\u8235\u673a \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 180\u00b0\u8235\u673a 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 180\u00b0\u8235\u673a 4 \u8235\u673a(Servo Motor)\u4ecb\u7ecd \u8235\u673a(Servo Motor)\u662f\u4e00\u79cd\u5e26\u6709\u53cd\u9988\u63a7\u5236\u7cfb\u7edf\u7684\u5fae\u578b\u4f3a\u670d\u7535\u673a\uff0c\u80fd\u591f\u7cbe\u786e\u63a7\u5236\u8f6c\u52a8\u89d2\u5ea6\u3002\u5b83\u96c6\u6210\u4e86\u7535\u673a\u3001\u51cf\u901f\u9f7f\u8f6e\u7ec4\u3001\u63a7\u5236\u7535\u8def\u548c\u4f4d\u7f6e\u53cd\u9988\u88c5\u7f6e\uff0c\u53ef\u4ee5\u6839\u636e\u63a7\u5236\u4fe1\u53f7\u7cbe\u786e\u5730\u8f6c\u52a8\u5e76\u4fdd\u6301\u5728\u6307\u5b9a\u89d2\u5ea6\u3002 \u8235\u673a\u7684\u5de5\u4f5c\u539f\u7406 \u63a5\u6536PWM(\u8109\u5bbd\u8c03\u5236)\u4fe1\u53f7\uff08\u8fd9\u91cc\u4ee5180\u00b0\u5e38\u89c1\u8235\u673a\u4e3a\u4f8b\uff09 \u6807\u51c6\u5468\u671f\uff1a20ms(50Hz) \u8109\u5bbd\u8303\u56f4\uff1a\u901a\u5e38500\u03bcs(0.5ms)\u52302500\u03bcs(2.5ms)\u5bf9\u5e94\u89d2\u5ea6\uff1a\u8109\u5bbd\u4e0e\u89d2\u5ea6\u6210\u7ebf\u6027\u5173\u7cfb(\u5982500\u03bcs=0\u00b0\uff0c2500\u03bcs=180\u00b0) \u5176\u4ed6\u89d2\u5ea6\u8235\u673a\u5bf9\u5e94\u8109\u51b2\u5173\u7cfb\u8ba1\u7b97\u516c\u5f0f\uff1a $\\text{\u8109\u51b2\u5bbd\u5ea6} = 500 + \\left( \\text{\u89d2\u5ea6} \\times \\frac{2000}{\\text{\u6700\u5927\u89d2\u5ea6}} \\right)$ \u793a\u4f8b\u4ee3\u7801 \uff1a from machine import PWM, Pin import time # \u521d\u59cb\u5316PWM\uff08GPIO15\uff0c50Hz\uff09 servo = PWM(Pin(15), freq=50) def set_angle(angle, max_angle=180): # \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u8109\u5bbd\uff08\u9002\u7528\u4e8e180\u00b0\u6216270\u00b0\u8235\u673a\uff09 us = 500 + (angle * 2000 // max_angle) duty = us * 1024 * 50 // 1000000 # \u8f6c\u6362\u4e3aduty\u503c servo.duty(duty) # 180\u00b0\u8235\u673a\u8f6c\u523090\u00b0 set_angle(90, max_angle=180) \u8235\u673a\u7684\u8f6c\u52a8\u7684\u89d2\u5ea6\u662f\u901a\u8fc7\u8c03\u8282 PWM\uff08\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\uff09\u4fe1\u53f7\u7684\u5360\u7a7a\u6bd4\u6765\u5b9e\u73b0\u7684\uff0c\u6807\u51c6 PWM\uff08\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\uff09\u4fe1\u53f7\u7684\u5468\u671f\u56fa\u5b9a\u4e3a 20ms\uff0850Hz\uff09\uff0c\u7406\u8bba\u4e0a\u8109\u5bbd\u5206\u5e03\u5e94\u5728 1ms \u5230 2ms \u4e4b\u95f4\uff0c\u4f46\u662f\uff0c\u4e8b\u5b9e\u4e0a\u8109\u5bbd\u53ef\u7531 0.5ms \u5230 2.5ms \u4e4b\u95f4\uff0c\u8109\u5bbd\u548c\u8235\u673a\u7684\u8f6c\u89d2 0\u00b0\uff5e180\u00b0 \u76f8\u5bf9\u5e94\u3002 0.5-2.5ms \u7684 PWM \u9ad8\u7535\u5e73\u90e8\u5206\u5bf9\u5e94\u63a7\u5236 180 \u5ea6\u8235\u673a\u7684 0-180 \u5ea6\uff0c\u56e0\u6b64\uff0c\u5bf9\u5e94\u7684\u63a7\u5236\u5173\u7cfb\u662f\u8fd9\u6837\u7684\uff1a \u8109\u5bbd\uff08\u03bcs\uff09 180\u00b0\u8235\u673a 270\u00b0\u8235\u673a \u8bf4\u660e 500 0\u00b0 0\u00b0 \u6700\u5c0f\u4f4d\u7f6e 1000 45\u00b0 67.5\u00b0 1500 90\u00b0 135\u00b0 \u4e2d\u4f4d\uff08\u9ed8\u8ba4\u4f4d\u7f6e\uff09 2000 135\u00b0 202.5\u00b0 2500 180\u00b0 270\u00b0 \u6700\u5927\u4f4d\u7f6e \u5b9e\u9a8c\u4e00\uff1a\u8235\u673a\u7684\u6765\u56de\u8f6c\u52a8 \u7b2c\u4e09\u65b9\u5e93\u7684\u4f7f\u7528 MicroPython \u62e5\u6709\u7740\u5e9e\u5927\u7684\u7528\u6237\u7fa4\uff0c\u81ea\u7136\u8235\u673a\u6a21\u5757\u4e5f\u6709\u5f00\u6e90\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u62ff\u8fc7\u6765\u4f7f\u7528\u5373\u53ef\uff0c\u8fd9\u5c31\u662f\u4f7f\u7528 MicroPython \u5f00\u53d1\u7684\u9ad8\u6548\u4e4b\u5904\uff0c\u5e02\u9762\u4e0a\u5e38\u89c1\u7684\u6a21\u5757\u5728\u7f51\u4e0a\u51e0\u4e4e\u90fd\u53ef\u4ee5\u627e\u5230\u76f8\u5e94\u7684\u6a21\u5757\u4ee3\u7801\uff0c\u5927\u5bb6\u4e00\u5b9a\u8981\u5584\u4e8e\u5728\u7f51\u4e0a\u641c\u7d22\u8d44\u6e90\u3002 \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939libs\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aServo \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin, PWM import time class Servo: \"\"\" MicroPython \u8235\u673a\u63a7\u5236\u7c7b \u9002\u7528\u4e8e\u6807\u51c6PWM\u8235\u673a(\u5468\u671f20ms, \u8109\u5bbd0.5ms-2.5ms) \"\"\" def __init__(self, pin, min_us=500, max_us=2500, angle=180): \"\"\" \u521d\u59cb\u5316\u8235\u673a :param pin: \u63a7\u5236\u5f15\u811a :param min_us: \u6700\u5c0f\u8109\u5bbd(\u5fae\u79d2)\uff0c\u9ed8\u8ba4500us(0\u5ea6) :param max_us: \u6700\u5927\u8109\u5bbd(\u5fae\u79d2)\uff0c\u9ed8\u8ba42500us(180\u5ea6) :param angle: \u8235\u673a\u8f6c\u52a8\u8303\u56f4\uff0c\u9ed8\u8ba4180\u5ea6 \"\"\" self.pwm = PWM(Pin(pin)) self.pwm.freq(50) # \u6807\u51c6\u8235\u673a\u9891\u738750Hz(\u5468\u671f20ms) self.min_us = min_us self.max_us = max_us self.angle = angle self.current_angle = 0 # \u8bb0\u5f55\u5f53\u524d\u89d2\u5ea6 def write_us(self, us): \"\"\"\u76f4\u63a5\u5199\u5165\u8109\u5bbd(\u5fae\u79d2)\"\"\" us = min(self.max_us, max(self.min_us, us)) duty = us * 1024 * self.pwm.freq() // 1000000 self.pwm.duty(int(duty)) def write_angle(self, degrees): \"\"\"\u5199\u5165\u89d2\u5ea6\"\"\" degrees = min(self.angle, max(0, degrees)) self.current_angle = degrees us = self.min_us + (self.max_us - self.min_us) * degrees // self.angle self.write_us(us) def sweep(self, start_angle=0, end_angle=180, step=1, delay=0.01): \"\"\"\u8235\u673a\u626b\u52a8\"\"\" step = abs(step) if start_angle < end_angle else -abs(step) for angle in range(start_angle, end_angle + step, step): self.write_angle(angle) time.sleep(delay) def off(self): \"\"\"\u5173\u95edPWM\u8f93\u51fa(\u91ca\u653e\u8235\u673a)\"\"\" self.pwm.duty(0) def deinit(self): \"\"\"\u91ca\u653e\u8d44\u6e90\"\"\" self.off() self.pwm.deinit() \u63a5\u4e0b\u6765\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u5bfc\u5165\u521a\u624d\u7684\u5e93\u6587\u4ef6\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 # \u5bfc\u5165\u521a\u624d\u7684\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 from libs.Servo import Servo import time # \u901a\u8fc7\u7c7b\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f20\u5165\u53c2\u6570\u4e3a\u5bf9\u5e94\u7684\u7ba1\u811a\u53f7\uff0c\u5982\u679c\u662f\u5176\u4ed6\u89d2\u5ea6\u7684\u8235\u673a\uff0c\u53ef\u4ee5\u4fee\u6539\u5bf9\u5e94\u7684angle\u53c2\u6570\u503c serv0 = Servo(pin=4,angle=270) # \u8c03\u7528\u7c7b\u91cc\u9762\u7684write_angle\uff08\uff09\u76f4\u63a5\u8f93\u5165\u89d2\u5ea6\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\u8f6c\u52a8\u5230\u5bf9\u5e94\u7684\u89d2\u5ea6 serv0.write_angle(180) # \u5199\u5165\u89d2\u5ea6 time.sleep(1) # \u91cd\u65b0\u56de\u52300\u5ea6 serv0.write_angle(0) time.sleep(1) # \u5de6\u53f3\u5168\u89d2\u5ea6\u626b\u52a83\u6b21 for i in range(3): for i in range(271): serv0.write_angle(i) time.sleep(0.01) for i in range(270,0,-1): serv0.write_angle(i) time.sleep(0.01)","title":"9.\u8235\u673a"},{"location":"MicroPython/%E8%88%B5%E6%9C%BA/#_1","text":"","title":"\u8235\u673a"},{"location":"MicroPython/%E8%88%B5%E6%9C%BA/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 4 180\u00b0\u8235\u673a 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 180\u00b0\u8235\u673a 4 \u8235\u673a(Servo Motor)\u4ecb\u7ecd \u8235\u673a(Servo Motor)\u662f\u4e00\u79cd\u5e26\u6709\u53cd\u9988\u63a7\u5236\u7cfb\u7edf\u7684\u5fae\u578b\u4f3a\u670d\u7535\u673a\uff0c\u80fd\u591f\u7cbe\u786e\u63a7\u5236\u8f6c\u52a8\u89d2\u5ea6\u3002\u5b83\u96c6\u6210\u4e86\u7535\u673a\u3001\u51cf\u901f\u9f7f\u8f6e\u7ec4\u3001\u63a7\u5236\u7535\u8def\u548c\u4f4d\u7f6e\u53cd\u9988\u88c5\u7f6e\uff0c\u53ef\u4ee5\u6839\u636e\u63a7\u5236\u4fe1\u53f7\u7cbe\u786e\u5730\u8f6c\u52a8\u5e76\u4fdd\u6301\u5728\u6307\u5b9a\u89d2\u5ea6\u3002 \u8235\u673a\u7684\u5de5\u4f5c\u539f\u7406 \u63a5\u6536PWM(\u8109\u5bbd\u8c03\u5236)\u4fe1\u53f7\uff08\u8fd9\u91cc\u4ee5180\u00b0\u5e38\u89c1\u8235\u673a\u4e3a\u4f8b\uff09 \u6807\u51c6\u5468\u671f\uff1a20ms(50Hz) \u8109\u5bbd\u8303\u56f4\uff1a\u901a\u5e38500\u03bcs(0.5ms)\u52302500\u03bcs(2.5ms)\u5bf9\u5e94\u89d2\u5ea6\uff1a\u8109\u5bbd\u4e0e\u89d2\u5ea6\u6210\u7ebf\u6027\u5173\u7cfb(\u5982500\u03bcs=0\u00b0\uff0c2500\u03bcs=180\u00b0) \u5176\u4ed6\u89d2\u5ea6\u8235\u673a\u5bf9\u5e94\u8109\u51b2\u5173\u7cfb\u8ba1\u7b97\u516c\u5f0f\uff1a $\\text{\u8109\u51b2\u5bbd\u5ea6} = 500 + \\left( \\text{\u89d2\u5ea6} \\times \\frac{2000}{\\text{\u6700\u5927\u89d2\u5ea6}} \\right)$ \u793a\u4f8b\u4ee3\u7801 \uff1a from machine import PWM, Pin import time # \u521d\u59cb\u5316PWM\uff08GPIO15\uff0c50Hz\uff09 servo = PWM(Pin(15), freq=50) def set_angle(angle, max_angle=180): # \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u8109\u5bbd\uff08\u9002\u7528\u4e8e180\u00b0\u6216270\u00b0\u8235\u673a\uff09 us = 500 + (angle * 2000 // max_angle) duty = us * 1024 * 50 // 1000000 # \u8f6c\u6362\u4e3aduty\u503c servo.duty(duty) # 180\u00b0\u8235\u673a\u8f6c\u523090\u00b0 set_angle(90, max_angle=180) \u8235\u673a\u7684\u8f6c\u52a8\u7684\u89d2\u5ea6\u662f\u901a\u8fc7\u8c03\u8282 PWM\uff08\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\uff09\u4fe1\u53f7\u7684\u5360\u7a7a\u6bd4\u6765\u5b9e\u73b0\u7684\uff0c\u6807\u51c6 PWM\uff08\u8109\u51b2\u5bbd\u5ea6\u8c03\u5236\uff09\u4fe1\u53f7\u7684\u5468\u671f\u56fa\u5b9a\u4e3a 20ms\uff0850Hz\uff09\uff0c\u7406\u8bba\u4e0a\u8109\u5bbd\u5206\u5e03\u5e94\u5728 1ms \u5230 2ms \u4e4b\u95f4\uff0c\u4f46\u662f\uff0c\u4e8b\u5b9e\u4e0a\u8109\u5bbd\u53ef\u7531 0.5ms \u5230 2.5ms \u4e4b\u95f4\uff0c\u8109\u5bbd\u548c\u8235\u673a\u7684\u8f6c\u89d2 0\u00b0\uff5e180\u00b0 \u76f8\u5bf9\u5e94\u3002 0.5-2.5ms \u7684 PWM \u9ad8\u7535\u5e73\u90e8\u5206\u5bf9\u5e94\u63a7\u5236 180 \u5ea6\u8235\u673a\u7684 0-180 \u5ea6\uff0c\u56e0\u6b64\uff0c\u5bf9\u5e94\u7684\u63a7\u5236\u5173\u7cfb\u662f\u8fd9\u6837\u7684\uff1a \u8109\u5bbd\uff08\u03bcs\uff09 180\u00b0\u8235\u673a 270\u00b0\u8235\u673a \u8bf4\u660e 500 0\u00b0 0\u00b0 \u6700\u5c0f\u4f4d\u7f6e 1000 45\u00b0 67.5\u00b0 1500 90\u00b0 135\u00b0 \u4e2d\u4f4d\uff08\u9ed8\u8ba4\u4f4d\u7f6e\uff09 2000 135\u00b0 202.5\u00b0 2500 180\u00b0 270\u00b0 \u6700\u5927\u4f4d\u7f6e","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E8%88%B5%E6%9C%BA/#_3","text":"\u7b2c\u4e09\u65b9\u5e93\u7684\u4f7f\u7528 MicroPython \u62e5\u6709\u7740\u5e9e\u5927\u7684\u7528\u6237\u7fa4\uff0c\u81ea\u7136\u8235\u673a\u6a21\u5757\u4e5f\u6709\u5f00\u6e90\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u62ff\u8fc7\u6765\u4f7f\u7528\u5373\u53ef\uff0c\u8fd9\u5c31\u662f\u4f7f\u7528 MicroPython \u5f00\u53d1\u7684\u9ad8\u6548\u4e4b\u5904\uff0c\u5e02\u9762\u4e0a\u5e38\u89c1\u7684\u6a21\u5757\u5728\u7f51\u4e0a\u51e0\u4e4e\u90fd\u53ef\u4ee5\u627e\u5230\u76f8\u5e94\u7684\u6a21\u5757\u4ee3\u7801\uff0c\u5927\u5bb6\u4e00\u5b9a\u8981\u5584\u4e8e\u5728\u7f51\u4e0a\u641c\u7d22\u8d44\u6e90\u3002 \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939libs\uff08\u540d\u5b57\u81ea\u5df1\u53d6\uff0c\u8981\u6c42\u662f\u82f1\u6587\uff09\u7528\u6765\u653e\u7f6e\u6211\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u5728\u6587\u4ef6\u5939\u4e2d\uff0c\u65b0\u5efa\u4e00\u4e2aPython\u6587\u4ef6\uff0c\u6211\u4eec\u793a\u4f8b\u4e3a\uff1aServo \u7a0b\u5e8f\u5982\u4e0b\uff1a from machine import Pin, PWM import time class Servo: \"\"\" MicroPython \u8235\u673a\u63a7\u5236\u7c7b \u9002\u7528\u4e8e\u6807\u51c6PWM\u8235\u673a(\u5468\u671f20ms, \u8109\u5bbd0.5ms-2.5ms) \"\"\" def __init__(self, pin, min_us=500, max_us=2500, angle=180): \"\"\" \u521d\u59cb\u5316\u8235\u673a :param pin: \u63a7\u5236\u5f15\u811a :param min_us: \u6700\u5c0f\u8109\u5bbd(\u5fae\u79d2)\uff0c\u9ed8\u8ba4500us(0\u5ea6) :param max_us: \u6700\u5927\u8109\u5bbd(\u5fae\u79d2)\uff0c\u9ed8\u8ba42500us(180\u5ea6) :param angle: \u8235\u673a\u8f6c\u52a8\u8303\u56f4\uff0c\u9ed8\u8ba4180\u5ea6 \"\"\" self.pwm = PWM(Pin(pin)) self.pwm.freq(50) # \u6807\u51c6\u8235\u673a\u9891\u738750Hz(\u5468\u671f20ms) self.min_us = min_us self.max_us = max_us self.angle = angle self.current_angle = 0 # \u8bb0\u5f55\u5f53\u524d\u89d2\u5ea6 def write_us(self, us): \"\"\"\u76f4\u63a5\u5199\u5165\u8109\u5bbd(\u5fae\u79d2)\"\"\" us = min(self.max_us, max(self.min_us, us)) duty = us * 1024 * self.pwm.freq() // 1000000 self.pwm.duty(int(duty)) def write_angle(self, degrees): \"\"\"\u5199\u5165\u89d2\u5ea6\"\"\" degrees = min(self.angle, max(0, degrees)) self.current_angle = degrees us = self.min_us + (self.max_us - self.min_us) * degrees // self.angle self.write_us(us) def sweep(self, start_angle=0, end_angle=180, step=1, delay=0.01): \"\"\"\u8235\u673a\u626b\u52a8\"\"\" step = abs(step) if start_angle < end_angle else -abs(step) for angle in range(start_angle, end_angle + step, step): self.write_angle(angle) time.sleep(delay) def off(self): \"\"\"\u5173\u95edPWM\u8f93\u51fa(\u91ca\u653e\u8235\u673a)\"\"\" self.pwm.duty(0) def deinit(self): \"\"\"\u91ca\u653e\u8d44\u6e90\"\"\" self.off() self.pwm.deinit() \u63a5\u4e0b\u6765\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u5bfc\u5165\u521a\u624d\u7684\u5e93\u6587\u4ef6\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 # \u5bfc\u5165\u521a\u624d\u7684\u7b2c\u4e09\u65b9\u5e93\u6587\u4ef6 from libs.Servo import Servo import time # \u901a\u8fc7\u7c7b\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f20\u5165\u53c2\u6570\u4e3a\u5bf9\u5e94\u7684\u7ba1\u811a\u53f7\uff0c\u5982\u679c\u662f\u5176\u4ed6\u89d2\u5ea6\u7684\u8235\u673a\uff0c\u53ef\u4ee5\u4fee\u6539\u5bf9\u5e94\u7684angle\u53c2\u6570\u503c serv0 = Servo(pin=4,angle=270) # \u8c03\u7528\u7c7b\u91cc\u9762\u7684write_angle\uff08\uff09\u76f4\u63a5\u8f93\u5165\u89d2\u5ea6\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\u8f6c\u52a8\u5230\u5bf9\u5e94\u7684\u89d2\u5ea6 serv0.write_angle(180) # \u5199\u5165\u89d2\u5ea6 time.sleep(1) # \u91cd\u65b0\u56de\u52300\u5ea6 serv0.write_angle(0) time.sleep(1) # \u5de6\u53f3\u5168\u89d2\u5ea6\u626b\u52a83\u6b21 for i in range(3): for i in range(271): serv0.write_angle(i) time.sleep(0.01) for i in range(270,0,-1): serv0.write_angle(i) time.sleep(0.01)","title":"\u5b9e\u9a8c\u4e00\uff1a\u8235\u673a\u7684\u6765\u56de\u8f6c\u52a8"},{"location":"MicroPython/%E8%9C%82%E9%B8%A3%E5%99%A8%E6%A8%A1%E5%9D%97/","text":"\u8702\u9e23\u5668\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u8702\u9e23\u5668 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8702\u9e23\u5668 2 \u8702\u9e23\u5668\u7684\u4ecb\u7ecd \u8702\u9e23\u5668\u662f\u4e00\u79cd\u4e00\u4f53\u5316\u7ed3\u6784\u7684\u7535\u5b50\u8baf\u54cd\u5668\u3002\u6839\u636e\u662f\u5426\u542b\u6709\u97f3\u6e90\u7535\u8def\u53ef\u4ee5\u5206\u4e3a\u6709\u6e90\u8702\u9e23\u5668\u548c\u65e0\u6e90\u8702\u9e23\u5668\u3002 \u6709\u6e90\u8702\u9e23\u5668 \u6709\u6e90\u8702\u9e23\u5668\u662f\u4e00\u79cd\u96c6\u6210\u4e86\u9a71\u52a8\u7535\u8def\u7684\u8702\u9e23\u5668\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7535\u6d41\u6fc0\u52b1\u4ea7\u751f\u58f0\u97f3\uff0c\u4e0d\u9700\u8981\u5916\u90e8\u8bbe\u5907\u3002\u6709\u6e90\u8702\u9e23\u5668\u5185\u90e8\u96c6\u6210\u4e86\u632f\u7247\u3001\u9a71\u52a8\u7535\u8def\u548c\u5171\u632f\u8154\u3002\u5f53\u7ed9\u6709\u6e90\u8702\u9e23\u5668\u63d0\u4f9b\u7535\u6d41\u65f6\uff0c\u5b83\u4f1a\u6839\u636e\u7535\u6d41\u7684\u53d8\u5316\u4ea7\u751f\u58f0\u97f3\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u7535\u6d41\u7684\u5927\u5c0f\u548c\u9891\u7387\u6765\u63a7\u5236\u8702\u9e23\u5668\u7684\u58f0\u97f3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u6539\u53d8\u8f93\u5165\u7535\u6d41\u7684\u5927\u5c0f\u6765\u8c03\u6574\u97f3\u91cf\uff0c\u901a\u8fc7\u6539\u53d8\u8f93\u5165\u7535\u6d41\u7684\u9891\u7387\u6765\u8c03\u6574\u97f3\u8c03\u548c\u97f3\u4e50\u6548\u679c\u3002 \u65e0\u6e90\u8702\u9e23\u5668 \u65e0\u6e90\u8702\u9e23\u5668\u662f\u4e00\u79cd\u7b80\u5355\u7684\u58f0\u97f3\u53d1\u751f\u5668\uff0c\u5b83\u901a\u5e38\u7531\u632f\u7247\u548c\u5171\u632f\u8154\u7ec4\u6210\u3002\u65e0\u6e90\u8702\u9e23\u5668\u4e0d\u5177\u5907\u9a71\u52a8\u7535\u8def\uff0c\u56e0\u6b64\u9700\u8981\u5916\u90e8\u7684\u7535\u5b50\u8bbe\u5907\u6765\u4ea7\u751f\u58f0\u97f3\u3002\u5f53\u7ed9\u65e0\u6e90\u8702\u9e23\u5668\u65bd\u52a0\u4ea4\u53d8\u7535\u538b\u65f6\uff0c\u632f\u7247\u4f1a\u632f\u52a8\u5e76\u4ea7\u751f\u58f0\u97f3\u3002\u65e0\u6e90\u8702\u9e23\u5668\u7684\u5de5\u4f5c\u9891\u7387\u7531\u65bd\u52a0\u7684\u7535\u538b\u9891\u7387\u51b3\u5b9a\u3002\u5728\u4f7f\u7528\u65e0\u6e90\u8702\u9e23\u5668\u65f6\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u63a7\u5236\u7535\u538b\u7684\u9891\u7387\u548c\u5360\u7a7a\u6bd4\u6765\u63a7\u5236\u8702\u9e23\u5668\u7684\u58f0\u97f3\u3002\u901a\u8fc7 \u6539\u53d8\u4ea4\u53d8\u7535\u538b\u7684\u9891\u7387\u548c\u5360\u7a7a\u6bd4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u97f3\u8c03\u548c\u97f3\u4e50\u6548\u679c\u3002 \u5b9e\u9a8c\u4e00\uff1a\u6709\u6e90\u8702\u9e23\u5668\u7684\u9e23\u54cd ''' \u5b9e\u9a8c\u4e00\uff1a\u6709\u6e90\u8702\u9e23\u5668\u9e23\u54cd ''' from machine import Pin import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO23\uff09 buzzer = Pin(2, Pin.OUT) ''' \u793a\u4f8b1\uff1a\u5355\u6b21\u9e23\u54cd ''' buzzer.on() # \u5f00\u542f\u8702\u9e23\u5668 time.sleep(1) buzzer.off() # \u5173\u95ed\u8702\u9e23\u5668 ''' \u793a\u4f8b2\uff1a\u95f4\u6b47\u9e23\u54cd\uff08\u6ef4\u6ef4\u58f0\uff09 ''' def beep_intermittent(times=3, on_time=0.1, off_time=0.1): ''' times\uff1a\u63a7\u5236\u9e23\u54cd\u7684\u6b21\u6570 on_time\uff1a\u901a\u7535\u65f6\u95f4\u95f4\u9694 off_time\uff1a\u65ad\u7535\u65f6\u95f4\u95f4\u9694 ''' \"\"\"\u95f4\u6b47\u9e23\u54cd\u6a21\u5f0f\"\"\" for _ in range(times): buzzer.on() time.sleep(on_time) buzzer.off() time.sleep(off_time) # \u793a\u4f8b\uff1a\u5feb\u901f\u9e23\u54cd3\u6b21\uff08\u6bcf\u6b210.1\u54cd\uff0c0.1\u79d2\u505c\uff09 beep_intermittent(times=3, on_time=0.1, off_time=0.1) \u5b9e\u9a8c\u4e8c\uff1a\u65e0\u6e90\u8702\u9e23\u5668\u7684\u9e23\u54cd \u4ee3\u7801\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c2\u3001\u65e0\u6e90\u8702\u9e23\u5668\u97f3\u91cf\u7684\u63a7\u5236\uff08\u54cd3\u79d2\u540e\u505c\u6b62\uff09 ''' from machine import PWM,Pin import time # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) # \u793a\u4f8b\uff1a50%\u97f3\u91cf\u9e23\u54cd1\u79d2 beep_pwm(duration=1, volume=512) time.sleep(3) beep_pwm(duration=1, volume=0) ''' \u5b9e\u9a8c3\uff1a\u63a7\u5236\u97f3\u8c03\u548c\u97f3\u91cf ''' from machine import Pin, PWM import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u652f\u6301\u4efb\u610fPWM\u5f15\u811a\uff09 buzzer = PWM(Pin(2), freq=1000, duty=0) # \u521d\u59cb\u9759\u97f3 def play_tone(freq, duration=0.5, volume=512): ''' freq\uff1a\u53d1\u751f\u9891\u7387\uff08\u4e5f\u5c31\u662f\u97f3\u8c03\uff09 duration\uff1a\u53d1\u751f\u6301\u7eed\u65f6\u95f4 volume\uff1a\u63a7\u5236\u97f3\u91cf ''' buzzer.freq(freq) # \u8bbe\u7f6e\u9891\u7387\uff08\u5355\u4f4d\uff1aHz\uff09 buzzer.duty(volume) # \u97f3\u91cf\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) buzzer.duty(0) # \u505c\u6b62\u53d1\u58f0 # \u793a\u4f8b\uff1a\u64ad\u653e\u4e2d\u97f3C\uff08\u9891\u7387262Hz\uff09\uff0c\u6301\u7eed1\u79d2 play_tone(262, duration=1) ''' \u5b9e\u9a8c4\uff1a\u6d4b\u8bd5\u5404\u97f3\u8c03 ''' NOTE_C4 = 262 # \u4e2d\u97f3C NOTE_D4 = 294 # D NOTE_E4 = 330 # E NOTE_F4 = 349 # F NOTE_G4 = 392 # G NOTE_A4 = 440 # A NOTE_B4 = 494 # B play_tone(NOTE_C4, duration=1) play_tone(NOTE_D4, duration=1) play_tone(NOTE_E4, duration=1) play_tone(NOTE_F4, duration=1) play_tone(NOTE_G4, duration=1) play_tone(NOTE_A4, duration=1) play_tone(NOTE_B4, duration=1) ''' \u5b9e\u9a8c4\uff1a\u751f\u65e5\u6b4c ''' birthday_notes = [ (NOTE_C4, 0.5), (NOTE_C4, 0.5), (NOTE_D4, 1), (NOTE_C4, 1), (NOTE_F4, 1), (NOTE_E4, 2), (NOTE_C4, 0.5), (NOTE_C4, 0.5), (NOTE_D4, 1), (NOTE_C4, 1), (NOTE_G4, 1), (NOTE_F4, 2) ] def play_melody(notes, tempo=1): \"\"\"\u64ad\u653e\u65cb\u5f8b\"\"\" for note, duration in notes: play_tone(note, duration * tempo) # tempo\u63a7\u5236\u6574\u4f53\u901f\u5ea6 time.sleep(0.05) # \u97f3\u7b26\u95f4\u9694 # \u64ad\u653e\u793a\u4f8b play_melody(birthday_notes) \u5b9e\u9a8c\u4e09\uff1a\u64ad\u653e\u5c0f\u661f\u661f\uff08\u9762\u5411\u5bf9\u8c61\uff09 \u628a\u4e4b\u524d\u7684\u7a0b\u5e8f\u8fdb\u884c\u6574\u7406\uff0c\u5e76\u5c01\u88c5\u5230 common \u6587\u4ef6\u4e0b\u3002 from machine import Pin, PWM import time class PassiveBuzzer: ''' \u65e0\u6e90\u8702\u9e23\u5668\u53d1\u58f0 :param pins: pin\u5bf9\u5e94\u5f15\u811a :param notes\u662f\u5bf9\u5e94\u4e50\u8c31 ''' def __init__(self, pin): self.pwm = PWM(Pin(pin), freq=1000, duty=0) def play(self, freq, duration=0.5, volume=512): self.pwm.freq(freq) self.pwm.duty(volume) time.sleep(duration) self.pwm.duty(0) def stop(self): self.pwm.duty(0) def melody(self, notes, tempo=1.0): for note, beats in notes: if note == 0: # \u4f11\u6b62\u7b26 time.sleep(beats * tempo) else: self.play(note, beats * tempo) time.sleep(0.05) # \u97f3\u7b26\u95f4\u9694 \u8c03\u7528\u521a\u624d\u521b\u5efa\u7684\u7c7b\u6587\u4ef6\uff0c\u5b8c\u6210\u201c\u5c0f\u661f\u661f\u201d\u97f3\u4e50 ''' \u5b9e\u9a8c4\uff1a\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u64ad\u653e\u97f3\u4e50 ''' from machine import Pin, PWM import time # \u5bfc\u5165\u7c7b\u6587\u4ef6 from common.PassiveBuzzer import PassiveBuzzer # \u6784\u5efa\u8702\u9e23\u5668\u5bf9\u8c61 buzzer = PassiveBuzzer(2) NOTE_C4 = 262 # \u4e2d\u97f3C NOTE_D4 = 294 # D NOTE_E4 = 330 # E NOTE_F4 = 349 # F NOTE_G4 = 392 # G NOTE_A4 = 440 # A NOTE_B4 = 494 # B # \u8c31\u5199\u4e50\u8c31\u300a\u5c0f\u661f\u661f\u300b\u7247\u6bb5 twinkle_notes = [ (NOTE_C4, 0.5), (NOTE_C4, 0.5), (NOTE_G4, 0.5), (NOTE_G4, 0.5), (NOTE_A4, 0.5), (NOTE_A4, 0.5), (NOTE_G4, 1) ] # \u8c03\u7528\u7c7b\u65b9\u6cd5\u5b8c\u6210\u64ad\u653e\u201c\u5c0f\u661f\u661f\u201d\u7a0b\u5e8f buzzer.melody(twinkle_notes, tempo=0.8)","title":"21.\u8702\u9e23\u5668\u6a21\u5757"},{"location":"MicroPython/%E8%9C%82%E9%B8%A3%E5%99%A8%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u8702\u9e23\u5668\u6a21\u5757"},{"location":"MicroPython/%E8%9C%82%E9%B8%A3%E5%99%A8%E6%A8%A1%E5%9D%97/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u8702\u9e23\u5668 1 4 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8702\u9e23\u5668 2 \u8702\u9e23\u5668\u7684\u4ecb\u7ecd \u8702\u9e23\u5668\u662f\u4e00\u79cd\u4e00\u4f53\u5316\u7ed3\u6784\u7684\u7535\u5b50\u8baf\u54cd\u5668\u3002\u6839\u636e\u662f\u5426\u542b\u6709\u97f3\u6e90\u7535\u8def\u53ef\u4ee5\u5206\u4e3a\u6709\u6e90\u8702\u9e23\u5668\u548c\u65e0\u6e90\u8702\u9e23\u5668\u3002 \u6709\u6e90\u8702\u9e23\u5668 \u6709\u6e90\u8702\u9e23\u5668\u662f\u4e00\u79cd\u96c6\u6210\u4e86\u9a71\u52a8\u7535\u8def\u7684\u8702\u9e23\u5668\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7535\u6d41\u6fc0\u52b1\u4ea7\u751f\u58f0\u97f3\uff0c\u4e0d\u9700\u8981\u5916\u90e8\u8bbe\u5907\u3002\u6709\u6e90\u8702\u9e23\u5668\u5185\u90e8\u96c6\u6210\u4e86\u632f\u7247\u3001\u9a71\u52a8\u7535\u8def\u548c\u5171\u632f\u8154\u3002\u5f53\u7ed9\u6709\u6e90\u8702\u9e23\u5668\u63d0\u4f9b\u7535\u6d41\u65f6\uff0c\u5b83\u4f1a\u6839\u636e\u7535\u6d41\u7684\u53d8\u5316\u4ea7\u751f\u58f0\u97f3\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u7535\u6d41\u7684\u5927\u5c0f\u548c\u9891\u7387\u6765\u63a7\u5236\u8702\u9e23\u5668\u7684\u58f0\u97f3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u6539\u53d8\u8f93\u5165\u7535\u6d41\u7684\u5927\u5c0f\u6765\u8c03\u6574\u97f3\u91cf\uff0c\u901a\u8fc7\u6539\u53d8\u8f93\u5165\u7535\u6d41\u7684\u9891\u7387\u6765\u8c03\u6574\u97f3\u8c03\u548c\u97f3\u4e50\u6548\u679c\u3002 \u65e0\u6e90\u8702\u9e23\u5668 \u65e0\u6e90\u8702\u9e23\u5668\u662f\u4e00\u79cd\u7b80\u5355\u7684\u58f0\u97f3\u53d1\u751f\u5668\uff0c\u5b83\u901a\u5e38\u7531\u632f\u7247\u548c\u5171\u632f\u8154\u7ec4\u6210\u3002\u65e0\u6e90\u8702\u9e23\u5668\u4e0d\u5177\u5907\u9a71\u52a8\u7535\u8def\uff0c\u56e0\u6b64\u9700\u8981\u5916\u90e8\u7684\u7535\u5b50\u8bbe\u5907\u6765\u4ea7\u751f\u58f0\u97f3\u3002\u5f53\u7ed9\u65e0\u6e90\u8702\u9e23\u5668\u65bd\u52a0\u4ea4\u53d8\u7535\u538b\u65f6\uff0c\u632f\u7247\u4f1a\u632f\u52a8\u5e76\u4ea7\u751f\u58f0\u97f3\u3002\u65e0\u6e90\u8702\u9e23\u5668\u7684\u5de5\u4f5c\u9891\u7387\u7531\u65bd\u52a0\u7684\u7535\u538b\u9891\u7387\u51b3\u5b9a\u3002\u5728\u4f7f\u7528\u65e0\u6e90\u8702\u9e23\u5668\u65f6\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u63a7\u5236\u7535\u538b\u7684\u9891\u7387\u548c\u5360\u7a7a\u6bd4\u6765\u63a7\u5236\u8702\u9e23\u5668\u7684\u58f0\u97f3\u3002\u901a\u8fc7 \u6539\u53d8\u4ea4\u53d8\u7535\u538b\u7684\u9891\u7387\u548c\u5360\u7a7a\u6bd4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f\u4e0d\u540c\u7684\u97f3\u8c03\u548c\u97f3\u4e50\u6548\u679c\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E8%9C%82%E9%B8%A3%E5%99%A8%E6%A8%A1%E5%9D%97/#_3","text":"''' \u5b9e\u9a8c\u4e00\uff1a\u6709\u6e90\u8702\u9e23\u5668\u9e23\u54cd ''' from machine import Pin import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u5047\u8bbe\u63a5GPIO23\uff09 buzzer = Pin(2, Pin.OUT) ''' \u793a\u4f8b1\uff1a\u5355\u6b21\u9e23\u54cd ''' buzzer.on() # \u5f00\u542f\u8702\u9e23\u5668 time.sleep(1) buzzer.off() # \u5173\u95ed\u8702\u9e23\u5668 ''' \u793a\u4f8b2\uff1a\u95f4\u6b47\u9e23\u54cd\uff08\u6ef4\u6ef4\u58f0\uff09 ''' def beep_intermittent(times=3, on_time=0.1, off_time=0.1): ''' times\uff1a\u63a7\u5236\u9e23\u54cd\u7684\u6b21\u6570 on_time\uff1a\u901a\u7535\u65f6\u95f4\u95f4\u9694 off_time\uff1a\u65ad\u7535\u65f6\u95f4\u95f4\u9694 ''' \"\"\"\u95f4\u6b47\u9e23\u54cd\u6a21\u5f0f\"\"\" for _ in range(times): buzzer.on() time.sleep(on_time) buzzer.off() time.sleep(off_time) # \u793a\u4f8b\uff1a\u5feb\u901f\u9e23\u54cd3\u6b21\uff08\u6bcf\u6b210.1\u54cd\uff0c0.1\u79d2\u505c\uff09 beep_intermittent(times=3, on_time=0.1, off_time=0.1)","title":"\u5b9e\u9a8c\u4e00\uff1a\u6709\u6e90\u8702\u9e23\u5668\u7684\u9e23\u54cd"},{"location":"MicroPython/%E8%9C%82%E9%B8%A3%E5%99%A8%E6%A8%A1%E5%9D%97/#_4","text":"\u4ee3\u7801\u5982\u4e0b\uff1a ''' \u5b9e\u9a8c2\u3001\u65e0\u6e90\u8702\u9e23\u5668\u97f3\u91cf\u7684\u63a7\u5236\uff08\u54cd3\u79d2\u540e\u505c\u6b62\uff09 ''' from machine import PWM,Pin import time # \u521d\u59cb\u5316PWM\uff08\u9891\u73871kHz\uff09 pwm = PWM(Pin(2), freq=1000, duty=0) # duty\u8303\u56f40-1023 def beep_pwm(duration=1, volume=512): \"\"\"\u901a\u8fc7PWM\u8c03\u8282\u97f3\u91cf\"\"\" pwm.duty(volume) # \u97f3\u91cf\u8bbe\u7f6e\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) pwm.duty(0) # \u793a\u4f8b\uff1a50%\u97f3\u91cf\u9e23\u54cd1\u79d2 beep_pwm(duration=1, volume=512) time.sleep(3) beep_pwm(duration=1, volume=0) ''' \u5b9e\u9a8c3\uff1a\u63a7\u5236\u97f3\u8c03\u548c\u97f3\u91cf ''' from machine import Pin, PWM import time # \u521d\u59cb\u5316\u8702\u9e23\u5668\uff08\u652f\u6301\u4efb\u610fPWM\u5f15\u811a\uff09 buzzer = PWM(Pin(2), freq=1000, duty=0) # \u521d\u59cb\u9759\u97f3 def play_tone(freq, duration=0.5, volume=512): ''' freq\uff1a\u53d1\u751f\u9891\u7387\uff08\u4e5f\u5c31\u662f\u97f3\u8c03\uff09 duration\uff1a\u53d1\u751f\u6301\u7eed\u65f6\u95f4 volume\uff1a\u63a7\u5236\u97f3\u91cf ''' buzzer.freq(freq) # \u8bbe\u7f6e\u9891\u7387\uff08\u5355\u4f4d\uff1aHz\uff09 buzzer.duty(volume) # \u97f3\u91cf\uff080\u9759\u97f3\uff0c1023\u6700\u5927\uff09 time.sleep(duration) buzzer.duty(0) # \u505c\u6b62\u53d1\u58f0 # \u793a\u4f8b\uff1a\u64ad\u653e\u4e2d\u97f3C\uff08\u9891\u7387262Hz\uff09\uff0c\u6301\u7eed1\u79d2 play_tone(262, duration=1) ''' \u5b9e\u9a8c4\uff1a\u6d4b\u8bd5\u5404\u97f3\u8c03 ''' NOTE_C4 = 262 # \u4e2d\u97f3C NOTE_D4 = 294 # D NOTE_E4 = 330 # E NOTE_F4 = 349 # F NOTE_G4 = 392 # G NOTE_A4 = 440 # A NOTE_B4 = 494 # B play_tone(NOTE_C4, duration=1) play_tone(NOTE_D4, duration=1) play_tone(NOTE_E4, duration=1) play_tone(NOTE_F4, duration=1) play_tone(NOTE_G4, duration=1) play_tone(NOTE_A4, duration=1) play_tone(NOTE_B4, duration=1) ''' \u5b9e\u9a8c4\uff1a\u751f\u65e5\u6b4c ''' birthday_notes = [ (NOTE_C4, 0.5), (NOTE_C4, 0.5), (NOTE_D4, 1), (NOTE_C4, 1), (NOTE_F4, 1), (NOTE_E4, 2), (NOTE_C4, 0.5), (NOTE_C4, 0.5), (NOTE_D4, 1), (NOTE_C4, 1), (NOTE_G4, 1), (NOTE_F4, 2) ] def play_melody(notes, tempo=1): \"\"\"\u64ad\u653e\u65cb\u5f8b\"\"\" for note, duration in notes: play_tone(note, duration * tempo) # tempo\u63a7\u5236\u6574\u4f53\u901f\u5ea6 time.sleep(0.05) # \u97f3\u7b26\u95f4\u9694 # \u64ad\u653e\u793a\u4f8b play_melody(birthday_notes)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u65e0\u6e90\u8702\u9e23\u5668\u7684\u9e23\u54cd"},{"location":"MicroPython/%E8%9C%82%E9%B8%A3%E5%99%A8%E6%A8%A1%E5%9D%97/#_5","text":"\u628a\u4e4b\u524d\u7684\u7a0b\u5e8f\u8fdb\u884c\u6574\u7406\uff0c\u5e76\u5c01\u88c5\u5230 common \u6587\u4ef6\u4e0b\u3002 from machine import Pin, PWM import time class PassiveBuzzer: ''' \u65e0\u6e90\u8702\u9e23\u5668\u53d1\u58f0 :param pins: pin\u5bf9\u5e94\u5f15\u811a :param notes\u662f\u5bf9\u5e94\u4e50\u8c31 ''' def __init__(self, pin): self.pwm = PWM(Pin(pin), freq=1000, duty=0) def play(self, freq, duration=0.5, volume=512): self.pwm.freq(freq) self.pwm.duty(volume) time.sleep(duration) self.pwm.duty(0) def stop(self): self.pwm.duty(0) def melody(self, notes, tempo=1.0): for note, beats in notes: if note == 0: # \u4f11\u6b62\u7b26 time.sleep(beats * tempo) else: self.play(note, beats * tempo) time.sleep(0.05) # \u97f3\u7b26\u95f4\u9694 \u8c03\u7528\u521a\u624d\u521b\u5efa\u7684\u7c7b\u6587\u4ef6\uff0c\u5b8c\u6210\u201c\u5c0f\u661f\u661f\u201d\u97f3\u4e50 ''' \u5b9e\u9a8c4\uff1a\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u64ad\u653e\u97f3\u4e50 ''' from machine import Pin, PWM import time # \u5bfc\u5165\u7c7b\u6587\u4ef6 from common.PassiveBuzzer import PassiveBuzzer # \u6784\u5efa\u8702\u9e23\u5668\u5bf9\u8c61 buzzer = PassiveBuzzer(2) NOTE_C4 = 262 # \u4e2d\u97f3C NOTE_D4 = 294 # D NOTE_E4 = 330 # E NOTE_F4 = 349 # F NOTE_G4 = 392 # G NOTE_A4 = 440 # A NOTE_B4 = 494 # B # \u8c31\u5199\u4e50\u8c31\u300a\u5c0f\u661f\u661f\u300b\u7247\u6bb5 twinkle_notes = [ (NOTE_C4, 0.5), (NOTE_C4, 0.5), (NOTE_G4, 0.5), (NOTE_G4, 0.5), (NOTE_A4, 0.5), (NOTE_A4, 0.5), (NOTE_G4, 1) ] # \u8c03\u7528\u7c7b\u65b9\u6cd5\u5b8c\u6210\u64ad\u653e\u201c\u5c0f\u661f\u661f\u201d\u7a0b\u5e8f buzzer.melody(twinkle_notes, tempo=0.8)","title":"\u5b9e\u9a8c\u4e09\uff1a\u64ad\u653e\u5c0f\u661f\u661f\uff08\u9762\u5411\u5bf9\u8c61\uff09"},{"location":"MicroPython/%E8%A7%A6%E6%91%B8%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u89e6\u6478\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u89e6\u6478\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u89e6\u6478\u4f20\u611f\u5668 4 2 LED\u706f 2 \u89e6\u6478\u611f\u5668\u4ecb\u7ecd \u89e6\u6478\u4f20\u611f\u5668\u662f\u4e00\u4e2a\u57fa\u4e8e\u7535\u5bb9\u611f\u5e94\u7684\u539f\u7406\u5236\u4f5c\u7684\u89e6\u6478\u5f00\u5173\u6a21\u5757\u3002\u4eba\u4f53\u6216\u91d1\u5c5e\u89e6\u78b0\u4f20\u611f\u5668\u7684\u9540\u91d1\u63a5\u89e6\u9762\u4f1a\u88ab\u611f\u5e94\u5230\uff0c\u9664\u4e86\u4e0e\u91d1\u5c5e\u9762\u7684\u76f4\u63a5\u89e6\u6478\uff0c\u9694\u7740\u4e00\u5b9a\u539a\u5ea6\u7684\u5851\u6599\u3001\u73bb\u7483\u7b49\u6750\u6599\u7684\u63a5\u89e6\u4e5f\u53ef\u4ee5\u88ab\u611f\u5e94\u5230\uff0c\u611f\u5e94\u7075\u654f\u5ea6\u968f\u63a5\u89e6\u9762\u7684\u5927\u5c0f\u548c\u8986\u76d6\u6750\u6599\u7684\u539a\u5ea6\u6709\u5173\u3002 \u6a21\u5757\u67092\u79cd\u8f93\u51fa\u6a21\u5f0f\uff0c\u53ef\u4f7f\u7528\u6539\u53d8\u710a\u63a5\u8df3\u7ebf\u8fdb\u884c\u5207\u6362\u3002\u5728\u6a21\u5757\u4e0a\u4f1a\u6709\u4e00\u4e2a\u7528\u4e8e\u6539\u53d8\u6a21\u5f0f\u7684\u77ed\u8def\u70b9\uff0c\u710a\u63a5\u4e0a\u9762\u4e24\u4e2a\u7684\u4e24\u4e2a\u77ed\u8def\u70b9\uff0c\u6a21\u5757\u7684\u6a21\u5f0f\u4f1a\u5207\u6362\u4e3a\u5f00\u5173\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u7528\u4e8e\u5236\u4f5c\u4e0d\u592a\u590d\u6742\u89e6\u6478\u63a7\u5236\u7684\u53f0\u706f\u3002\u77ed\u8def\u4e0b\u9762\u4e24\u4e2a\u77ed\u8def\u70b9\uff0c\u6a21\u5757\u7684\u6a21\u5f0f\u4f1a\u5207\u6362\u4e3a\u6309\u952e\uff0c\u6b64\u65f6\u53ef\u4ee5\u7528\u6765\u4ee3\u66ff\u5b9e\u4f53\u6309\u952e\u3002 \u6ce8\u610f\u4e8b\u9879\uff1a\u4f7f\u7528\u65f6\u6a21\u5757\u9700\u8981\u79bb\u56fa\u5b9a\u9762\u6709\u4e00\u5b9a\u9ad8\u5ea6\uff0c\u907f\u514d\u63a5\u89e6\u4ea7\u751f\u4fe1\u53f7\u8bef\u5dee\u3002\u8bf7\u52ff\u76f4\u63a5\u63e1\u4f4f\u89e6\u6478\u4f20\u611f\u5668\uff0c\u4f1a\u5bfc\u81f4\u80cc\u90e8\u7535\u5bb9\u5347\u6e29\uff0c\u4ee5\u514d\u70eb\u4f24\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u89e6\u6478\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin,ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 touch = Pin(4, Pin.IN) while True: print(touch.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u6709\u624b\u6307\u63a5\u89e6\u8fd4\u56de\uff1a0 \u5b9e\u9a8c\u4e8c\uff1a\u89e6\u78b0\u611f\u5e94\u706f \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u89e6\u78b0\u611f\u5e94\u706f \u89e6\u78b0\u706f\u4eae\uff0c\u518d\u6b21\u89e6\u78b0\u706f\u706d ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 touch = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if touch.value() == 0: while touch.value() == 0: pass led.value(not led.value())","title":"27.\u89e6\u6478\u4f20\u611f\u5668"},{"location":"MicroPython/%E8%A7%A6%E6%91%B8%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u89e6\u6478\u4f20\u611f\u5668"},{"location":"MicroPython/%E8%A7%A6%E6%91%B8%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u89e6\u6478\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 1 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u89e6\u6478\u4f20\u611f\u5668 4 2 LED\u706f 2 \u89e6\u6478\u611f\u5668\u4ecb\u7ecd \u89e6\u6478\u4f20\u611f\u5668\u662f\u4e00\u4e2a\u57fa\u4e8e\u7535\u5bb9\u611f\u5e94\u7684\u539f\u7406\u5236\u4f5c\u7684\u89e6\u6478\u5f00\u5173\u6a21\u5757\u3002\u4eba\u4f53\u6216\u91d1\u5c5e\u89e6\u78b0\u4f20\u611f\u5668\u7684\u9540\u91d1\u63a5\u89e6\u9762\u4f1a\u88ab\u611f\u5e94\u5230\uff0c\u9664\u4e86\u4e0e\u91d1\u5c5e\u9762\u7684\u76f4\u63a5\u89e6\u6478\uff0c\u9694\u7740\u4e00\u5b9a\u539a\u5ea6\u7684\u5851\u6599\u3001\u73bb\u7483\u7b49\u6750\u6599\u7684\u63a5\u89e6\u4e5f\u53ef\u4ee5\u88ab\u611f\u5e94\u5230\uff0c\u611f\u5e94\u7075\u654f\u5ea6\u968f\u63a5\u89e6\u9762\u7684\u5927\u5c0f\u548c\u8986\u76d6\u6750\u6599\u7684\u539a\u5ea6\u6709\u5173\u3002 \u6a21\u5757\u67092\u79cd\u8f93\u51fa\u6a21\u5f0f\uff0c\u53ef\u4f7f\u7528\u6539\u53d8\u710a\u63a5\u8df3\u7ebf\u8fdb\u884c\u5207\u6362\u3002\u5728\u6a21\u5757\u4e0a\u4f1a\u6709\u4e00\u4e2a\u7528\u4e8e\u6539\u53d8\u6a21\u5f0f\u7684\u77ed\u8def\u70b9\uff0c\u710a\u63a5\u4e0a\u9762\u4e24\u4e2a\u7684\u4e24\u4e2a\u77ed\u8def\u70b9\uff0c\u6a21\u5757\u7684\u6a21\u5f0f\u4f1a\u5207\u6362\u4e3a\u5f00\u5173\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u7528\u4e8e\u5236\u4f5c\u4e0d\u592a\u590d\u6742\u89e6\u6478\u63a7\u5236\u7684\u53f0\u706f\u3002\u77ed\u8def\u4e0b\u9762\u4e24\u4e2a\u77ed\u8def\u70b9\uff0c\u6a21\u5757\u7684\u6a21\u5f0f\u4f1a\u5207\u6362\u4e3a\u6309\u952e\uff0c\u6b64\u65f6\u53ef\u4ee5\u7528\u6765\u4ee3\u66ff\u5b9e\u4f53\u6309\u952e\u3002 \u6ce8\u610f\u4e8b\u9879\uff1a\u4f7f\u7528\u65f6\u6a21\u5757\u9700\u8981\u79bb\u56fa\u5b9a\u9762\u6709\u4e00\u5b9a\u9ad8\u5ea6\uff0c\u907f\u514d\u63a5\u89e6\u4ea7\u751f\u4fe1\u53f7\u8bef\u5dee\u3002\u8bf7\u52ff\u76f4\u63a5\u63e1\u4f4f\u89e6\u6478\u4f20\u611f\u5668\uff0c\u4f1a\u5bfc\u81f4\u80cc\u90e8\u7535\u5bb9\u5347\u6e29\uff0c\u4ee5\u514d\u70eb\u4f24\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E8%A7%A6%E6%91%B8%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u89e6\u6478\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin,ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 touch = Pin(4, Pin.IN) while True: print(touch.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u6709\u624b\u6307\u63a5\u89e6\u8fd4\u56de\uff1a0","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E8%A7%A6%E6%91%B8%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u89e6\u78b0\u611f\u5e94\u706f \u89e6\u78b0\u706f\u4eae\uff0c\u518d\u6b21\u89e6\u78b0\u706f\u706d ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa ADC \u5bf9\u8c61 touch = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if touch.value() == 0: while touch.value() == 0: pass led.value(not led.value())","title":"\u5b9e\u9a8c\u4e8c\uff1a\u89e6\u78b0\u611f\u5e94\u706f"},{"location":"MicroPython/%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97/","text":"\u8bed\u97f3\u8bc6\u522b\u6a21\u5757 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u8bed\u97f3\u6a21\u5757 1 4 LED\u706f 1 5 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668 1 6 PH2.0\u6570\u636e\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668 4 3 \u8bed\u97f3\u6a21\u5757 - SDA 21 4 \u8bed\u97f3\u6a21\u5757 - SCL 22 SU-03T\u8bed\u97f3\u8bc6\u522b\u63a7\u5236\u6a21\u5757\u4ecb\u7ecd SU-03T\u8bed\u97f3\u8bc6\u522b\u63a7\u5236\u6a21\u5757\u4e3a\u7528\u6237\u63d0\u4f9b\u4fbf\u6377\u4fbf\u5b9c\u7684\u4e32\u53e3\u79bb\u7ebf\u8bed\u97f3\u8bc6\u522b\u65b9\u6848\uff0c\u53ef\u5e7f\u6cdb\u4e14\u5feb\u901f\u5e94\u7528\u4e8e\u667a\u80fd\u5bb6\u5c45\uff0c\u5404\u7c7b\u667a\u80fd\u5c0f\u5bb6\u7535\uff0c86\u76d2\uff0c\u73a9\u5177\uff0c\u706f\u5177\u7b49\u9700\u8981\u8bed\u97f3\u64cd\u63a7\u7684\u4ea7\u54c1\u3002 \u8bed\u97f3\u8bc6\u522b\u91c7\u7528\u4e86\u79bb\u7ebf\u8bed\u97f3\u8bc6\u522b\u82af\u7247\u3002\u901a\u8fc7\u4e32\u53e3\u901a\u4fe1\u7684\u65b9\u5f0f\u5b9e\u73b0\u4e0e\u4e3b\u673a\u7684\u4ea4\u4e92\uff0c\u6700\u591a\u652f\u6301150\u6761\u8bed\u97f3\u6307\u4ee4\uff0c\u53ef\u5728\u7528\u6237\u5e73\u53f0\u4e0a\u81ea\u4e3b\u5b9a\u5236\u8bed\u97f3\u6307\u4ee4\u548c\u56fa\u4ef6\uff0c\u547d\u4ee4\u8bcd\u53ef\u4efb\u610f\u4fee\u6539\uff0c\u5f00\u53d1\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u5199\u4ee3\u7801\u3002\u81ea\u5e26\u56fa\u4ef6\u4e0b\u8f7d\u82af\u7247\uff0c\u53ea\u9700\u6570\u636e\u7ebf\u5373\u53ef\u5b8c\u6210\u56fa\u4ef6\u4e0b\u8f7d\u3002\u652f\u6301\u8bed\u97f3\u8c03\u8282\u97f3\u91cf\u3001\u5b66\u4e60\u5524\u9192\u8bcd\uff0c\u8bc6\u522b\u7075\u654f\u4e14\u51c6\u786e\u7387\u9ad8\u3002 \u70e7\u5f55\u8bed\u8a00\u6a21\u5757\u56fa\u4ef6 \u4e32\u53e3\u70e7\u5f55\u5de5\u5177\u4e0b\u8f7d \u70b9\u51fb\u4e0b\u8f7d \u5236\u4f5c\u56fa\u4ef6\uff08\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u6211\u4eec\u5236\u4f5c\u597d\u7684\u56fa\u4ef6\uff1a \u70b9\u51fb\u4e0b\u8f7d \u63d0\u53d6\u7801: kb12\uff09 \u7b2c\u4e00\u6b65\uff1a\u6253\u5f00\u7f51\u5740\uff1a\u667a\u80fd\u516c\u5143[ \u667a\u80fd\u516c\u5143 )\uff0c\u70b9\u51fb\u6ce8\u518c \u7b2c\u4e8c\u6b65\uff1a\u9009\u62e9SU-03T\u4ea7\u54c1\uff0c\u70b9\u51fb\uff1a\u7acb\u5373\u521b\u5efa \u7b2c\u4e09\u6b65\uff1a\u8f93\u5165\u76f8\u5173\u5185\u5bb9\uff0c\u7136\u540e\u70b9\u51fb\"\u4e0b\u4e00\u6b65\" \u7b2c\u56db\u6b65\uff1a\u8bbe\u5907\u5524\u9192\u8bbe\u7f6e \u7b2c\u4e94\u6b65\uff1a\u5f15\u811a\u914d\u7f6e\uff08\u7b2c7\u30018\u52a1\u5fc5\u6309\u7167\u5982\u56fe\u8bbe\u7f6e\uff09 \u7b2c\u516d\u6b65\uff1a\u8fdb\u884c\u8bbe\u7f6e\u201c\u57fa\u7840\u4fe1\u606f\u201d \u884c\u4e3a\uff1a\u7ed9\u81ea\u5df1\u8981\u505a\u7684\u4e8b\u60c5\u8d77\u540d\uff08\u82f1\u6587\uff09 \u89e6\u53d1\u65b9\u5f0f\uff1a\u547d\u4ee4\u8bcd\uff0c\u5c31\u662f\u901a\u8fc7\u8bf4\u8bdd\u6765\u53d1\u51fa\u8bf7\u6c42 \u547d\u4ee4\u8bcd\uff1a\u5c31\u662f\u8bf4\u8bdd\u80fd\u88ab\u8bc6\u522b\u7684\u5185\u5bb9\uff0c\u540c\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u6709\u591a\u4e2a\u547d\u4ee4\u8bcd\u7528\u201c|\u201d\u9694\u5f00 \u56de\u590d\u8bed\uff1a\u662f\u6a21\u5757\u5bf9\u4f60\u547d\u4ee4\u7684\u56de\u590d\u8bed\u97f3\uff08\u6ce8\u610f\u4e0d\u9700\u8981\u8bed\u97f3\u56de\u590d\u7684\uff0c\u5c31\u4e0d\u7528\u586b\u5199\uff0c\u5982\u679c\u8be2\u95ee\u6e29\u5ea6\uff0c\u6ca1\u6709\u56fa\u5b9a\u7684\u7b54\u590d\u8bed\uff0c\u8fd9\u4e2a\u5730\u65b9\u5c31\u4e0d\u7528\u5199\uff09 \u5b8c\u6210\u8bbe\u7f6e\u4e4b\u540e\uff0c\u70b9\u51fb\u6700 \u7b2c\u4e03\u6b65\uff1a\u6307\u4ee4\u8bcd\u662f\u901a\u8fc7\u8bed\u97f3\u8bbe\u522b\u7684\u65b9\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u4ece\u5355\u7247\u673a\u7684\u4e32\u53e3\u6765\u83b7\u53d6\u6570\u636e\uff0c\u4e0b\u9762\u6f14\u793a\u83b7\u53d6\u6e29\u5ea6\u7684\u8bbe\u7f6e\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u5982\u4e0b\uff1a \u8bbe\u7f6e\u201c\u63a7\u5236\u8be6\u60c5\u201d \u628a\u6570\u636e\u53d1\u7ed9\u5355\u7247\u673a\uff0c\u8bbe\u7f6e\u5982\u4e0b\uff1a \u4ece\u5355\u7247\u673a\u83b7\u53d6\u6570\u636e\uff0c\u9996\u5148\uff1a\u6dfb\u52a0\u89e6\u53d1 \u7684 \u8bbe\u7f6e\u5982\u4e0b\u201c \u4ece\u5355\u7247\u673a\u83b7\u53d6\u6570\u636e\uff0c\u5176\u6b21\uff1a\u8bbe\u7f6e\u53d8\u91cf\u6765\u63a5\u53d7\u4ece\u5355\u7247\u673a\u4f20\u9012\u6765\u7684\u6570\u636e \u4ece\u5355\u7247\u673a\u83b7\u53d6\u6570\u636e\uff0c\u518d\u6b21\u8fdb\u884c\uff0c\u89e6\u53d1\u8bbe\u7f6e \u8fdb\u5165\u53d8\u91cf\u8d4b\u503c\u7684\u8bbe\u8ba1 \u8bbe\u7f6e\u4e4b\u540e\uff0c\u4e32\u53e3\u8f93\u5165\u89e6\u53d1\u9879\u663e\u793a\u5982\u4e0b\uff1a \u6700\u540e\uff0c\u9700\u8981\u5c06\u53d8\u91cf\u7528\u8bed\u97f3\u7684\u65b9\u5f0f\u64ad\u62a5\u51fa\u6765\uff0c\u9700\u8981\u4f7f\u7528\u547d\u4ee4\u8bcd\u6dfb\u52a0\u89e6\u53d1\u63a7\u5236 \u8fdb\u884c\u5982\u4e0b\u8bbe\u7f6e\uff1a \u7b2c\u516b\u6b65\uff1a\u8bbe\u7f6e\u4ece\u4e32\u53e3\u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4\uff0c\u8bbe\u7f6e\u5982\u4e0b; \u8bbe\u7f6e\u65f6\u95f4\u53c2\u6570\u7528\u6765\u4e34\u65f6\u5b58\u653e\u4ece\u5355\u7247\u673a\u83b7\u53d6\u65f6\u95f4\u6570\u636e \u8bbe\u7f6e\u65f6\u95f4\u53d8\u91cf\u7528\u6765\u63a5\u53d7\u65f6\u95f4\u6570\u636e\uff0c\u628a\u4e34\u65f6\u53c2\u6570\u8d4b\u503c\u7ed9\u53d8\u91cf \u7b2c\u4e5d\u6b65\uff1a\u8bbe\u7f6e\u5b8c\u6210 \u7b2c\u5341\u6b65\uff1a\u8010\u5fc3\u7b49\u5f85\u7cfb\u7edf\u7f16\u8bd1\uff08\u8981\u5f88\u4e45\u54e6\uff09 \u7b2c\u5341\u4e00\u6b65\uff1a\u6210\u529f\u5468\u4e4b\u540e\u5c31\u53ef\u4ee5\u4e0b\u8f7d\u70e7\u5f55\u56fa\u4ef6\u4e86 \u7b2c\u5341\u4e8c\u6b65\uff1a\u4e0b\u8f7d\u56fa\u4ef6\u5e76\u89e3\u538b\u5230\u7535\u8111\u4e2d \u7b2c\u5341\u4e09\u6b65\uff1a\u70e7\u5f55\u8fc7\u7a0b \u4e0b\u8f7d\u4e32\u53e3\u70e7\u5f55\u8f6f\u4ef6 \u70b9\u51fb\u4e0b\u8f7d \u63d0\u53d6\u7801: m3c3 \u89e3\u538b\u540e\u6253\u5f00\u70e7\u5f55\u8f6f\u4ef6 \u4f7f\u7528ubs\u6570\u636e\u7ebf\u628a\u8bed\u97f3\u6a21\u5757\u548c\u7535\u8111\u8fde\u63a5\uff0c\u9009\u62e9\u5230\u4e4b\u524d\u89e3\u538b\u7684\u70e7\u5f55\u56fa\u4ef6 \u70b9\u51fb\u70e7\u5f55\u6309\u94ae \u51fa\u73b0\u9ec4\u8272\u80cc\u666f\u6761\uff0c\u53bb\u6309\u4e0b\u6a21\u5757\u4e0a\u7684\u84dd\u8272\u6309\u94ae\u3002\u67e5\u770b\u662f\u5426\u51fa\u73b0\u8fdb\u53bb\uff0c\u6ca1\u6709\u51fa\u73b0\uff0c\u53ef\u4ee5\u518d\u6309\u4e00\u6b21 \u5f53\u8fdb\u5ea6\u5b8c\u6210\u540e\uff0c\u70e7\u5f55\u5b8c\u6210 \u5b9e\u9a8c\u4e00\uff1a\u8bed\u97f3\u63a7\u5236LED\u706f\u7684\u4eae\u706d \u4ee3\u7801\u5982\u4e0b\uff1a import machine import time uart1=machine.UART(1, tx=17, rx=16, baudrate=9600) pin2 = machine.Pin(2, machine.Pin.OUT) while True: if uart1.any(): data = uart1.read() print(data) if data == b'\\x01': # \u8fd9\u662f\u8bed\u97f3\u6a21\u5757\u4f20\u56de\u6765\u7684\u6570\u636e\u503c01 pin2.value(1) time.sleep_ms(100) elif data == b'\\x02': # \u8fd9\u662f\u8bed\u97f3\u6a21\u5757\u4f20\u56de\u6765\u7684\u6570\u636e\u503c02 pin2.value(0) time.sleep_ms(100) \u5b9e\u9a8c\u4e8c\uff1a\u8bed\u97f3\u8bed\u97f3\u64ad\u62a5\u5b9e\u65f6\u65f6\u95f4\u662f\u6e29\u5ea6 \u4ee3\u7801\u5982\u4e0b ''' \u5b9e\u65f6\u64ad\u62a5\u65f6\u95f4\u548c\u6e29\u5ea6 \u5524\u9192\u8bcd\uff1a\u4f60\u597d\u5c0f\u7f8e \u8be2\u95ee\u65f6\u95f4\uff1a\u73b0\u5728\u7684\u65f6\u95f4\u662f \u8be2\u95ee\u6e29\u5ea6\uff1a\u73b0\u5728\u7684\u662f\u6e29\u5ea6\u662f ''' from machine import UART, RTC,Pin import time import onewire import ds18x20 # ===========\u521d\u59cb\u5316\u8bed\u97f3\u6a21\u5757=UART1======== uart = UART(1, baudrate=9600, tx=17, rx=16) # ======== DS18B20\u6e29\u5ea6\u4f20\u611f\u5668\u914d\u7f6e ======== ow = onewire.OneWire(Pin(4, Pin.IN, Pin.PULL_UP)) # \u6784\u5efa\u5355\u603b\u7ebf\u5bf9\u8c61 ds = ds18x20.DS18X20(ow) # \u6784\u5efaDS18B20\u5bf9\u8c61 roms = ds.scan() # \u626b\u63cf\u8bbe\u5907 # ========\u83b7\u53d6\u5f53\u524d\u7684\u6e29\u5ea6\u503c=============== def get_temp_hex(): ds.convert_temp() # \u542f\u52a8\u6e29\u5ea6\u8f6c\u6362 time.sleep_ms(750) # \u7b49\u5f85\u6e29\u5ea6\u8f6c\u6362\u5b8c\u6210 temp = int(ds.read_temp(roms[0])*100) # \u8bfb\u53d6\u6e29\u5ea6\u503c temp_zs = temp // 100 # \u6e29\u5ea6\u7684\u6574\u6570\u4f4d temp_xs = (temp % 100)//10 temp_xg = (temp % 100)%10 return [temp_zs,temp_xs,temp_xg] # ======\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u503c============= def get_time_hex(): # \u521d\u59cb\u5316RTC rtc = RTC() # \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 (\u5e74,\u6708,\u65e5,\u661f\u671f,\u65f6,\u5206,\u79d2,\u5fae\u79d2) now = rtc.datetime() # \u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u7ec4 [\u65f6,\u5206,\u79d2] return [now[4], now[5], now[6]] # \u65f6,\u5206,\u79d2 while True : # =======\u6e29\u5ea6\u6570\u636e====== temp_data = get_temp_hex() print(f'\u5f53\u524d\u7684\u6e29\u5ea6\u6570\u636e\u4e3a{temp_data}') # =======\u65f6\u95f4\u6570\u636e====== time_data = get_time_hex() print(f'\u5f53\u524d\u7684\u65f6\u95f4\u6570\u636e\u4e3a{time_data}') # =====\u53d1\u9001\u65f6\u95f4\u5341\u516d\u8fdb\u5236\u4fe1\u53f7====== hex_time_data = [0xAA,0x55] + [0x02] + time_data + [0x55,0xAA] # \u6dfb\u52a0\u5e27\u5934\u5e27\u5c3e (\u793a\u4f8b: 0xAA\u5f00\u5934, 0x55\u7ed3\u5c3e) byte_time_data = bytearray(hex_time_data) uart.write(byte_time_data) # =====\u53d1\u9001\u6e29\u5ea6\u5341\u516d\u8fdb\u5236\u4fe1\u53f7====== hex_temp_data = [0xAA,0x55] + [0x01] + temp_data + [0x55,0xAA] # \u6dfb\u52a0\u5e27\u5934\u5e27\u5c3e (\u793a\u4f8b: 0xAA\u5f00\u5934, 0x55\u7ed3\u5c3e) byte_temp_data = bytearray(hex_temp_data) uart.write(byte_temp_data) time.sleep(6)","title":"53.\u8bed\u97f3\u6a21\u5757"},{"location":"MicroPython/%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97/#_1","text":"","title":"\u8bed\u97f3\u8bc6\u522b\u6a21\u5757"},{"location":"MicroPython/%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u8bed\u97f3\u6a21\u5757 1 4 LED\u706f 1 5 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668 1 6 PH2.0\u6570\u636e\u7ebf 3 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u6570\u5b57\u6e29\u5ea6\u4f20\u611f\u5668 4 3 \u8bed\u97f3\u6a21\u5757 - SDA 21 4 \u8bed\u97f3\u6a21\u5757 - SCL 22 SU-03T\u8bed\u97f3\u8bc6\u522b\u63a7\u5236\u6a21\u5757\u4ecb\u7ecd SU-03T\u8bed\u97f3\u8bc6\u522b\u63a7\u5236\u6a21\u5757\u4e3a\u7528\u6237\u63d0\u4f9b\u4fbf\u6377\u4fbf\u5b9c\u7684\u4e32\u53e3\u79bb\u7ebf\u8bed\u97f3\u8bc6\u522b\u65b9\u6848\uff0c\u53ef\u5e7f\u6cdb\u4e14\u5feb\u901f\u5e94\u7528\u4e8e\u667a\u80fd\u5bb6\u5c45\uff0c\u5404\u7c7b\u667a\u80fd\u5c0f\u5bb6\u7535\uff0c86\u76d2\uff0c\u73a9\u5177\uff0c\u706f\u5177\u7b49\u9700\u8981\u8bed\u97f3\u64cd\u63a7\u7684\u4ea7\u54c1\u3002 \u8bed\u97f3\u8bc6\u522b\u91c7\u7528\u4e86\u79bb\u7ebf\u8bed\u97f3\u8bc6\u522b\u82af\u7247\u3002\u901a\u8fc7\u4e32\u53e3\u901a\u4fe1\u7684\u65b9\u5f0f\u5b9e\u73b0\u4e0e\u4e3b\u673a\u7684\u4ea4\u4e92\uff0c\u6700\u591a\u652f\u6301150\u6761\u8bed\u97f3\u6307\u4ee4\uff0c\u53ef\u5728\u7528\u6237\u5e73\u53f0\u4e0a\u81ea\u4e3b\u5b9a\u5236\u8bed\u97f3\u6307\u4ee4\u548c\u56fa\u4ef6\uff0c\u547d\u4ee4\u8bcd\u53ef\u4efb\u610f\u4fee\u6539\uff0c\u5f00\u53d1\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u5199\u4ee3\u7801\u3002\u81ea\u5e26\u56fa\u4ef6\u4e0b\u8f7d\u82af\u7247\uff0c\u53ea\u9700\u6570\u636e\u7ebf\u5373\u53ef\u5b8c\u6210\u56fa\u4ef6\u4e0b\u8f7d\u3002\u652f\u6301\u8bed\u97f3\u8c03\u8282\u97f3\u91cf\u3001\u5b66\u4e60\u5524\u9192\u8bcd\uff0c\u8bc6\u522b\u7075\u654f\u4e14\u51c6\u786e\u7387\u9ad8\u3002 \u70e7\u5f55\u8bed\u8a00\u6a21\u5757\u56fa\u4ef6 \u4e32\u53e3\u70e7\u5f55\u5de5\u5177\u4e0b\u8f7d \u70b9\u51fb\u4e0b\u8f7d \u5236\u4f5c\u56fa\u4ef6\uff08\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u6211\u4eec\u5236\u4f5c\u597d\u7684\u56fa\u4ef6\uff1a \u70b9\u51fb\u4e0b\u8f7d \u63d0\u53d6\u7801: kb12\uff09 \u7b2c\u4e00\u6b65\uff1a\u6253\u5f00\u7f51\u5740\uff1a\u667a\u80fd\u516c\u5143[ \u667a\u80fd\u516c\u5143 )\uff0c\u70b9\u51fb\u6ce8\u518c \u7b2c\u4e8c\u6b65\uff1a\u9009\u62e9SU-03T\u4ea7\u54c1\uff0c\u70b9\u51fb\uff1a\u7acb\u5373\u521b\u5efa \u7b2c\u4e09\u6b65\uff1a\u8f93\u5165\u76f8\u5173\u5185\u5bb9\uff0c\u7136\u540e\u70b9\u51fb\"\u4e0b\u4e00\u6b65\" \u7b2c\u56db\u6b65\uff1a\u8bbe\u5907\u5524\u9192\u8bbe\u7f6e \u7b2c\u4e94\u6b65\uff1a\u5f15\u811a\u914d\u7f6e\uff08\u7b2c7\u30018\u52a1\u5fc5\u6309\u7167\u5982\u56fe\u8bbe\u7f6e\uff09 \u7b2c\u516d\u6b65\uff1a\u8fdb\u884c\u8bbe\u7f6e\u201c\u57fa\u7840\u4fe1\u606f\u201d \u884c\u4e3a\uff1a\u7ed9\u81ea\u5df1\u8981\u505a\u7684\u4e8b\u60c5\u8d77\u540d\uff08\u82f1\u6587\uff09 \u89e6\u53d1\u65b9\u5f0f\uff1a\u547d\u4ee4\u8bcd\uff0c\u5c31\u662f\u901a\u8fc7\u8bf4\u8bdd\u6765\u53d1\u51fa\u8bf7\u6c42 \u547d\u4ee4\u8bcd\uff1a\u5c31\u662f\u8bf4\u8bdd\u80fd\u88ab\u8bc6\u522b\u7684\u5185\u5bb9\uff0c\u540c\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u6709\u591a\u4e2a\u547d\u4ee4\u8bcd\u7528\u201c|\u201d\u9694\u5f00 \u56de\u590d\u8bed\uff1a\u662f\u6a21\u5757\u5bf9\u4f60\u547d\u4ee4\u7684\u56de\u590d\u8bed\u97f3\uff08\u6ce8\u610f\u4e0d\u9700\u8981\u8bed\u97f3\u56de\u590d\u7684\uff0c\u5c31\u4e0d\u7528\u586b\u5199\uff0c\u5982\u679c\u8be2\u95ee\u6e29\u5ea6\uff0c\u6ca1\u6709\u56fa\u5b9a\u7684\u7b54\u590d\u8bed\uff0c\u8fd9\u4e2a\u5730\u65b9\u5c31\u4e0d\u7528\u5199\uff09 \u5b8c\u6210\u8bbe\u7f6e\u4e4b\u540e\uff0c\u70b9\u51fb\u6700 \u7b2c\u4e03\u6b65\uff1a\u6307\u4ee4\u8bcd\u662f\u901a\u8fc7\u8bed\u97f3\u8bbe\u522b\u7684\u65b9\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u4ece\u5355\u7247\u673a\u7684\u4e32\u53e3\u6765\u83b7\u53d6\u6570\u636e\uff0c\u4e0b\u9762\u6f14\u793a\u83b7\u53d6\u6e29\u5ea6\u7684\u8bbe\u7f6e\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u5982\u4e0b\uff1a \u8bbe\u7f6e\u201c\u63a7\u5236\u8be6\u60c5\u201d \u628a\u6570\u636e\u53d1\u7ed9\u5355\u7247\u673a\uff0c\u8bbe\u7f6e\u5982\u4e0b\uff1a \u4ece\u5355\u7247\u673a\u83b7\u53d6\u6570\u636e\uff0c\u9996\u5148\uff1a\u6dfb\u52a0\u89e6\u53d1 \u7684 \u8bbe\u7f6e\u5982\u4e0b\u201c \u4ece\u5355\u7247\u673a\u83b7\u53d6\u6570\u636e\uff0c\u5176\u6b21\uff1a\u8bbe\u7f6e\u53d8\u91cf\u6765\u63a5\u53d7\u4ece\u5355\u7247\u673a\u4f20\u9012\u6765\u7684\u6570\u636e \u4ece\u5355\u7247\u673a\u83b7\u53d6\u6570\u636e\uff0c\u518d\u6b21\u8fdb\u884c\uff0c\u89e6\u53d1\u8bbe\u7f6e \u8fdb\u5165\u53d8\u91cf\u8d4b\u503c\u7684\u8bbe\u8ba1 \u8bbe\u7f6e\u4e4b\u540e\uff0c\u4e32\u53e3\u8f93\u5165\u89e6\u53d1\u9879\u663e\u793a\u5982\u4e0b\uff1a \u6700\u540e\uff0c\u9700\u8981\u5c06\u53d8\u91cf\u7528\u8bed\u97f3\u7684\u65b9\u5f0f\u64ad\u62a5\u51fa\u6765\uff0c\u9700\u8981\u4f7f\u7528\u547d\u4ee4\u8bcd\u6dfb\u52a0\u89e6\u53d1\u63a7\u5236 \u8fdb\u884c\u5982\u4e0b\u8bbe\u7f6e\uff1a \u7b2c\u516b\u6b65\uff1a\u8bbe\u7f6e\u4ece\u4e32\u53e3\u83b7\u53d6\u5b9e\u65f6\u65f6\u95f4\uff0c\u8bbe\u7f6e\u5982\u4e0b; \u8bbe\u7f6e\u65f6\u95f4\u53c2\u6570\u7528\u6765\u4e34\u65f6\u5b58\u653e\u4ece\u5355\u7247\u673a\u83b7\u53d6\u65f6\u95f4\u6570\u636e \u8bbe\u7f6e\u65f6\u95f4\u53d8\u91cf\u7528\u6765\u63a5\u53d7\u65f6\u95f4\u6570\u636e\uff0c\u628a\u4e34\u65f6\u53c2\u6570\u8d4b\u503c\u7ed9\u53d8\u91cf \u7b2c\u4e5d\u6b65\uff1a\u8bbe\u7f6e\u5b8c\u6210 \u7b2c\u5341\u6b65\uff1a\u8010\u5fc3\u7b49\u5f85\u7cfb\u7edf\u7f16\u8bd1\uff08\u8981\u5f88\u4e45\u54e6\uff09 \u7b2c\u5341\u4e00\u6b65\uff1a\u6210\u529f\u5468\u4e4b\u540e\u5c31\u53ef\u4ee5\u4e0b\u8f7d\u70e7\u5f55\u56fa\u4ef6\u4e86 \u7b2c\u5341\u4e8c\u6b65\uff1a\u4e0b\u8f7d\u56fa\u4ef6\u5e76\u89e3\u538b\u5230\u7535\u8111\u4e2d \u7b2c\u5341\u4e09\u6b65\uff1a\u70e7\u5f55\u8fc7\u7a0b \u4e0b\u8f7d\u4e32\u53e3\u70e7\u5f55\u8f6f\u4ef6 \u70b9\u51fb\u4e0b\u8f7d \u63d0\u53d6\u7801: m3c3 \u89e3\u538b\u540e\u6253\u5f00\u70e7\u5f55\u8f6f\u4ef6 \u4f7f\u7528ubs\u6570\u636e\u7ebf\u628a\u8bed\u97f3\u6a21\u5757\u548c\u7535\u8111\u8fde\u63a5\uff0c\u9009\u62e9\u5230\u4e4b\u524d\u89e3\u538b\u7684\u70e7\u5f55\u56fa\u4ef6 \u70b9\u51fb\u70e7\u5f55\u6309\u94ae \u51fa\u73b0\u9ec4\u8272\u80cc\u666f\u6761\uff0c\u53bb\u6309\u4e0b\u6a21\u5757\u4e0a\u7684\u84dd\u8272\u6309\u94ae\u3002\u67e5\u770b\u662f\u5426\u51fa\u73b0\u8fdb\u53bb\uff0c\u6ca1\u6709\u51fa\u73b0\uff0c\u53ef\u4ee5\u518d\u6309\u4e00\u6b21 \u5f53\u8fdb\u5ea6\u5b8c\u6210\u540e\uff0c\u70e7\u5f55\u5b8c\u6210","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97/#led","text":"\u4ee3\u7801\u5982\u4e0b\uff1a import machine import time uart1=machine.UART(1, tx=17, rx=16, baudrate=9600) pin2 = machine.Pin(2, machine.Pin.OUT) while True: if uart1.any(): data = uart1.read() print(data) if data == b'\\x01': # \u8fd9\u662f\u8bed\u97f3\u6a21\u5757\u4f20\u56de\u6765\u7684\u6570\u636e\u503c01 pin2.value(1) time.sleep_ms(100) elif data == b'\\x02': # \u8fd9\u662f\u8bed\u97f3\u6a21\u5757\u4f20\u56de\u6765\u7684\u6570\u636e\u503c02 pin2.value(0) time.sleep_ms(100)","title":"\u5b9e\u9a8c\u4e00\uff1a\u8bed\u97f3\u63a7\u5236LED\u706f\u7684\u4eae\u706d"},{"location":"MicroPython/%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9D%97/#_3","text":"\u4ee3\u7801\u5982\u4e0b ''' \u5b9e\u65f6\u64ad\u62a5\u65f6\u95f4\u548c\u6e29\u5ea6 \u5524\u9192\u8bcd\uff1a\u4f60\u597d\u5c0f\u7f8e \u8be2\u95ee\u65f6\u95f4\uff1a\u73b0\u5728\u7684\u65f6\u95f4\u662f \u8be2\u95ee\u6e29\u5ea6\uff1a\u73b0\u5728\u7684\u662f\u6e29\u5ea6\u662f ''' from machine import UART, RTC,Pin import time import onewire import ds18x20 # ===========\u521d\u59cb\u5316\u8bed\u97f3\u6a21\u5757=UART1======== uart = UART(1, baudrate=9600, tx=17, rx=16) # ======== DS18B20\u6e29\u5ea6\u4f20\u611f\u5668\u914d\u7f6e ======== ow = onewire.OneWire(Pin(4, Pin.IN, Pin.PULL_UP)) # \u6784\u5efa\u5355\u603b\u7ebf\u5bf9\u8c61 ds = ds18x20.DS18X20(ow) # \u6784\u5efaDS18B20\u5bf9\u8c61 roms = ds.scan() # \u626b\u63cf\u8bbe\u5907 # ========\u83b7\u53d6\u5f53\u524d\u7684\u6e29\u5ea6\u503c=============== def get_temp_hex(): ds.convert_temp() # \u542f\u52a8\u6e29\u5ea6\u8f6c\u6362 time.sleep_ms(750) # \u7b49\u5f85\u6e29\u5ea6\u8f6c\u6362\u5b8c\u6210 temp = int(ds.read_temp(roms[0])*100) # \u8bfb\u53d6\u6e29\u5ea6\u503c temp_zs = temp // 100 # \u6e29\u5ea6\u7684\u6574\u6570\u4f4d temp_xs = (temp % 100)//10 temp_xg = (temp % 100)%10 return [temp_zs,temp_xs,temp_xg] # ======\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u503c============= def get_time_hex(): # \u521d\u59cb\u5316RTC rtc = RTC() # \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 (\u5e74,\u6708,\u65e5,\u661f\u671f,\u65f6,\u5206,\u79d2,\u5fae\u79d2) now = rtc.datetime() # \u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u7ec4 [\u65f6,\u5206,\u79d2] return [now[4], now[5], now[6]] # \u65f6,\u5206,\u79d2 while True : # =======\u6e29\u5ea6\u6570\u636e====== temp_data = get_temp_hex() print(f'\u5f53\u524d\u7684\u6e29\u5ea6\u6570\u636e\u4e3a{temp_data}') # =======\u65f6\u95f4\u6570\u636e====== time_data = get_time_hex() print(f'\u5f53\u524d\u7684\u65f6\u95f4\u6570\u636e\u4e3a{time_data}') # =====\u53d1\u9001\u65f6\u95f4\u5341\u516d\u8fdb\u5236\u4fe1\u53f7====== hex_time_data = [0xAA,0x55] + [0x02] + time_data + [0x55,0xAA] # \u6dfb\u52a0\u5e27\u5934\u5e27\u5c3e (\u793a\u4f8b: 0xAA\u5f00\u5934, 0x55\u7ed3\u5c3e) byte_time_data = bytearray(hex_time_data) uart.write(byte_time_data) # =====\u53d1\u9001\u6e29\u5ea6\u5341\u516d\u8fdb\u5236\u4fe1\u53f7====== hex_temp_data = [0xAA,0x55] + [0x01] + temp_data + [0x55,0xAA] # \u6dfb\u52a0\u5e27\u5934\u5e27\u5c3e (\u793a\u4f8b: 0xAA\u5f00\u5934, 0x55\u7ed3\u5c3e) byte_temp_data = bytearray(hex_temp_data) uart.write(byte_temp_data) time.sleep(6)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u8bed\u97f3\u8bed\u97f3\u64ad\u62a5\u5b9e\u65f6\u65f6\u95f4\u662f\u6e29\u5ea6"},{"location":"MicroPython/%E8%B6%85%E5%A3%B0%E6%B3%A2%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u8d85\u58f0\u6ce2\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Echo 33 2 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Tring 32 3 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 4 \u56db\u4f4d\u6570\u7801\u7ba1--SDA 21 5 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 6 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668\u4ecb\u7ecd HS-SR04\u8d85\u58f0\u6ce2\u6a21\u5757\u662f\u5728\u4f20\u7edf\u7684HC-SR04\u8d85\u58f0\u6ce2\u6a21\u5757\u57fa\u7840\u4e0a\u8fdb\u884c\u4f18\u5316\u8bbe\u8ba1\u3002\u529f\u80fd\u5c3a\u5bf8\u5927\u5c0f\u5b8c\u5168\u517c\u5bb9\u4f20\u7edf\u7684HC-SR04\u6a21\u5757\uff0c\u5728\u7ec6\u8282\u4e0a\u6bd4\u4f20\u7edf\u7684HC-SR04\u6a21\u5757\u66f4\u4f18\u5316\u4e86\u8bb8\u591a\u3002\u672c\u6a21\u5757\u6027\u80fd\u7a33\u5b9a\uff0c\u6d4b\u5ea6\u8ddd\u79bb\u7cbe\u786e\uff0c\u6a21\u5757\u9ad8\u7cbe\u5ea6\uff0c\u76f2\u533a\u5c0f\u3002\u4ea7\u54c1\u5e94\u7528\u9886\u57df\uff1a\u673a\u5668\u4eba\u907f\u969c\u3001\u7269\u4f53\u6d4b\u8ddd\u3001\u6db2\u4f4d\u68c0\u6d4b\u3001\u516c\u5171\u5b89\u9632\u3001\u505c\u8f66\u573a\u7b49\u7b49\u00b7\u00b7\u00b7\u00b7 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aHCSR04.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a ```python from machine import Pin, time_pulse_us import time class HCSR04: \"\"\" HCSR04\u8d85\u58f0\u6ce2\u6d4b\u8ddd\u6a21\u5757\u9a71\u52a8\u7c7b \u9002\u7528\u4e8eMicroPython ESP32\u73af\u5883 \u5f15\u811a\u8bf4\u660e\uff1a trig_pin: \u89e6\u53d1\u4fe1\u53f7\u5f15\u811a\uff08\u8f93\u51fa\u6a21\u5f0f\uff09 echo_pin: \u56de\u58f0\u63a5\u6536\u5f15\u811a\uff08\u8f93\u5165\u6a21\u5f0f\uff09 \u6ce8\u610f\uff1aESP32\u5f15\u811a\u5de5\u4f5c\u7535\u538b\u4e3a3.3V\uff0c\u5efa\u8bae\u5728Echo\u5f15\u811a\u6dfb\u52a0\u5206\u538b\u7535\u8def\u907f\u514d\u635f\u574f \"\"\" def __init__(self, trig_pin, echo_pin): \"\"\" \u521d\u59cb\u5316\u8d85\u58f0\u6ce2\u6a21\u5757 :param trig_pin: \u89e6\u53d1\u5f15\u811a\u7f16\u53f7\uff08\u6574\u6570\uff09 :param echo_pin: \u56de\u58f0\u5f15\u811a\u7f16\u53f7\uff08\u6574\u6570\uff09 \"\"\" # \u521d\u59cb\u5316Trig\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f self.trig = Pin(trig_pin, Pin.OUT) # \u521d\u59cb\u5316Echo\u5f15\u811a\u4e3a\u8f93\u5165\u6a21\u5f0f self.echo = Pin(echo_pin, Pin.IN) # \u8bbe\u7f6e\u9ed8\u8ba4\u58f0\u901f\uff0825\u6444\u6c0f\u5ea6\u5e72\u71e5\u7a7a\u6c14\u4e2d\u7684\u901f\u5ea6\uff0c\u5355\u4f4d\uff1a\u7c73/\u79d2\uff09 self.sound_speed = 340 # \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff08\u5bf9\u5e94\u6700\u5927\u6d4b\u91cf\u8ddd\u79bb4\u7c73\uff09 self.timeout = 4 * 2 / self.sound_speed * 1000000 # \u8ba1\u7b97\u8d85\u65f6\u65f6\u95f4\uff08\u5fae\u79d2\uff09 def distance_cm(self, samples=3): \"\"\" \u83b7\u53d6\u6d4b\u91cf\u8ddd\u79bb\uff08\u5398\u7c73\uff09 :param samples: \u91c7\u6837\u6b21\u6570\uff08\u53d6\u591a\u6b21\u6d4b\u91cf\u7684\u5e73\u5747\u503c\uff09 :return: \u8ddd\u79bb\uff08\u5398\u7c73\uff09\uff0c-1\u8868\u793a\u6d4b\u91cf\u5931\u8d25 \"\"\" distances = [] for _ in range(samples): distance = self._single_measurement() if distance == -1: continue distances.append(distance) time.sleep_ms(50) # \u6bcf\u6b21\u6d4b\u91cf\u95f4\u969450ms if not distances: return -1 # \u6240\u6709\u6d4b\u91cf\u5747\u5931\u8d25 return sum(distances) / len(distances) # \u8fd4\u56de\u5e73\u5747\u503c def _single_measurement(self): \"\"\" \u6267\u884c\u5355\u6b21\u8ddd\u79bb\u6d4b\u91cf :return: \u5355\u6b21\u6d4b\u91cf\u8ddd\u79bb\uff08\u5398\u7c73\uff09\uff0c-1\u8868\u793a\u5931\u8d25 \"\"\" # \u786e\u4fddTrig\u5f15\u811a\u5148\u7f6e\u4f4e self.trig.value(0) time.sleep_us(2) try: # \u53d1\u900110us\u9ad8\u7535\u5e73\u8109\u51b2\u89e6\u53d1\u6d4b\u91cf self.trig.value(1) time.sleep_us(10) self.trig.value(0) # \u4f7f\u7528\u8109\u51b2\u5bbd\u5ea6\u6d4b\u91cf\u51fd\u6570\u83b7\u53d6\u9ad8\u7535\u5e73\u6301\u7eed\u65f6\u95f4 # \u53c2\u6570\u8bf4\u660e\uff1a\u5f15\u811a\u5bf9\u8c61\uff0c\u89e6\u53d1\u72b6\u6001\uff0c\u8d85\u65f6\u65f6\u95f4\uff08\u5fae\u79d2\uff09 pulse_time = time_pulse_us(self.echo, 1, int(self.timeout)) # \u8ba1\u7b97\u8ddd\u79bb\uff08\u5355\u4f4d\uff1a\u5398\u7c73\uff09 # \u516c\u5f0f\u8bf4\u660e\uff1a\u8ddd\u79bb = (\u65f6\u95f4 * \u58f0\u901f) / 2 \uff08\u6765\u56de\u8ddd\u79bb\uff09 # \u65f6\u95f4\u5355\u4f4d\u8f6c\u6362\uff1a1\u79d2=1e6\u5fae\u79d2 \u2192 \u5398\u7c73\u8f6c\u6362\u7cfb\u6570\uff1a0.0343/2 \u2192 0.01715 \u2192 1/58 if pulse_time < 0: return -1 # \u8d85\u65f6\u8fd4\u56de-1 distance = (pulse_time * 0.0343) / 2 # \u66f4\u7cbe\u786e\u7684\u5398\u7c73\u8ba1\u7b97\u65b9\u5f0f # distance = pulse_time / 58 # \u7b80\u5316\u7684\u8fd1\u4f3c\u8ba1\u7b97\u65b9\u5f0f # \u8fc7\u6ee4\u5f02\u5e38\u503c\uff08\u6839\u636e\u6a21\u5757\u89c4\u683c\uff0c\u6709\u6548\u6d4b\u91cf\u8303\u56f42cm-400cm\uff09 if 2 <= distance <= 400: return distance return -1 except Exception as e: print(\"\u6d4b\u91cf\u9519\u8bef:\", e) return -1 # \u4f7f\u7528\u793a\u4f8b if name == \" main \": # \u521d\u59cb\u5316\u4f20\u611f\u5668\uff08Trig\u5f15\u811a=12, Echo\u5f15\u811a=14\uff09 sensor = HCSR04(trig_pin=12, echo_pin=14) while True: dist = sensor.distance_cm() if dist != -1: print(\"\u8ddd\u79bb\uff1a{:.1f} cm\".format(dist)) else: print(\"\u6d4b\u91cf\u5931\u8d25\") time.sleep(1) ``` \u5b9e\u9a8c1\uff1a\u8d85\u58f0\u6ce2\u6d4b\u8ddd \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c\u4e00\uff1a\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u8d85\u58f0\u6ce2\u68c0\u6d4b\u8ddd\u79bb ''' from machine import I2C, Pin from libs.HCSR04 import HCSR04 # \u5bfc\u5165\u8d85\u58f0\u6ce2\u7684\u5e93 from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u56db\u4f4d\u6570\u7801\u7ba1\u7684\u5e93 import time # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # \u521d\u59cb\u5316\u4f20\u611f\u5668\uff08Trig\u5f15\u811a=32, Echo\u5f15\u811a=33\uff09 sensor = HCSR04(trig_pin=32, echo_pin=33) while True: dist = int(sensor.distance_cm()*100) # \u5c06\u663e\u793a\u7684\u6570\u5b57\u8f6c\u6362\u4e3a4\u4e3a\u6574\u6570 display.shownum(dist) display.showDP(bit=1, show=True) # \u5728\u7b2c\u4e8c\u4f4d\u4e0a\u663e\u793a\u5c0f\u6570\u70b9 time.sleep(0.02) print(dist)","title":"39.\u8d85\u58f0\u6ce2\u4f20\u611f\u5668"},{"location":"MicroPython/%E8%B6%85%E5%A3%B0%E6%B3%A2%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u8d85\u58f0\u6ce2\u4f20\u611f\u5668"},{"location":"MicroPython/%E8%B6%85%E5%A3%B0%E6%B3%A2%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668 1 4 \u56db\u4f4d\u6570\u7801\u7ba1 1 6 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Echo 33 2 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668-Tring 32 3 \u56db\u4f4d\u6570\u7801\u7ba1-SCL 22 4 \u56db\u4f4d\u6570\u7801\u7ba1--SDA 21 5 \u56db\u4f4d\u6570\u7801\u7ba1-GND P2 6 \u56db\u4f4d\u6570\u7801\u7ba1-VCC P2 \u8d85\u58f0\u6ce2\u4f20\u611f\u5668\u4ecb\u7ecd HS-SR04\u8d85\u58f0\u6ce2\u6a21\u5757\u662f\u5728\u4f20\u7edf\u7684HC-SR04\u8d85\u58f0\u6ce2\u6a21\u5757\u57fa\u7840\u4e0a\u8fdb\u884c\u4f18\u5316\u8bbe\u8ba1\u3002\u529f\u80fd\u5c3a\u5bf8\u5927\u5c0f\u5b8c\u5168\u517c\u5bb9\u4f20\u7edf\u7684HC-SR04\u6a21\u5757\uff0c\u5728\u7ec6\u8282\u4e0a\u6bd4\u4f20\u7edf\u7684HC-SR04\u6a21\u5757\u66f4\u4f18\u5316\u4e86\u8bb8\u591a\u3002\u672c\u6a21\u5757\u6027\u80fd\u7a33\u5b9a\uff0c\u6d4b\u5ea6\u8ddd\u79bb\u7cbe\u786e\uff0c\u6a21\u5757\u9ad8\u7cbe\u5ea6\uff0c\u76f2\u533a\u5c0f\u3002\u4ea7\u54c1\u5e94\u7528\u9886\u57df\uff1a\u673a\u5668\u4eba\u907f\u969c\u3001\u7269\u4f53\u6d4b\u8ddd\u3001\u6db2\u4f4d\u68c0\u6d4b\u3001\u516c\u5171\u5b89\u9632\u3001\u505c\u8f66\u573a\u7b49\u7b49\u00b7\u00b7\u00b7\u00b7 \u7b2c\u4e09\u65b9\u5e93 \u6211\u4eec\u5728libs\u6587\u4ef6\u5939\u4e2d\u65b0\u5efa\u4e00\u4e2aHCSR04.py\u6587\u4ef6\uff0c\u628a\u7f51\u4e0a\u7684\u5730\u65b9\u653e\u5e93\u4fdd\u5b58\u8fdb\u53bb\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a ```python from machine import Pin, time_pulse_us import time class HCSR04: \"\"\" HCSR04\u8d85\u58f0\u6ce2\u6d4b\u8ddd\u6a21\u5757\u9a71\u52a8\u7c7b \u9002\u7528\u4e8eMicroPython ESP32\u73af\u5883 \u5f15\u811a\u8bf4\u660e\uff1a trig_pin: \u89e6\u53d1\u4fe1\u53f7\u5f15\u811a\uff08\u8f93\u51fa\u6a21\u5f0f\uff09 echo_pin: \u56de\u58f0\u63a5\u6536\u5f15\u811a\uff08\u8f93\u5165\u6a21\u5f0f\uff09 \u6ce8\u610f\uff1aESP32\u5f15\u811a\u5de5\u4f5c\u7535\u538b\u4e3a3.3V\uff0c\u5efa\u8bae\u5728Echo\u5f15\u811a\u6dfb\u52a0\u5206\u538b\u7535\u8def\u907f\u514d\u635f\u574f \"\"\" def __init__(self, trig_pin, echo_pin): \"\"\" \u521d\u59cb\u5316\u8d85\u58f0\u6ce2\u6a21\u5757 :param trig_pin: \u89e6\u53d1\u5f15\u811a\u7f16\u53f7\uff08\u6574\u6570\uff09 :param echo_pin: \u56de\u58f0\u5f15\u811a\u7f16\u53f7\uff08\u6574\u6570\uff09 \"\"\" # \u521d\u59cb\u5316Trig\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f self.trig = Pin(trig_pin, Pin.OUT) # \u521d\u59cb\u5316Echo\u5f15\u811a\u4e3a\u8f93\u5165\u6a21\u5f0f self.echo = Pin(echo_pin, Pin.IN) # \u8bbe\u7f6e\u9ed8\u8ba4\u58f0\u901f\uff0825\u6444\u6c0f\u5ea6\u5e72\u71e5\u7a7a\u6c14\u4e2d\u7684\u901f\u5ea6\uff0c\u5355\u4f4d\uff1a\u7c73/\u79d2\uff09 self.sound_speed = 340 # \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff08\u5bf9\u5e94\u6700\u5927\u6d4b\u91cf\u8ddd\u79bb4\u7c73\uff09 self.timeout = 4 * 2 / self.sound_speed * 1000000 # \u8ba1\u7b97\u8d85\u65f6\u65f6\u95f4\uff08\u5fae\u79d2\uff09 def distance_cm(self, samples=3): \"\"\" \u83b7\u53d6\u6d4b\u91cf\u8ddd\u79bb\uff08\u5398\u7c73\uff09 :param samples: \u91c7\u6837\u6b21\u6570\uff08\u53d6\u591a\u6b21\u6d4b\u91cf\u7684\u5e73\u5747\u503c\uff09 :return: \u8ddd\u79bb\uff08\u5398\u7c73\uff09\uff0c-1\u8868\u793a\u6d4b\u91cf\u5931\u8d25 \"\"\" distances = [] for _ in range(samples): distance = self._single_measurement() if distance == -1: continue distances.append(distance) time.sleep_ms(50) # \u6bcf\u6b21\u6d4b\u91cf\u95f4\u969450ms if not distances: return -1 # \u6240\u6709\u6d4b\u91cf\u5747\u5931\u8d25 return sum(distances) / len(distances) # \u8fd4\u56de\u5e73\u5747\u503c def _single_measurement(self): \"\"\" \u6267\u884c\u5355\u6b21\u8ddd\u79bb\u6d4b\u91cf :return: \u5355\u6b21\u6d4b\u91cf\u8ddd\u79bb\uff08\u5398\u7c73\uff09\uff0c-1\u8868\u793a\u5931\u8d25 \"\"\" # \u786e\u4fddTrig\u5f15\u811a\u5148\u7f6e\u4f4e self.trig.value(0) time.sleep_us(2) try: # \u53d1\u900110us\u9ad8\u7535\u5e73\u8109\u51b2\u89e6\u53d1\u6d4b\u91cf self.trig.value(1) time.sleep_us(10) self.trig.value(0) # \u4f7f\u7528\u8109\u51b2\u5bbd\u5ea6\u6d4b\u91cf\u51fd\u6570\u83b7\u53d6\u9ad8\u7535\u5e73\u6301\u7eed\u65f6\u95f4 # \u53c2\u6570\u8bf4\u660e\uff1a\u5f15\u811a\u5bf9\u8c61\uff0c\u89e6\u53d1\u72b6\u6001\uff0c\u8d85\u65f6\u65f6\u95f4\uff08\u5fae\u79d2\uff09 pulse_time = time_pulse_us(self.echo, 1, int(self.timeout)) # \u8ba1\u7b97\u8ddd\u79bb\uff08\u5355\u4f4d\uff1a\u5398\u7c73\uff09 # \u516c\u5f0f\u8bf4\u660e\uff1a\u8ddd\u79bb = (\u65f6\u95f4 * \u58f0\u901f) / 2 \uff08\u6765\u56de\u8ddd\u79bb\uff09 # \u65f6\u95f4\u5355\u4f4d\u8f6c\u6362\uff1a1\u79d2=1e6\u5fae\u79d2 \u2192 \u5398\u7c73\u8f6c\u6362\u7cfb\u6570\uff1a0.0343/2 \u2192 0.01715 \u2192 1/58 if pulse_time < 0: return -1 # \u8d85\u65f6\u8fd4\u56de-1 distance = (pulse_time * 0.0343) / 2 # \u66f4\u7cbe\u786e\u7684\u5398\u7c73\u8ba1\u7b97\u65b9\u5f0f # distance = pulse_time / 58 # \u7b80\u5316\u7684\u8fd1\u4f3c\u8ba1\u7b97\u65b9\u5f0f # \u8fc7\u6ee4\u5f02\u5e38\u503c\uff08\u6839\u636e\u6a21\u5757\u89c4\u683c\uff0c\u6709\u6548\u6d4b\u91cf\u8303\u56f42cm-400cm\uff09 if 2 <= distance <= 400: return distance return -1 except Exception as e: print(\"\u6d4b\u91cf\u9519\u8bef:\", e) return -1 # \u4f7f\u7528\u793a\u4f8b if name == \" main \": # \u521d\u59cb\u5316\u4f20\u611f\u5668\uff08Trig\u5f15\u811a=12, Echo\u5f15\u811a=14\uff09 sensor = HCSR04(trig_pin=12, echo_pin=14) while True: dist = sensor.distance_cm() if dist != -1: print(\"\u8ddd\u79bb\uff1a{:.1f} cm\".format(dist)) else: print(\"\u6d4b\u91cf\u5931\u8d25\") time.sleep(1) ```","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E8%B6%85%E5%A3%B0%E6%B3%A2%E4%BC%A0%E6%84%9F%E5%99%A8/#1","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c\u4e00\uff1a\u5728\u56db\u4f4d\u6570\u7801\u7ba1\u4e0a\u663e\u793a\u8d85\u58f0\u6ce2\u68c0\u6d4b\u8ddd\u79bb ''' from machine import I2C, Pin from libs.HCSR04 import HCSR04 # \u5bfc\u5165\u8d85\u58f0\u6ce2\u7684\u5e93 from libs.FourDigitDisplay import FourDigitDisplay # \u5bfc\u5165\u56db\u4f4d\u6570\u7801\u7ba1\u7684\u5e93 import time # \u521d\u59cb\u5316I2C i2c = I2C(scl=Pin(22), sda=Pin(21), freq=100000) display = FourDigitDisplay(i2c) # \u521d\u59cb\u5316\u4f20\u611f\u5668\uff08Trig\u5f15\u811a=32, Echo\u5f15\u811a=33\uff09 sensor = HCSR04(trig_pin=32, echo_pin=33) while True: dist = int(sensor.distance_cm()*100) # \u5c06\u663e\u793a\u7684\u6570\u5b57\u8f6c\u6362\u4e3a4\u4e3a\u6574\u6570 display.shownum(dist) display.showDP(bit=1, show=True) # \u5728\u7b2c\u4e8c\u4f4d\u4e0a\u663e\u793a\u5c0f\u6570\u70b9 time.sleep(0.02) print(dist)","title":"\u5b9e\u9a8c1\uff1a\u8d85\u58f0\u6ce2\u6d4b\u8ddd"},{"location":"MicroPython/%E9%9B%A8%E6%BB%B4%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u96e8\u6ef4\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u96e8\u6ef4\u4f20\u611f\u5668 1 4 \u6709\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u58f0\u97f3\u4f20\u611f\u5668 32 \u96e8\u6ef4\u4f20\u611f\u5668\u4ecb\u7ecd \u96e8\u6ef4\u4f20\u611f\u5668\u662f\u4e00\u79cd\u4f20\u611f\u88c5\u7f6e\uff0c\u4e3b\u8981\u7528\u4e8e\u68c0\u6d4b\u662f\u5426\u4e0b\u96e8\u53ca\u96e8\u91cf\u7684\u5927\u5c0f\uff0c\u5e76\u5e7f\u6cdb\u5e94\u7528\u4e8e\u6c7d\u8f66\u81ea\u52a8\u522e\u6c34\u7cfb\u7edf\u3001\u667a\u80fd\u706f\u5149\u7cfb\u7edf\u548c\u667a\u80fd\u5929\u7a97\u7cfb\u7edf\u7b49\u3002\u4f20\u611f\u5668\u91c7\u7528\u4f18\u8d28FR-04\u53cc\u6599\uff0c\u5927\u9762\u79ef5.0 * 4.0\u5398\u7c73\uff0c\u9540\u954d\u5904\u7406\u9762\u3002 \u5b83\u5177\u6709\u6297\u6c27\u5316\uff0c\u5bfc\u7535\u6027\u548c\u66f4\u51fa\u8272\u7684\u8010\u4e45\u6027\u80fd; \u7528\u7535\u4f4d\u5668\u8c03\u8282\u7075\u654f\u5ea6; \u5de5\u4f5c\u7535\u538b\u4e3a3.3 V\u81f35 V. \u8f93\u51fa\u5f62\u5f0f\uff1a\u6570\u5b57\u503c\u8f93\u51fa\uff080\u548c1\uff09\u548c\u6a21\u62df\u503cAO\u7535\u538b\u8f93\u51fa, \u4f7f\u7528LM393\u53cc\u7535\u538b\u6bd4\u8f83\u5668, \u5f53\u4f20\u611f\u5668\u8fde\u63a5\u52305v\u7535\u6e90\u65f6\uff0c\u611f\u5e94\u677f\u4e0a\u6ca1\u6709\u6c34\u6ef4\uff0cDO\u8f93\u51fa\u5904\u4e8e\u9ad8\u7535\u5e73\u3002 \u5f53\u6ef4\u4e0b\u6db2\u6ef4\u65f6\uff0cDO\u8f93\u51fa\u5904\u4e8e\u4f4e\u7535\u5e73\u3002 \u5982\u679c\u6211\u4eec\u5237\u6389\u6c34\u6ef4\uff0c\u8f93\u51fa\u5c06\u8fd4\u56de\u9ad8\u6c34\u5e73\u72b6\u6001\u3002 AO\u6a21\u62df\u8f93\u51fa\u53ef\u4ee5\u8fde\u63a5\u5230\u5fae\u63a7\u5236\u5668\u4e0a\u7684AD\u63a5\u53e3\uff0c\u4ee5\u68c0\u6d4b\u4e0a\u9762\u96e8\u6ef4\u7684\u5927\u5c0f\u3002 DO\u6570\u5b57\u8f93\u51fa\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5fae\u63a7\u5236\u5668\uff0c\u4ee5\u68c0\u6d4b\u662f\u5426\u6709\u96e8\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u96e8\u6ef4\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u84dd\u8272\u81f3\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vol = Pin(32, Pin.IN) while True: print(vol.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6674\u6717\u7684\u5929\u6c14\u72b6\u6001\u4e0b\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u9634\u96e8\u5929\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u503c\u4e3a\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u96e8\u6ef4\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 raindrop = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: print(raindrop.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u6674\u6717\u5929\u6c14\u6570\u5b57\u503c\u6bd4\u8f83\u5927\uff0c 2. \u9634\u96e8\u5929\u6570\u503c\u660e\u663e\u964d\u4f4e\uff0c< 40000 \u5b9e\u9a8c\u4e8c\uff1a\u9634\u96e8\u5929\u62a5\u8b66\u5668 \u7a0b\u5e8f\u5982\u4e0b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c\u4e00\uff1a\u9634\u96e8\u5929\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 \u6674\u5929\u662f\u5b89\u9759\u7684\u72b6\u6001\uff0c\u9634\u96e8\u5929\u53d1\u51fa\u62a5\u8b66 ''' from machine import Pin, ADC import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u521d\u59cb\u5316\u96e8\u6ef4\u4f20\u611f\u5668 raindrop = Pin(4, Pin.IN) buzzer.value(0) # \u8bbe\u7f6e\u521d\u59cb\u72b6\u6001\u4e3a\u9759\u97f3\u72b6\u6001 while True: if raindrop.value() == 0: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2) \u7a0b\u5e8f\u5982\u4e0b\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c\u4e00\uff1a\u9634\u96e8\u5929\u62a5\u8b66\u5668\uff08\u6a21\u62df\u4fe1\u53f7\uff09 \u6674\u5929\u662f\u5b89\u9759\u7684\u72b6\u6001\uff0c\u9634\u96e8\u5929\u53d1\u51fa\u62a5\u8b66 ''' from machine import Pin, ADC import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u521d\u59cb\u5316\u96e8\u6ef4\u4f20\u611f\u5668 raindrop = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) buzzer.value(0) # \u8bbe\u7f6e\u521d\u59cb\u72b6\u6001\u4e3a\u9759\u97f3\u72b6\u6001 while True: if raindrop.read_u16() < 40000: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2)","title":"33.\u96e8\u6ef4\u4f20\u611f\u5668"},{"location":"MicroPython/%E9%9B%A8%E6%BB%B4%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u96e8\u6ef4\u4f20\u611f\u5668"},{"location":"MicroPython/%E9%9B%A8%E6%BB%B4%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u96e8\u6ef4\u4f20\u611f\u5668 1 4 \u6709\u6e90\u8702\u9e23\u5668 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 LED\u706f 2 2 \u58f0\u97f3\u4f20\u611f\u5668 32 \u96e8\u6ef4\u4f20\u611f\u5668\u4ecb\u7ecd \u96e8\u6ef4\u4f20\u611f\u5668\u662f\u4e00\u79cd\u4f20\u611f\u88c5\u7f6e\uff0c\u4e3b\u8981\u7528\u4e8e\u68c0\u6d4b\u662f\u5426\u4e0b\u96e8\u53ca\u96e8\u91cf\u7684\u5927\u5c0f\uff0c\u5e76\u5e7f\u6cdb\u5e94\u7528\u4e8e\u6c7d\u8f66\u81ea\u52a8\u522e\u6c34\u7cfb\u7edf\u3001\u667a\u80fd\u706f\u5149\u7cfb\u7edf\u548c\u667a\u80fd\u5929\u7a97\u7cfb\u7edf\u7b49\u3002\u4f20\u611f\u5668\u91c7\u7528\u4f18\u8d28FR-04\u53cc\u6599\uff0c\u5927\u9762\u79ef5.0 * 4.0\u5398\u7c73\uff0c\u9540\u954d\u5904\u7406\u9762\u3002 \u5b83\u5177\u6709\u6297\u6c27\u5316\uff0c\u5bfc\u7535\u6027\u548c\u66f4\u51fa\u8272\u7684\u8010\u4e45\u6027\u80fd; \u7528\u7535\u4f4d\u5668\u8c03\u8282\u7075\u654f\u5ea6; \u5de5\u4f5c\u7535\u538b\u4e3a3.3 V\u81f35 V. \u8f93\u51fa\u5f62\u5f0f\uff1a\u6570\u5b57\u503c\u8f93\u51fa\uff080\u548c1\uff09\u548c\u6a21\u62df\u503cAO\u7535\u538b\u8f93\u51fa, \u4f7f\u7528LM393\u53cc\u7535\u538b\u6bd4\u8f83\u5668, \u5f53\u4f20\u611f\u5668\u8fde\u63a5\u52305v\u7535\u6e90\u65f6\uff0c\u611f\u5e94\u677f\u4e0a\u6ca1\u6709\u6c34\u6ef4\uff0cDO\u8f93\u51fa\u5904\u4e8e\u9ad8\u7535\u5e73\u3002 \u5f53\u6ef4\u4e0b\u6db2\u6ef4\u65f6\uff0cDO\u8f93\u51fa\u5904\u4e8e\u4f4e\u7535\u5e73\u3002 \u5982\u679c\u6211\u4eec\u5237\u6389\u6c34\u6ef4\uff0c\u8f93\u51fa\u5c06\u8fd4\u56de\u9ad8\u6c34\u5e73\u72b6\u6001\u3002 AO\u6a21\u62df\u8f93\u51fa\u53ef\u4ee5\u8fde\u63a5\u5230\u5fae\u63a7\u5236\u5668\u4e0a\u7684AD\u63a5\u53e3\uff0c\u4ee5\u68c0\u6d4b\u4e0a\u9762\u96e8\u6ef4\u7684\u5927\u5c0f\u3002 DO\u6570\u5b57\u8f93\u51fa\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5fae\u63a7\u5236\u5668\uff0c\u4ee5\u68c0\u6d4b\u662f\u5426\u6709\u96e8\u3002 \u5b9e\u7269\u5c55\u793a \u6211\u4eec\u4f7f\u7528\u7684\u8fd9\u6b3e\u96e8\u6ef4\u4f20\u611f\u5668\u662f\u53ef\u4ee5\u8fdb\u884c\u6570\u5b57\u4fe1\u53f7\u548c\u6a21\u62df\u4fe1\u53f7\u5207\u6362\uff0cD\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0cA\u4e3a\u6a21\u62df\u4fe1\u53f7\uff08\u5982\u4e0a\u56fe\uff09 \u84dd\u8272\u7684\u65b9\u5757\u4e0a\u6709\u4e2a\u5341\u5b57\u5b54\u662f\u7528\u6765\u8c03\u8282\u7075\u654f\u5ea6\u7684\u3002\u4f7f\u7528\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u8282\u84dd\u8272\u81f3\u6307\u793a\u706f\u521a\u597d\u7184\u706d\u7684\u72b6\u6001\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E9%9B%A8%E6%BB%B4%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u58f0\u97f3\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' from machine import Pin,ADC import time # \u5728 32 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vol = Pin(32, Pin.IN) while True: print(vol.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u6674\u6717\u7684\u5929\u6c14\u72b6\u6001\u4e0b\uff0c\u503c\u663e\u793a\u4e3a\u201c1\u201d\uff0c\u9634\u96e8\u5929\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u503c\u4e3a\"0\" \u6a21\u62df\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u96e8\u6ef4\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b\uff08\u6a21\u62df\u6a21\u5f0f\uff09 ''' from machine import Pin, ADC import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 raindrop = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) while True: print(raindrop.read_u16()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a1. \u6674\u6717\u5929\u6c14\u6570\u5b57\u503c\u6bd4\u8f83\u5927\uff0c 2. \u9634\u96e8\u5929\u6570\u503c\u660e\u663e\u964d\u4f4e\uff0c< 40000","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E9%9B%A8%E6%BB%B4%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b\uff08\u6570\u5b57\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c\u4e00\uff1a\u9634\u96e8\u5929\u62a5\u8b66\u5668\uff08\u6570\u5b57\u4fe1\u53f7\uff09 \u6674\u5929\u662f\u5b89\u9759\u7684\u72b6\u6001\uff0c\u9634\u96e8\u5929\u53d1\u51fa\u62a5\u8b66 ''' from machine import Pin, ADC import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u521d\u59cb\u5316\u96e8\u6ef4\u4f20\u611f\u5668 raindrop = Pin(4, Pin.IN) buzzer.value(0) # \u8bbe\u7f6e\u521d\u59cb\u72b6\u6001\u4e3a\u9759\u97f3\u72b6\u6001 while True: if raindrop.value() == 0: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2) \u7a0b\u5e8f\u5982\u4e0b\uff08\u6a21\u62df\u4fe1\u53f7\uff09 ''' \u5b9e\u9a8c\u4e00\uff1a\u9634\u96e8\u5929\u62a5\u8b66\u5668\uff08\u6a21\u62df\u4fe1\u53f7\uff09 \u6674\u5929\u662f\u5b89\u9759\u7684\u72b6\u6001\uff0c\u9634\u96e8\u5929\u53d1\u51fa\u62a5\u8b66 ''' from machine import Pin, ADC import time # \u521d\u59cb\u5316\u6709\u6e90\u8702\u9e23\u5668 buzzer = Pin(2, Pin.OUT) # \u521d\u59cb\u5316\u96e8\u6ef4\u4f20\u611f\u5668 raindrop = ADC(Pin(4, Pin.IN),atten = ADC.ATTN_11DB) buzzer.value(0) # \u8bbe\u7f6e\u521d\u59cb\u72b6\u6001\u4e3a\u9759\u97f3\u72b6\u6001 while True: if raindrop.read_u16() < 40000: buzzer.value(1) time.sleep(0.2) buzzer.value(0) time.sleep(0.2)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u9634\u96e8\u5929\u62a5\u8b66\u5668"},{"location":"MicroPython/%E9%9C%87%E5%8A%A8%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u9707\u52a8\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u9707\u52a8\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u9707\u52a8\u4f20\u611f\u5668 4 2 LED\u706f 2 \u9707\u52a8\u4f20\u611f\u5668\u4ecb\u7ecd \u9707\u52a8\u4f20\u611f\u5668\u662f\u4e00\u6b3e\u57fa\u4e8e\u5f39\u7c27\u6446\u52a8\u539f\u7406\u8bbe\u8ba1\u4f20\u611f\u5668\u6a21\u5757\u3002\u5b83\u53ef\u4ee5\u68c0\u6d4b\u5230\u9707\u52a8\u4fe1\u53f7\uff0c\u7136\u540e\u8f93\u51fa\u5f00\u5173\u4fe1\u53f7\u5230Arduino\uff0c\u4ea7\u54c1\u4e0d\u9707\u52a8\u65f6\uff0c\u9707\u52a8\u5f00\u5173\u5448\u65ad\u5f00\u72b6\u6001\uff0c\u8f93\u51fa\u7aef\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u84dd\u8272\u6307\u793a\u706f\u4e0d\u4eae\uff1b\u4ea7\u54c1\u9707\u52a8\u65f6\uff0c\u9707\u52a8\u5f00\u5173\u77ac\u95f4\u5bfc\u901a\uff0c\u8f93\u51fa\u7aef\u8f93\u51fa\u4f4e\u7535\u5e73\uff0c\u84dd\u8272\u6307\u793a\u706f\u4eae\uff1b\u6a21\u5757\u4f7f\u7528PH2.0\u63a5\u53e3\uff0c\u4f7f\u7528\u6570\u5b57\u8fde\u63a5\u7ebf\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8fde\u63a5\u5230\u4f20\u611f\u5668\u6269\u5c55\u677f\u4e0a\u3002\u5b83\u80fd\u591f\u611f\u77e5\u5fae\u5f31\u9707\u52a8\u4fe1\u53f7\uff0c\u53ef\u5b9e\u73b0\u4e0e\u9707\u52a8\u6709\u5173\u7684\u4e92\u52a8\u4f5c\u54c1\u3002\u7528\u4e8e\u5404\u79cd\u9707\u52a8\u89e6\u53d1\u4f5c\u7528\uff0c\u62a5\u76d7\u62a5\u8b66\uff0c\u667a\u80fd\u5c0f\u8f66\uff0c\u7535\u5b50\u79ef\u6728\u7b49\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u9707\u52a8\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vibrate = Pin(4, Pin.IN) while True: print(vibrate.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u53d1\u751f\u503e\u659c\u65f6\u8fd4\u56de\uff1a0 \u5b9e\u9a8c\u4e8c\uff1a\u9707\u52a8\u62a5\u8b66\u706f \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u503e\u659c\u62a5\u8b66\u706f \u53d1\u751f\u503e\u659c\u65f6\uff0c\u7ea2\u706f\u95ea\u70c13\u6b21 ''' from machine import Pin import time vibrate = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if vibrate.value() == 0: for i in range(3): led.value(1) time.sleep(0.2) led.value(0) time.sleep(0.2)","title":"31.\u9707\u52a8\u4f20\u611f\u5668"},{"location":"MicroPython/%E9%9C%87%E5%8A%A8%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u9707\u52a8\u4f20\u611f\u5668"},{"location":"MicroPython/%E9%9C%87%E5%8A%A8%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u9707\u52a8\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u9707\u52a8\u4f20\u611f\u5668 4 2 LED\u706f 2 \u9707\u52a8\u4f20\u611f\u5668\u4ecb\u7ecd \u9707\u52a8\u4f20\u611f\u5668\u662f\u4e00\u6b3e\u57fa\u4e8e\u5f39\u7c27\u6446\u52a8\u539f\u7406\u8bbe\u8ba1\u4f20\u611f\u5668\u6a21\u5757\u3002\u5b83\u53ef\u4ee5\u68c0\u6d4b\u5230\u9707\u52a8\u4fe1\u53f7\uff0c\u7136\u540e\u8f93\u51fa\u5f00\u5173\u4fe1\u53f7\u5230Arduino\uff0c\u4ea7\u54c1\u4e0d\u9707\u52a8\u65f6\uff0c\u9707\u52a8\u5f00\u5173\u5448\u65ad\u5f00\u72b6\u6001\uff0c\u8f93\u51fa\u7aef\u8f93\u51fa\u9ad8\u7535\u5e73\uff0c\u84dd\u8272\u6307\u793a\u706f\u4e0d\u4eae\uff1b\u4ea7\u54c1\u9707\u52a8\u65f6\uff0c\u9707\u52a8\u5f00\u5173\u77ac\u95f4\u5bfc\u901a\uff0c\u8f93\u51fa\u7aef\u8f93\u51fa\u4f4e\u7535\u5e73\uff0c\u84dd\u8272\u6307\u793a\u706f\u4eae\uff1b\u6a21\u5757\u4f7f\u7528PH2.0\u63a5\u53e3\uff0c\u4f7f\u7528\u6570\u5b57\u8fde\u63a5\u7ebf\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8fde\u63a5\u5230\u4f20\u611f\u5668\u6269\u5c55\u677f\u4e0a\u3002\u5b83\u80fd\u591f\u611f\u77e5\u5fae\u5f31\u9707\u52a8\u4fe1\u53f7\uff0c\u53ef\u5b9e\u73b0\u4e0e\u9707\u52a8\u6709\u5173\u7684\u4e92\u52a8\u4f5c\u54c1\u3002\u7528\u4e8e\u5404\u79cd\u9707\u52a8\u89e6\u53d1\u4f5c\u7528\uff0c\u62a5\u76d7\u62a5\u8b66\uff0c\u667a\u80fd\u5c0f\u8f66\uff0c\u7535\u5b50\u79ef\u6728\u7b49\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E9%9C%87%E5%8A%A8%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u9707\u52a8\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin import time # \u5728 4 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 vibrate = Pin(4, Pin.IN) while True: print(vibrate.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u53d1\u751f\u503e\u659c\u65f6\u8fd4\u56de\uff1a0","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E9%9C%87%E5%8A%A8%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u503e\u659c\u62a5\u8b66\u706f \u53d1\u751f\u503e\u659c\u65f6\uff0c\u7ea2\u706f\u95ea\u70c13\u6b21 ''' from machine import Pin import time vibrate = Pin(4, Pin.IN) led = Pin(2,Pin.OUT) while True: if vibrate.value() == 0: for i in range(3): led.value(1) time.sleep(0.2) led.value(0) time.sleep(0.2)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u9707\u52a8\u62a5\u8b66\u706f"},{"location":"MicroPython/%E9%9C%8D%E5%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/","text":"\u970d\u5c14\u4f20\u611f\u5668 \u51c6\u5907\u5de5\u4f5c \u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u970d\u5c14\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u970d\u5c14\u4f20\u611f\u5668 2 2 LED\u706f 4 \u970d\u5c14\u4f20\u611f\u5668\u4ecb\u7ecd** \u970d\u5c14\u78c1\u6027\u4f20\u611f\u5668\u662f\u6839\u636e\u970d\u5c14\u6548\u5e94\u5236\u4f5c\u7684\u4e00\u79cd\u78c1\u573a\u4f20\u611f\u5668\u3002\u5168\u6781\u970d\u5c14\u6548\u5e94\u662f\u78c1\u7535\u6548\u5e94\u7684\u4e00\u79cd\u3002\u5f53\u78c1\u94c1\u63a5\u8fd1\u5176\u51b2\u523a\u8868\u9762\u65f6\uff0c\u5f00\u5173\u8f93\u51fa\u4f4e\u7535\u5e73; \u5f53\u78c1\u94c1\u79fb\u5f00\u65f6\uff0c\u5f00\u5173\u8f93\u51fa\u9ad8\u7535\u5e73\u3002 \u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c \u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u970d\u5c14\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin,ADC import time # \u5728 2 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 hall = Pin(2, Pin.IN) while True: print(hall.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u6709\u78c1\u4f53\u9760\u8fd1\u8fd4\u56de\uff1a0 \u5b9e\u9a8c\u4e8c\uff1a\u970d\u5c14\u611f\u5e94\u706f \u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u970d\u5c14\u5e94\u611f\u5e94\u706f \u6709\u78c1\u4f53\u9760\u8fd1\u65f6\u706f\u4eae\u3002\u79bb\u5f00\u65f6\u706f\u706d ''' from machine import Pin import time hall = Pin(2, Pin.IN) led = Pin(4,Pin.OUT) while True: if hall.value() == 0: led.value(1) else: led.value(0)","title":"29.\u970d\u5c14\u4f20\u611f\u5668"},{"location":"MicroPython/%E9%9C%8D%E5%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_1","text":"","title":"\u970d\u5c14\u4f20\u611f\u5668"},{"location":"MicroPython/%E9%9C%8D%E5%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_2","text":"\u7528\u5230\u7684\u5668\u6750 \u5e8f\u53f7 \u540d\u79f0 \u6570\u91cf 1 ESP32\u5f00\u53d1\u677f 1 2 ESP32\u62d3\u5c55\u7248 1 3 \u970d\u5c14\u4f20\u611f\u5668 1 4 LED\u706f 1 5 PH2.0\u53cc\u5934\u7ebf 2 \u7535\u8def\u642d\u5efa \u5e8f\u53f7 \u540d\u79f0 \u5f15\u811a\u53f7 1 \u970d\u5c14\u4f20\u611f\u5668 2 2 LED\u706f 4 \u970d\u5c14\u4f20\u611f\u5668\u4ecb\u7ecd** \u970d\u5c14\u78c1\u6027\u4f20\u611f\u5668\u662f\u6839\u636e\u970d\u5c14\u6548\u5e94\u5236\u4f5c\u7684\u4e00\u79cd\u78c1\u573a\u4f20\u611f\u5668\u3002\u5168\u6781\u970d\u5c14\u6548\u5e94\u662f\u78c1\u7535\u6548\u5e94\u7684\u4e00\u79cd\u3002\u5f53\u78c1\u94c1\u63a5\u8fd1\u5176\u51b2\u523a\u8868\u9762\u65f6\uff0c\u5f00\u5173\u8f93\u51fa\u4f4e\u7535\u5e73; \u5f53\u78c1\u94c1\u79fb\u5f00\u65f6\uff0c\u5f00\u5173\u8f93\u51fa\u9ad8\u7535\u5e73\u3002","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"MicroPython/%E9%9C%8D%E5%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_3","text":"\u4fe1\u53f7\u68c0\u6d4b \u6570\u5b57\u4fe1\u53f7\u68c0\u6d4b ```python ''' \u970d\u5c14\u4f20\u611f\u5668\u4fe1\u53f7\u68c0\u6d4b ''' from machine import Pin,ADC import time # \u5728 2 \u5f15\u811a\u521b\u5efa Pin \u5bf9\u8c61 hall = Pin(2, Pin.IN) while True: print(hall.value()) time.sleep(0.1) ``` \u6d4b\u8bd5\u7ed3\u679c\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u503c\u4e3a\uff1a1\uff0c\u6709\u78c1\u4f53\u9760\u8fd1\u8fd4\u56de\uff1a0","title":"\u5b9e\u9a8c\u4e00\uff1a\u68c0\u6d4b\u4fe1\u53f7\u6570\u503c"},{"location":"MicroPython/%E9%9C%8D%E5%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8/#_4","text":"\u7a0b\u5e8f\u5982\u4e0b ''' \u5b9e\u9a8c1\uff1a\u970d\u5c14\u5e94\u611f\u5e94\u706f \u6709\u78c1\u4f53\u9760\u8fd1\u65f6\u706f\u4eae\u3002\u79bb\u5f00\u65f6\u706f\u706d ''' from machine import Pin import time hall = Pin(2, Pin.IN) led = Pin(4,Pin.OUT) while True: if hall.value() == 0: led.value(1) else: led.value(0)","title":"\u5b9e\u9a8c\u4e8c\uff1a\u970d\u5c14\u611f\u5e94\u706f"},{"location":"Mixly/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","text":"Mixly\u53ef\u89c6\u5316\u7f16\u7a0b - \u73af\u5883\u642d\u5efa Mixly\u7b80\u4ecb\uff1a \u5b83\u662f\u4e00\u6b3e\u7531\u5317\u4eac\u5e08\u8303\u5927\u5b66\u5085\u9a9e\u535a\u58eb\u56e2\u961f\u5f00\u53d1\u7684\u514d\u8d39\u5f00\u6e90\u56fe\u5f62\u5316\u7f16\u7a0b\u5de5\u5177\uff0c\u4e13\u4e3a\u7f16\u7a0b\u542f\u8499\u8bbe\u8ba1\u3002\u5b83\u901a\u8fc7\u62d6\u62fd\u79ef\u6728\u5f0f\u6a21\u5757\u6784\u5efa\u7a0b\u5e8f\uff0c \u6781\u5927\u964d\u4f4e\u4e86\u7f16\u7a0b\u95e8\u69db\uff0c\u5c24\u5176\u9002\u5408\u9752\u5c11\u5e74\u53ca\u96f6\u57fa\u7840\u5b66\u4e60\u8005\u5165\u95e8\u3002\u7528\u6237\u65e0\u9700\u8bb0\u5fc6\u590d\u6742\u8bed\u6cd5\uff0c\u5373\u53ef\u76f4\u89c2\u7406\u89e3\u53d8\u91cf\u3001\u5faa\u73af\u3001\u6761\u4ef6\u8bed\u53e5\u7b49\u7f16\u7a0b\u6982\u5ff5\uff0c \u540c\u65f6\u652f\u6301\u5b9e\u65f6\u67e5\u770b\u751f\u6210\u7684Arduino\u4ee3\u7801\uff0c\u4e3a\u540e\u7eed\u8fc7\u6e21\u5230\u6587\u672c\u7f16\u7a0b\u5960\u5b9a\u57fa\u7840\u3002 \u5728\u7f16\u7a0b\u542f\u8499\u4e2d\uff0cMixly\u901a\u8fc7\u786c\u4ef6\u7ed3\u5408\u5b9e\u8df5\u663e\u8457\u63d0\u5347\u5b66\u4e60\u6548\u679c\u3002\u5176\u517c\u5bb9Arduino\u3001ESP32\u7b49\u4e3b\u6d41\u5f00\u53d1\u677f\u53ca\u591a\u79cd\u4f20\u611f\u5668\uff08\u5982\u8d85\u58f0\u6ce2 \u3001\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\uff09\uff0c\u5b66\u751f\u53ef\u901a\u8fc7\u8da3\u5473\u9879\u76ee\uff08\u5982\u547c\u5438\u706f\u3001\u667a\u80fd\u98ce\u6247\uff09\u5c06\u62bd\u8c61\u903b\u8f91\u8f6c\u5316\u4e3a\u5b9e\u7269\u64cd\u4f5c\uff0c\u57f9\u517b\u201c\u95ee\u9898\u62c6\u89e3\u2014\u7b97\u6cd5\u8bbe\u8ba1\u2014\u5b9e\u8df5\u9a8c\u8bc1\u201d\u7684\u7cfb\u7edf\u601d\u7ef4\u3002 \u4e00\u3001Mixly\u8f6f\u4ef6\u4e0b\u8f7d\u548c\u5b89\u88c5 \u6253\u5f00\u7c73\u601d\u9f50\u8f6f\u4ef6\u7684\u5b98\u65b9\u7f51\u7ad9 https://mixly.cn/bnu-maker/mixl2.0rc \u70b9\u51fbMixly2.0RC4\u7248\uff0c\u518d\u70b9\u51fbMixly2.0 RC\u7f51\u76d8\u6587\u4ef6\u4e0b\u8f7d \u8fd9\u91cc\u4ee5WIN10-x64\u7248\u672c\u4e3a\u4f8b\uff0c\u73b0\u5728\u7684\u7535\u8111\u5927\u90e8\u5206\u90fd\u662fWIN10\u7684\u7cfb\u7edf\uff0c \u4e0b\u8f7d\u597d\u7684\u662f\u7c73\u601d\u9f50\u8f6f\u4ef6\u7684\u538b\u7f29\u5305\u3002\u538b\u7f29\u5305\u4e0b\u8f7d\u597d\u4e4b\u540e\uff0c\u89e3\u538b\u5230\u7535\u8111\u7684\u5176\u4e2d\u4e00\u4e2a\u786c\u76d8\u6839\u76ee\u5f55\u4e0b\uff08\u5efa\u8bae\u4e0d\u8981\u653e\u5728\u7cfb\u7edf\u76d8\uff09\uff0c\u5e76\u91cd\u547d\u540dMixly2.0\u6587\u4ef6\u5939\uff08\u4e0d\u80fd\u51fa\u73b0\u6c49\u5b57\uff09\u653e\u5230\u60a8\u7535\u8111\u6839\u5f55\u4e0b\u3002 \u9f20\u6807\u53f3\u952e\u70b9\u51fbMixly.exe \u53d1\u9001\u5230\u7535\u8111\u684c\u9762\uff0c\u65b9\u4fbf\u65e5\u540e\u6211\u4eec\u4f7f\u7528\u3002 \u4e8c\u3001\u7aef\u53e3\u9a71\u52a8\u7a0b\u5e8f\u4e0b\u8f7d\u548c\u5b89\u88c5 \u4e00\u822c\u7cfb\u7edf\u81ea\u5e26\u4e32\u53e3\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5982\u679c\u8fde\u63a5\u5355\u7247\u673a\u4e0d\u80fd\u8bc6\u522b\u518d\u5b89\u88c5\u5f00\u53d1\u677fUSB CH340\u4e32\u53e3\u9a71\u52a8 \u70b9\u51fb\u4e0b\u8f7d \u4e0b\u8f7d\u597d\u540e\u5c06\u538b\u7f29\u5305\u89e3\u538b\u51fa\u6765 \u6253\u5f00\u6587\u4ef6\u5939\u9009\u62e9SETUP\u53cc\u51fb \u70b9\u51fb\u5378\u8f7d\u4e4b\u524d\u7684\u9a71\u52a8 \u518d\u70b9\u51fb\u5b89\u88c5\u9a71\u52a8 \u6253\u5f00Mixly\u8f6f\u4ef6\uff0c\u9009\u62e9\u5bf9\u5e94\u7684\u677f\u5361\uff0c\u8fdb\u53bb\u7f16\u7a0b\u754c\u9762 \u70b9\u51fb\u53f3\u4e0a\u89d2COM\u7aef\u53e3\uff0c\u5982\u679c\u62d4\u63d2\u677f\u5361\u65f6\u6709\u589e\u52a0\u65b0\u7684\u7aef\u53e3\uff0c\u8bc1\u660e\u5b89\u88c5\u6210\u529f\uff0c\u53ef\u6b63\u5e38\u4f7f\u7528","title":"1.\u73af\u5883\u642d\u5efa"},{"location":"Mixly/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#mixly-","text":"Mixly\u7b80\u4ecb\uff1a \u5b83\u662f\u4e00\u6b3e\u7531\u5317\u4eac\u5e08\u8303\u5927\u5b66\u5085\u9a9e\u535a\u58eb\u56e2\u961f\u5f00\u53d1\u7684\u514d\u8d39\u5f00\u6e90\u56fe\u5f62\u5316\u7f16\u7a0b\u5de5\u5177\uff0c\u4e13\u4e3a\u7f16\u7a0b\u542f\u8499\u8bbe\u8ba1\u3002\u5b83\u901a\u8fc7\u62d6\u62fd\u79ef\u6728\u5f0f\u6a21\u5757\u6784\u5efa\u7a0b\u5e8f\uff0c \u6781\u5927\u964d\u4f4e\u4e86\u7f16\u7a0b\u95e8\u69db\uff0c\u5c24\u5176\u9002\u5408\u9752\u5c11\u5e74\u53ca\u96f6\u57fa\u7840\u5b66\u4e60\u8005\u5165\u95e8\u3002\u7528\u6237\u65e0\u9700\u8bb0\u5fc6\u590d\u6742\u8bed\u6cd5\uff0c\u5373\u53ef\u76f4\u89c2\u7406\u89e3\u53d8\u91cf\u3001\u5faa\u73af\u3001\u6761\u4ef6\u8bed\u53e5\u7b49\u7f16\u7a0b\u6982\u5ff5\uff0c \u540c\u65f6\u652f\u6301\u5b9e\u65f6\u67e5\u770b\u751f\u6210\u7684Arduino\u4ee3\u7801\uff0c\u4e3a\u540e\u7eed\u8fc7\u6e21\u5230\u6587\u672c\u7f16\u7a0b\u5960\u5b9a\u57fa\u7840\u3002 \u5728\u7f16\u7a0b\u542f\u8499\u4e2d\uff0cMixly\u901a\u8fc7\u786c\u4ef6\u7ed3\u5408\u5b9e\u8df5\u663e\u8457\u63d0\u5347\u5b66\u4e60\u6548\u679c\u3002\u5176\u517c\u5bb9Arduino\u3001ESP32\u7b49\u4e3b\u6d41\u5f00\u53d1\u677f\u53ca\u591a\u79cd\u4f20\u611f\u5668\uff08\u5982\u8d85\u58f0\u6ce2 \u3001\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\uff09\uff0c\u5b66\u751f\u53ef\u901a\u8fc7\u8da3\u5473\u9879\u76ee\uff08\u5982\u547c\u5438\u706f\u3001\u667a\u80fd\u98ce\u6247\uff09\u5c06\u62bd\u8c61\u903b\u8f91\u8f6c\u5316\u4e3a\u5b9e\u7269\u64cd\u4f5c\uff0c\u57f9\u517b\u201c\u95ee\u9898\u62c6\u89e3\u2014\u7b97\u6cd5\u8bbe\u8ba1\u2014\u5b9e\u8df5\u9a8c\u8bc1\u201d\u7684\u7cfb\u7edf\u601d\u7ef4\u3002 \u4e00\u3001Mixly\u8f6f\u4ef6\u4e0b\u8f7d\u548c\u5b89\u88c5 \u6253\u5f00\u7c73\u601d\u9f50\u8f6f\u4ef6\u7684\u5b98\u65b9\u7f51\u7ad9 https://mixly.cn/bnu-maker/mixl2.0rc \u70b9\u51fbMixly2.0RC4\u7248\uff0c\u518d\u70b9\u51fbMixly2.0 RC\u7f51\u76d8\u6587\u4ef6\u4e0b\u8f7d \u8fd9\u91cc\u4ee5WIN10-x64\u7248\u672c\u4e3a\u4f8b\uff0c\u73b0\u5728\u7684\u7535\u8111\u5927\u90e8\u5206\u90fd\u662fWIN10\u7684\u7cfb\u7edf\uff0c \u4e0b\u8f7d\u597d\u7684\u662f\u7c73\u601d\u9f50\u8f6f\u4ef6\u7684\u538b\u7f29\u5305\u3002\u538b\u7f29\u5305\u4e0b\u8f7d\u597d\u4e4b\u540e\uff0c\u89e3\u538b\u5230\u7535\u8111\u7684\u5176\u4e2d\u4e00\u4e2a\u786c\u76d8\u6839\u76ee\u5f55\u4e0b\uff08\u5efa\u8bae\u4e0d\u8981\u653e\u5728\u7cfb\u7edf\u76d8\uff09\uff0c\u5e76\u91cd\u547d\u540dMixly2.0\u6587\u4ef6\u5939\uff08\u4e0d\u80fd\u51fa\u73b0\u6c49\u5b57\uff09\u653e\u5230\u60a8\u7535\u8111\u6839\u5f55\u4e0b\u3002 \u9f20\u6807\u53f3\u952e\u70b9\u51fbMixly.exe \u53d1\u9001\u5230\u7535\u8111\u684c\u9762\uff0c\u65b9\u4fbf\u65e5\u540e\u6211\u4eec\u4f7f\u7528\u3002 \u4e8c\u3001\u7aef\u53e3\u9a71\u52a8\u7a0b\u5e8f\u4e0b\u8f7d\u548c\u5b89\u88c5 \u4e00\u822c\u7cfb\u7edf\u81ea\u5e26\u4e32\u53e3\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5982\u679c\u8fde\u63a5\u5355\u7247\u673a\u4e0d\u80fd\u8bc6\u522b\u518d\u5b89\u88c5\u5f00\u53d1\u677fUSB CH340\u4e32\u53e3\u9a71\u52a8 \u70b9\u51fb\u4e0b\u8f7d \u4e0b\u8f7d\u597d\u540e\u5c06\u538b\u7f29\u5305\u89e3\u538b\u51fa\u6765 \u6253\u5f00\u6587\u4ef6\u5939\u9009\u62e9SETUP\u53cc\u51fb \u70b9\u51fb\u5378\u8f7d\u4e4b\u524d\u7684\u9a71\u52a8 \u518d\u70b9\u51fb\u5b89\u88c5\u9a71\u52a8 \u6253\u5f00Mixly\u8f6f\u4ef6\uff0c\u9009\u62e9\u5bf9\u5e94\u7684\u677f\u5361\uff0c\u8fdb\u53bb\u7f16\u7a0b\u754c\u9762 \u70b9\u51fb\u53f3\u4e0a\u89d2COM\u7aef\u53e3\uff0c\u5982\u679c\u62d4\u63d2\u677f\u5361\u65f6\u6709\u589e\u52a0\u65b0\u7684\u7aef\u53e3\uff0c\u8bc1\u660e\u5b89\u88c5\u6210\u529f\uff0c\u53ef\u6b63\u5e38\u4f7f\u7528","title":"Mixly\u53ef\u89c6\u5316\u7f16\u7a0b - \u73af\u5883\u642d\u5efa"},{"location":"%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/%E9%85%8D%E7%BD%AE/","text":"","title":"\u914d\u7f6e"},{"location":"%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/%E5%AE%89%E8%A3%85/macos/","text":"","title":"Macos"},{"location":"%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/%E5%AE%89%E8%A3%85/windows/","text":"","title":"Windows"}]}